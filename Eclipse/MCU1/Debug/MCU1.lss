
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  000049a6  00004a3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800196  00800196  00004b70  2**0
                  ALLOC
  3 .stab         00005070  00000000  00000000  00004b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00005d71  00000000  00000000  00009be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000f951  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000fb11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000fd25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00012337  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00013805  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00014b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00014cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00014ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015a11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__vector_1>
       8:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__vector_2>
       c:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__vector_3>
      10:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__vector_4>
      14:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__vector_9>
      28:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <__vector_10>
      2c:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <main>
      8a:	0c 94 d1 24 	jmp	0x49a2	; 0x49a2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 61 24 	jmp	0x48c2	; 0x48c2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 61 24 	jmp	0x48c2	; 0x48c2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5d 24 	jmp	0x48ba	; 0x48ba <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 79 24 	jmp	0x48f2	; 0x48f2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 61 24 	jmp	0x48c2	; 0x48c2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 61 24 	jmp	0x48c2	; 0x48c2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 61 24 	jmp	0x48c2	; 0x48c2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5e 24 	jmp	0x48bc	; 0x48bc <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 7a 24 	jmp	0x48f4	; 0x48f4 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 65 24 	jmp	0x48ca	; 0x48ca <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 81 24 	jmp	0x4902	; 0x4902 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 5d 24 	jmp	0x48ba	; 0x48ba <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 79 24 	jmp	0x48f2	; 0x48f2 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <ADC_init>:
/*
 * Description :
 * Function responsible for initialize the ADC driver.
 */
void ADC_init(const ADC_ConfigType *Config_Ptr)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <ADC_init+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01
	/* Choosing the Reference voltage */
	ADMUX = (ADMUX & 0x3F) |(Config_Ptr->ref_volt<<6);
     ef8:	a7 e2       	ldi	r26, 0x27	; 39
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e7 e2       	ldi	r30, 0x27	; 39
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	28 2f       	mov	r18, r24
     f04:	2f 73       	andi	r18, 0x3F	; 63
     f06:	e9 81       	ldd	r30, Y+1	; 0x01
     f08:	fa 81       	ldd	r31, Y+2	; 0x02
     f0a:	80 81       	ld	r24, Z
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	00 24       	eor	r0, r0
     f12:	96 95       	lsr	r25
     f14:	87 95       	ror	r24
     f16:	07 94       	ror	r0
     f18:	96 95       	lsr	r25
     f1a:	87 95       	ror	r24
     f1c:	07 94       	ror	r0
     f1e:	98 2f       	mov	r25, r24
     f20:	80 2d       	mov	r24, r0
     f22:	82 2b       	or	r24, r18
     f24:	8c 93       	st	X, r24

	/* Activating the ADC */
	SET_BIT(ADCSRA,ADEN);
     f26:	a6 e2       	ldi	r26, 0x26	; 38
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e6 e2       	ldi	r30, 0x26	; 38
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	80 68       	ori	r24, 0x80	; 128
     f32:	8c 93       	st	X, r24

	/* Setting F_ADC = F_CPU/x */
	ADCSRA = (ADCSRA & 0xF8) | Config_Ptr->prescaler;
     f34:	a6 e2       	ldi	r26, 0x26	; 38
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e6 e2       	ldi	r30, 0x26	; 38
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	98 2f       	mov	r25, r24
     f40:	98 7f       	andi	r25, 0xF8	; 248
     f42:	e9 81       	ldd	r30, Y+1	; 0x01
     f44:	fa 81       	ldd	r31, Y+2	; 0x02
     f46:	81 81       	ldd	r24, Z+1	; 0x01
     f48:	89 2b       	or	r24, r25
     f4a:	8c 93       	st	X, r24

}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <ADC_readChannel>:
 * Description :
 * Function responsible for read analog data from a certain ADC channel
 * and convert it to digital using the ADC driver.
 */
uint16 ADC_readChannel(uint8 channel_num)
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clearing the first 5 bits */
     f62:	a7 e2       	ldi	r26, 0x27	; 39
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e7 e2       	ldi	r30, 0x27	; 39
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	80 7e       	andi	r24, 0xE0	; 224
     f6e:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choosing which channel will be used*/
     f70:	a7 e2       	ldi	r26, 0x27	; 39
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e7 e2       	ldi	r30, 0x27	; 39
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	90 81       	ld	r25, Z
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	89 2b       	or	r24, r25
     f7e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start Conversion   */
     f80:	a6 e2       	ldi	r26, 0x26	; 38
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e6 e2       	ldi	r30, 0x26	; 38
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 64       	ori	r24, 0x40	; 64
     f8c:	8c 93       	st	X, r24

	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Based ON pulling method */
     f8e:	e6 e2       	ldi	r30, 0x26	; 38
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	80 71       	andi	r24, 0x10	; 16
     f9a:	90 70       	andi	r25, 0x00	; 0
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	b9 f3       	breq	.-18     	; 0xf8e <ADC_readChannel+0x38>

	SET_BIT(ADCSRA,ADIF); /* Clearing the flag register */
     fa0:	a6 e2       	ldi	r26, 0x26	; 38
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e6 e2       	ldi	r30, 0x26	; 38
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	80 61       	ori	r24, 0x10	; 16
     fac:	8c 93       	st	X, r24

	return ADC; /* Read the digital value from the data register */
     fae:	e4 e2       	ldi	r30, 0x24	; 36
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
}
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <GPIO_setupPinDirection+0x6>
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <GPIO_setupPinDirection+0x8>
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	6a 83       	std	Y+2, r22	; 0x02
     fd0:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	84 30       	cpi	r24, 0x04	; 4
     fd6:	08 f0       	brcs	.+2      	; 0xfda <GPIO_setupPinDirection+0x1c>
     fd8:	d5 c0       	rjmp	.+426    	; 0x1184 <GPIO_setupPinDirection+0x1c6>
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	88 30       	cpi	r24, 0x08	; 8
     fde:	08 f0       	brcs	.+2      	; 0xfe2 <GPIO_setupPinDirection+0x24>
     fe0:	d1 c0       	rjmp	.+418    	; 0x1184 <GPIO_setupPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	3d 83       	std	Y+5, r19	; 0x05
     fea:	2c 83       	std	Y+4, r18	; 0x04
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	9d 81       	ldd	r25, Y+5	; 0x05
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	91 05       	cpc	r25, r1
     ff4:	09 f4       	brne	.+2      	; 0xff8 <GPIO_setupPinDirection+0x3a>
     ff6:	43 c0       	rjmp	.+134    	; 0x107e <GPIO_setupPinDirection+0xc0>
     ff8:	2c 81       	ldd	r18, Y+4	; 0x04
     ffa:	3d 81       	ldd	r19, Y+5	; 0x05
     ffc:	22 30       	cpi	r18, 0x02	; 2
     ffe:	31 05       	cpc	r19, r1
    1000:	2c f4       	brge	.+10     	; 0x100c <GPIO_setupPinDirection+0x4e>
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	9d 81       	ldd	r25, Y+5	; 0x05
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	71 f0       	breq	.+28     	; 0x1026 <GPIO_setupPinDirection+0x68>
    100a:	bc c0       	rjmp	.+376    	; 0x1184 <GPIO_setupPinDirection+0x1c6>
    100c:	2c 81       	ldd	r18, Y+4	; 0x04
    100e:	3d 81       	ldd	r19, Y+5	; 0x05
    1010:	22 30       	cpi	r18, 0x02	; 2
    1012:	31 05       	cpc	r19, r1
    1014:	09 f4       	brne	.+2      	; 0x1018 <GPIO_setupPinDirection+0x5a>
    1016:	5f c0       	rjmp	.+190    	; 0x10d6 <GPIO_setupPinDirection+0x118>
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	9d 81       	ldd	r25, Y+5	; 0x05
    101c:	83 30       	cpi	r24, 0x03	; 3
    101e:	91 05       	cpc	r25, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <GPIO_setupPinDirection+0x66>
    1022:	85 c0       	rjmp	.+266    	; 0x112e <GPIO_setupPinDirection+0x170>
    1024:	af c0       	rjmp	.+350    	; 0x1184 <GPIO_setupPinDirection+0x1c6>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(direction == PIN_INPUT)
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	88 23       	and	r24, r24
    102a:	a9 f4       	brne	.+42     	; 0x1056 <GPIO_setupPinDirection+0x98>
			{
				CLEAR_BIT(DDRA,pin_num);
    102c:	aa e3       	ldi	r26, 0x3A	; 58
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	ea e3       	ldi	r30, 0x3A	; 58
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	48 2f       	mov	r20, r24
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	02 2e       	mov	r0, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <GPIO_setupPinDirection+0x8c>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <GPIO_setupPinDirection+0x88>
    104e:	80 95       	com	r24
    1050:	84 23       	and	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	97 c0       	rjmp	.+302    	; 0x1184 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRA,pin_num);
    1056:	aa e3       	ldi	r26, 0x3A	; 58
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	ea e3       	ldi	r30, 0x3A	; 58
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	48 2f       	mov	r20, r24
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 2e       	mov	r0, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <GPIO_setupPinDirection+0xb6>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <GPIO_setupPinDirection+0xb2>
    1078:	84 2b       	or	r24, r20
    107a:	8c 93       	st	X, r24
    107c:	83 c0       	rjmp	.+262    	; 0x1184 <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(direction == PIN_INPUT)
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	88 23       	and	r24, r24
    1082:	a9 f4       	brne	.+42     	; 0x10ae <GPIO_setupPinDirection+0xf0>
			{
				CLEAR_BIT(DDRB,pin_num);
    1084:	a7 e3       	ldi	r26, 0x37	; 55
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e7 e3       	ldi	r30, 0x37	; 55
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <GPIO_setupPinDirection+0xe4>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <GPIO_setupPinDirection+0xe0>
    10a6:	80 95       	com	r24
    10a8:	84 23       	and	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	6b c0       	rjmp	.+214    	; 0x1184 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRB,pin_num);
    10ae:	a7 e3       	ldi	r26, 0x37	; 55
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e7 e3       	ldi	r30, 0x37	; 55
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <GPIO_setupPinDirection+0x10e>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <GPIO_setupPinDirection+0x10a>
    10d0:	84 2b       	or	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	57 c0       	rjmp	.+174    	; 0x1184 <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(direction == PIN_INPUT)
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	88 23       	and	r24, r24
    10da:	a9 f4       	brne	.+42     	; 0x1106 <GPIO_setupPinDirection+0x148>
			{
				CLEAR_BIT(DDRC,pin_num);
    10dc:	a4 e3       	ldi	r26, 0x34	; 52
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e4 e3       	ldi	r30, 0x34	; 52
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <GPIO_setupPinDirection+0x13c>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <GPIO_setupPinDirection+0x138>
    10fe:	80 95       	com	r24
    1100:	84 23       	and	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
    1106:	a4 e3       	ldi	r26, 0x34	; 52
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e4 e3       	ldi	r30, 0x34	; 52
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <GPIO_setupPinDirection+0x166>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <GPIO_setupPinDirection+0x162>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	2b c0       	rjmp	.+86     	; 0x1184 <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(direction == PIN_INPUT)
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	88 23       	and	r24, r24
    1132:	a9 f4       	brne	.+42     	; 0x115e <GPIO_setupPinDirection+0x1a0>
			{
				CLEAR_BIT(DDRD,pin_num);
    1134:	a1 e3       	ldi	r26, 0x31	; 49
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e1 e3       	ldi	r30, 0x31	; 49
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <GPIO_setupPinDirection+0x194>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <GPIO_setupPinDirection+0x190>
    1156:	80 95       	com	r24
    1158:	84 23       	and	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRD,pin_num);
    115e:	a1 e3       	ldi	r26, 0x31	; 49
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e1 e3       	ldi	r30, 0x31	; 49
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <GPIO_setupPinDirection+0x1be>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <GPIO_setupPinDirection+0x1ba>
    1180:	84 2b       	or	r24, r20
    1182:	8c 93       	st	X, r24
			}
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	00 d0       	rcall	.+0      	; 0x119a <GPIO_writePin+0x6>
    119a:	00 d0       	rcall	.+0      	; 0x119c <GPIO_writePin+0x8>
    119c:	0f 92       	push	r0
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	6a 83       	std	Y+2, r22	; 0x02
    11a6:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	84 30       	cpi	r24, 0x04	; 4
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <GPIO_writePin+0x1c>
    11ae:	d5 c0       	rjmp	.+426    	; 0x135a <GPIO_writePin+0x1c6>
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	88 30       	cpi	r24, 0x08	; 8
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <GPIO_writePin+0x24>
    11b6:	d1 c0       	rjmp	.+418    	; 0x135a <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	3d 83       	std	Y+5, r19	; 0x05
    11c0:	2c 83       	std	Y+4, r18	; 0x04
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	9d 81       	ldd	r25, Y+5	; 0x05
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	91 05       	cpc	r25, r1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <GPIO_writePin+0x3a>
    11cc:	43 c0       	rjmp	.+134    	; 0x1254 <GPIO_writePin+0xc0>
    11ce:	2c 81       	ldd	r18, Y+4	; 0x04
    11d0:	3d 81       	ldd	r19, Y+5	; 0x05
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	31 05       	cpc	r19, r1
    11d6:	2c f4       	brge	.+10     	; 0x11e2 <GPIO_writePin+0x4e>
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	9d 81       	ldd	r25, Y+5	; 0x05
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	71 f0       	breq	.+28     	; 0x11fc <GPIO_writePin+0x68>
    11e0:	bc c0       	rjmp	.+376    	; 0x135a <GPIO_writePin+0x1c6>
    11e2:	2c 81       	ldd	r18, Y+4	; 0x04
    11e4:	3d 81       	ldd	r19, Y+5	; 0x05
    11e6:	22 30       	cpi	r18, 0x02	; 2
    11e8:	31 05       	cpc	r19, r1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <GPIO_writePin+0x5a>
    11ec:	5f c0       	rjmp	.+190    	; 0x12ac <GPIO_writePin+0x118>
    11ee:	8c 81       	ldd	r24, Y+4	; 0x04
    11f0:	9d 81       	ldd	r25, Y+5	; 0x05
    11f2:	83 30       	cpi	r24, 0x03	; 3
    11f4:	91 05       	cpc	r25, r1
    11f6:	09 f4       	brne	.+2      	; 0x11fa <GPIO_writePin+0x66>
    11f8:	85 c0       	rjmp	.+266    	; 0x1304 <GPIO_writePin+0x170>
    11fa:	af c0       	rjmp	.+350    	; 0x135a <GPIO_writePin+0x1c6>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(value == LOGIC_LOW)
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	88 23       	and	r24, r24
    1200:	a9 f4       	brne	.+42     	; 0x122c <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA,pin_num);
    1202:	ab e3       	ldi	r26, 0x3B	; 59
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	eb e3       	ldi	r30, 0x3B	; 59
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <GPIO_writePin+0x8c>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <GPIO_writePin+0x88>
    1224:	80 95       	com	r24
    1226:	84 23       	and	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	97 c0       	rjmp	.+302    	; 0x135a <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA,pin_num);
    122c:	ab e3       	ldi	r26, 0x3B	; 59
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	eb e3       	ldi	r30, 0x3B	; 59
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <GPIO_writePin+0xb6>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <GPIO_writePin+0xb2>
    124e:	84 2b       	or	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	83 c0       	rjmp	.+262    	; 0x135a <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(value == LOGIC_LOW)
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	88 23       	and	r24, r24
    1258:	a9 f4       	brne	.+42     	; 0x1284 <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB,pin_num);
    125a:	a8 e3       	ldi	r26, 0x38	; 56
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e8 e3       	ldi	r30, 0x38	; 56
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <GPIO_writePin+0xe4>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <GPIO_writePin+0xe0>
    127c:	80 95       	com	r24
    127e:	84 23       	and	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	6b c0       	rjmp	.+214    	; 0x135a <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB,pin_num);
    1284:	a8 e3       	ldi	r26, 0x38	; 56
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e8 e3       	ldi	r30, 0x38	; 56
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	48 2f       	mov	r20, r24
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 2e       	mov	r0, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <GPIO_writePin+0x10e>
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	0a 94       	dec	r0
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <GPIO_writePin+0x10a>
    12a6:	84 2b       	or	r24, r20
    12a8:	8c 93       	st	X, r24
    12aa:	57 c0       	rjmp	.+174    	; 0x135a <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(value == LOGIC_LOW)
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	88 23       	and	r24, r24
    12b0:	a9 f4       	brne	.+42     	; 0x12dc <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC,pin_num);
    12b2:	a5 e3       	ldi	r26, 0x35	; 53
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e5 e3       	ldi	r30, 0x35	; 53
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <GPIO_writePin+0x13c>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <GPIO_writePin+0x138>
    12d4:	80 95       	com	r24
    12d6:	84 23       	and	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	3f c0       	rjmp	.+126    	; 0x135a <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC,pin_num);
    12dc:	a5 e3       	ldi	r26, 0x35	; 53
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e5 e3       	ldi	r30, 0x35	; 53
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <GPIO_writePin+0x166>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <GPIO_writePin+0x162>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	2b c0       	rjmp	.+86     	; 0x135a <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(value == LOGIC_LOW)
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	88 23       	and	r24, r24
    1308:	a9 f4       	brne	.+42     	; 0x1334 <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD,pin_num);
    130a:	a2 e3       	ldi	r26, 0x32	; 50
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e2 e3       	ldi	r30, 0x32	; 50
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <GPIO_writePin+0x194>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <GPIO_writePin+0x190>
    132c:	80 95       	com	r24
    132e:	84 23       	and	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	13 c0       	rjmp	.+38     	; 0x135a <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD,pin_num);
    1334:	a2 e3       	ldi	r26, 0x32	; 50
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e2 e3       	ldi	r30, 0x32	; 50
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <GPIO_writePin+0x1be>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <GPIO_writePin+0x1ba>
    1356:	84 2b       	or	r24, r20
    1358:	8c 93       	st	X, r24
			}
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	00 d0       	rcall	.+0      	; 0x1370 <GPIO_readPin+0x6>
    1370:	00 d0       	rcall	.+0      	; 0x1372 <GPIO_readPin+0x8>
    1372:	0f 92       	push	r0
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	8a 83       	std	Y+2, r24	; 0x02
    137a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pinValue = LOGIC_LOW;
    137c:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	84 30       	cpi	r24, 0x04	; 4
    1382:	08 f0       	brcs	.+2      	; 0x1386 <GPIO_readPin+0x1c>
    1384:	84 c0       	rjmp	.+264    	; 0x148e <GPIO_readPin+0x124>
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	88 30       	cpi	r24, 0x08	; 8
    138a:	08 f0       	brcs	.+2      	; 0x138e <GPIO_readPin+0x24>
    138c:	80 c0       	rjmp	.+256    	; 0x148e <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	3d 83       	std	Y+5, r19	; 0x05
    1396:	2c 83       	std	Y+4, r18	; 0x04
    1398:	4c 81       	ldd	r20, Y+4	; 0x04
    139a:	5d 81       	ldd	r21, Y+5	; 0x05
    139c:	41 30       	cpi	r20, 0x01	; 1
    139e:	51 05       	cpc	r21, r1
    13a0:	79 f1       	breq	.+94     	; 0x1400 <GPIO_readPin+0x96>
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	82 30       	cpi	r24, 0x02	; 2
    13a8:	91 05       	cpc	r25, r1
    13aa:	34 f4       	brge	.+12     	; 0x13b8 <GPIO_readPin+0x4e>
    13ac:	2c 81       	ldd	r18, Y+4	; 0x04
    13ae:	3d 81       	ldd	r19, Y+5	; 0x05
    13b0:	21 15       	cp	r18, r1
    13b2:	31 05       	cpc	r19, r1
    13b4:	69 f0       	breq	.+26     	; 0x13d0 <GPIO_readPin+0x66>
    13b6:	6b c0       	rjmp	.+214    	; 0x148e <GPIO_readPin+0x124>
    13b8:	4c 81       	ldd	r20, Y+4	; 0x04
    13ba:	5d 81       	ldd	r21, Y+5	; 0x05
    13bc:	42 30       	cpi	r20, 0x02	; 2
    13be:	51 05       	cpc	r21, r1
    13c0:	b9 f1       	breq	.+110    	; 0x1430 <GPIO_readPin+0xc6>
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	9d 81       	ldd	r25, Y+5	; 0x05
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	91 05       	cpc	r25, r1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <GPIO_readPin+0x64>
    13cc:	49 c0       	rjmp	.+146    	; 0x1460 <GPIO_readPin+0xf6>
    13ce:	5f c0       	rjmp	.+190    	; 0x148e <GPIO_readPin+0x124>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    13d0:	e9 e3       	ldi	r30, 0x39	; 57
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a9 01       	movw	r20, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <GPIO_readPin+0x7e>
    13e4:	55 95       	asr	r21
    13e6:	47 95       	ror	r20
    13e8:	8a 95       	dec	r24
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <GPIO_readPin+0x7a>
    13ec:	ca 01       	movw	r24, r20
    13ee:	81 70       	andi	r24, 0x01	; 1
    13f0:	90 70       	andi	r25, 0x00	; 0
    13f2:	88 23       	and	r24, r24
    13f4:	19 f0       	breq	.+6      	; 0x13fc <GPIO_readPin+0x92>
			{
				a_pinValue = LOGIC_HIGH;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	49 c0       	rjmp	.+146    	; 0x148e <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    13fc:	19 82       	std	Y+1, r1	; 0x01
    13fe:	47 c0       	rjmp	.+142    	; 0x148e <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1400:	e6 e3       	ldi	r30, 0x36	; 54
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a9 01       	movw	r20, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <GPIO_readPin+0xae>
    1414:	55 95       	asr	r21
    1416:	47 95       	ror	r20
    1418:	8a 95       	dec	r24
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <GPIO_readPin+0xaa>
    141c:	ca 01       	movw	r24, r20
    141e:	81 70       	andi	r24, 0x01	; 1
    1420:	90 70       	andi	r25, 0x00	; 0
    1422:	88 23       	and	r24, r24
    1424:	19 f0       	breq	.+6      	; 0x142c <GPIO_readPin+0xc2>
			{
				a_pinValue = LOGIC_HIGH;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	31 c0       	rjmp	.+98     	; 0x148e <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    142c:	19 82       	std	Y+1, r1	; 0x01
    142e:	2f c0       	rjmp	.+94     	; 0x148e <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1430:	e3 e3       	ldi	r30, 0x33	; 51
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	a9 01       	movw	r20, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <GPIO_readPin+0xde>
    1444:	55 95       	asr	r21
    1446:	47 95       	ror	r20
    1448:	8a 95       	dec	r24
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <GPIO_readPin+0xda>
    144c:	ca 01       	movw	r24, r20
    144e:	81 70       	andi	r24, 0x01	; 1
    1450:	90 70       	andi	r25, 0x00	; 0
    1452:	88 23       	and	r24, r24
    1454:	19 f0       	breq	.+6      	; 0x145c <GPIO_readPin+0xf2>
			{
				a_pinValue = LOGIC_HIGH;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	19 c0       	rjmp	.+50     	; 0x148e <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    145c:	19 82       	std	Y+1, r1	; 0x01
    145e:	17 c0       	rjmp	.+46     	; 0x148e <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1460:	e0 e3       	ldi	r30, 0x30	; 48
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a9 01       	movw	r20, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <GPIO_readPin+0x10e>
    1474:	55 95       	asr	r21
    1476:	47 95       	ror	r20
    1478:	8a 95       	dec	r24
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <GPIO_readPin+0x10a>
    147c:	ca 01       	movw	r24, r20
    147e:	81 70       	andi	r24, 0x01	; 1
    1480:	90 70       	andi	r25, 0x00	; 0
    1482:	88 23       	and	r24, r24
    1484:	19 f0       	breq	.+6      	; 0x148c <GPIO_readPin+0x122>
			{
				a_pinValue = LOGIC_HIGH;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	01 c0       	rjmp	.+2      	; 0x148e <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    148c:	19 82       	std	Y+1, r1	; 0x01
			break;
/*----------------------------------------------------------------------------*/
		}
	}

	return a_pinValue;
    148e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <GPIO_setupPortDirection+0x6>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <GPIO_setupPortDirection+0x8>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS) /* Corner Case : If input was wrong */
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	84 30       	cpi	r24, 0x04	; 4
    14b4:	90 f5       	brcc	.+100    	; 0x151a <GPIO_setupPortDirection+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	3c 83       	std	Y+4, r19	; 0x04
    14be:	2b 83       	std	Y+3, r18	; 0x03
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	91 05       	cpc	r25, r1
    14c8:	d1 f0       	breq	.+52     	; 0x14fe <GPIO_setupPortDirection+0x5e>
    14ca:	2b 81       	ldd	r18, Y+3	; 0x03
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	2c f4       	brge	.+10     	; 0x14de <GPIO_setupPortDirection+0x3e>
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	61 f0       	breq	.+24     	; 0x14f4 <GPIO_setupPortDirection+0x54>
    14dc:	1e c0       	rjmp	.+60     	; 0x151a <GPIO_setupPortDirection+0x7a>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	81 f0       	breq	.+32     	; 0x1508 <GPIO_setupPortDirection+0x68>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	83 30       	cpi	r24, 0x03	; 3
    14ee:	91 05       	cpc	r25, r1
    14f0:	81 f0       	breq	.+32     	; 0x1512 <GPIO_setupPortDirection+0x72>
    14f2:	13 c0       	rjmp	.+38     	; 0x151a <GPIO_setupPortDirection+0x7a>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			DDRA = direction;
    14f4:	ea e3       	ldi	r30, 0x3A	; 58
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	80 83       	st	Z, r24
    14fc:	0e c0       	rjmp	.+28     	; 0x151a <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			DDRB = direction;
    14fe:	e7 e3       	ldi	r30, 0x37	; 55
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	80 83       	st	Z, r24
    1506:	09 c0       	rjmp	.+18     	; 0x151a <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			DDRC = direction;
    1508:	e4 e3       	ldi	r30, 0x34	; 52
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	80 83       	st	Z, r24
    1510:	04 c0       	rjmp	.+8      	; 0x151a <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			DDRD = direction;
    1512:	e1 e3       	ldi	r30, 0x31	; 49
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	80 83       	st	Z, r24
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <GPIO_writePort+0x6>
    152e:	00 d0       	rcall	.+0      	; 0x1530 <GPIO_writePort+0x8>
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS) /* Corner Case : If input was wrong */
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	85 30       	cpi	r24, 0x05	; 5
    153c:	90 f5       	brcc	.+100    	; 0x15a2 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	3c 83       	std	Y+4, r19	; 0x04
    1546:	2b 83       	std	Y+3, r18	; 0x03
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	91 05       	cpc	r25, r1
    1550:	d1 f0       	breq	.+52     	; 0x1586 <GPIO_writePort+0x5e>
    1552:	2b 81       	ldd	r18, Y+3	; 0x03
    1554:	3c 81       	ldd	r19, Y+4	; 0x04
    1556:	22 30       	cpi	r18, 0x02	; 2
    1558:	31 05       	cpc	r19, r1
    155a:	2c f4       	brge	.+10     	; 0x1566 <GPIO_writePort+0x3e>
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	61 f0       	breq	.+24     	; 0x157c <GPIO_writePort+0x54>
    1564:	1e c0       	rjmp	.+60     	; 0x15a2 <GPIO_writePort+0x7a>
    1566:	2b 81       	ldd	r18, Y+3	; 0x03
    1568:	3c 81       	ldd	r19, Y+4	; 0x04
    156a:	22 30       	cpi	r18, 0x02	; 2
    156c:	31 05       	cpc	r19, r1
    156e:	81 f0       	breq	.+32     	; 0x1590 <GPIO_writePort+0x68>
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	91 05       	cpc	r25, r1
    1578:	81 f0       	breq	.+32     	; 0x159a <GPIO_writePort+0x72>
    157a:	13 c0       	rjmp	.+38     	; 0x15a2 <GPIO_writePort+0x7a>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			PORTA = value;
    157c:	eb e3       	ldi	r30, 0x3B	; 59
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	80 83       	st	Z, r24
    1584:	0e c0       	rjmp	.+28     	; 0x15a2 <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			PORTB = value;
    1586:	e8 e3       	ldi	r30, 0x38	; 56
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	80 83       	st	Z, r24
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			PORTC = value;
    1590:	e5 e3       	ldi	r30, 0x35	; 53
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	80 83       	st	Z, r24
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			PORTD = value;
    159a:	e2 e3       	ldi	r30, 0x32	; 50
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	80 83       	st	Z, r24
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <GPIO_readPort+0x6>
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <GPIO_readPort+0x8>
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_portValue = LOGIC_LOW;
    15be:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	84 30       	cpi	r24, 0x04	; 4
    15c4:	90 f5       	brcc	.+100    	; 0x162a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	3c 83       	std	Y+4, r19	; 0x04
    15ce:	2b 83       	std	Y+3, r18	; 0x03
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	91 05       	cpc	r25, r1
    15d8:	d1 f0       	breq	.+52     	; 0x160e <GPIO_readPort+0x5e>
    15da:	2b 81       	ldd	r18, Y+3	; 0x03
    15dc:	3c 81       	ldd	r19, Y+4	; 0x04
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	2c f4       	brge	.+10     	; 0x15ee <GPIO_readPort+0x3e>
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	61 f0       	breq	.+24     	; 0x1604 <GPIO_readPort+0x54>
    15ec:	1e c0       	rjmp	.+60     	; 0x162a <GPIO_readPort+0x7a>
    15ee:	2b 81       	ldd	r18, Y+3	; 0x03
    15f0:	3c 81       	ldd	r19, Y+4	; 0x04
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	81 f0       	breq	.+32     	; 0x1618 <GPIO_readPort+0x68>
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	83 30       	cpi	r24, 0x03	; 3
    15fe:	91 05       	cpc	r25, r1
    1600:	81 f0       	breq	.+32     	; 0x1622 <GPIO_readPort+0x72>
    1602:	13 c0       	rjmp	.+38     	; 0x162a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			a_portValue = PINA;
    1604:	e9 e3       	ldi	r30, 0x39	; 57
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	0e c0       	rjmp	.+28     	; 0x162a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			a_portValue = PINB;
    160e:	e6 e3       	ldi	r30, 0x36	; 54
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	09 c0       	rjmp	.+18     	; 0x162a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			a_portValue = PINC;
    1618:	e3 e3       	ldi	r30, 0x33	; 51
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	04 c0       	rjmp	.+8      	; 0x162a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			a_portValue = PIND;
    1622:	e0 e3       	ldi	r30, 0x30	; 48
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return a_portValue;
    162a:	89 81       	ldd	r24, Y+1	; 0x01
}
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <__vector_11>:

/**-------------------------Interrupts Section----------------------**/
/**                               TIMER 0                          **/
/* Interrupt for normal mode */
ISR(TIMER0_OVF_vect)
{
    163a:	1f 92       	push	r1
    163c:	0f 92       	push	r0
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	0f 92       	push	r0
    1642:	11 24       	eor	r1, r1
    1644:	2f 93       	push	r18
    1646:	3f 93       	push	r19
    1648:	4f 93       	push	r20
    164a:	5f 93       	push	r21
    164c:	6f 93       	push	r22
    164e:	7f 93       	push	r23
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	af 93       	push	r26
    1656:	bf 93       	push	r27
    1658:	ef 93       	push	r30
    165a:	ff 93       	push	r31
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrZERO != NULL_PTR)
    1664:	80 91 96 01 	lds	r24, 0x0196
    1668:	90 91 97 01 	lds	r25, 0x0197
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	29 f0       	breq	.+10     	; 0x167a <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrZERO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1670:	e0 91 96 01 	lds	r30, 0x0196
    1674:	f0 91 97 01 	lds	r31, 0x0197
    1678:	09 95       	icall
	}
}
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	ff 91       	pop	r31
    1680:	ef 91       	pop	r30
    1682:	bf 91       	pop	r27
    1684:	af 91       	pop	r26
    1686:	9f 91       	pop	r25
    1688:	8f 91       	pop	r24
    168a:	7f 91       	pop	r23
    168c:	6f 91       	pop	r22
    168e:	5f 91       	pop	r21
    1690:	4f 91       	pop	r20
    1692:	3f 91       	pop	r19
    1694:	2f 91       	pop	r18
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <__vector_10>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER0_COMP_vect)
{
    16a0:	1f 92       	push	r1
    16a2:	0f 92       	push	r0
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	0f 92       	push	r0
    16a8:	11 24       	eor	r1, r1
    16aa:	2f 93       	push	r18
    16ac:	3f 93       	push	r19
    16ae:	4f 93       	push	r20
    16b0:	5f 93       	push	r21
    16b2:	6f 93       	push	r22
    16b4:	7f 93       	push	r23
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	af 93       	push	r26
    16bc:	bf 93       	push	r27
    16be:	ef 93       	push	r30
    16c0:	ff 93       	push	r31
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrZERO != NULL_PTR)
    16ca:	80 91 96 01 	lds	r24, 0x0196
    16ce:	90 91 97 01 	lds	r25, 0x0197
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	29 f0       	breq	.+10     	; 0x16e0 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrZERO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    16d6:	e0 91 96 01 	lds	r30, 0x0196
    16da:	f0 91 97 01 	lds	r31, 0x0197
    16de:	09 95       	icall
	}
}
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <__vector_9>:
/*------------------------------------------------------------------*/
/**                               TIMER 1                          **/

/* Interrupt for normal mode */
ISR(TIMER1_OVF_vect)
{
    1706:	1f 92       	push	r1
    1708:	0f 92       	push	r0
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	0f 92       	push	r0
    170e:	11 24       	eor	r1, r1
    1710:	2f 93       	push	r18
    1712:	3f 93       	push	r19
    1714:	4f 93       	push	r20
    1716:	5f 93       	push	r21
    1718:	6f 93       	push	r22
    171a:	7f 93       	push	r23
    171c:	8f 93       	push	r24
    171e:	9f 93       	push	r25
    1720:	af 93       	push	r26
    1722:	bf 93       	push	r27
    1724:	ef 93       	push	r30
    1726:	ff 93       	push	r31
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrONE != NULL_PTR)
    1730:	80 91 98 01 	lds	r24, 0x0198
    1734:	90 91 99 01 	lds	r25, 0x0199
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	29 f0       	breq	.+10     	; 0x1746 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrONE)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    173c:	e0 91 98 01 	lds	r30, 0x0198
    1740:	f0 91 99 01 	lds	r31, 0x0199
    1744:	09 95       	icall
	}
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	ff 91       	pop	r31
    174c:	ef 91       	pop	r30
    174e:	bf 91       	pop	r27
    1750:	af 91       	pop	r26
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	7f 91       	pop	r23
    1758:	6f 91       	pop	r22
    175a:	5f 91       	pop	r21
    175c:	4f 91       	pop	r20
    175e:	3f 91       	pop	r19
    1760:	2f 91       	pop	r18
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <__vector_7>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER1_COMPA_vect)
{
    176c:	1f 92       	push	r1
    176e:	0f 92       	push	r0
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	0f 92       	push	r0
    1774:	11 24       	eor	r1, r1
    1776:	2f 93       	push	r18
    1778:	3f 93       	push	r19
    177a:	4f 93       	push	r20
    177c:	5f 93       	push	r21
    177e:	6f 93       	push	r22
    1780:	7f 93       	push	r23
    1782:	8f 93       	push	r24
    1784:	9f 93       	push	r25
    1786:	af 93       	push	r26
    1788:	bf 93       	push	r27
    178a:	ef 93       	push	r30
    178c:	ff 93       	push	r31
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrONE != NULL_PTR)
    1796:	80 91 98 01 	lds	r24, 0x0198
    179a:	90 91 99 01 	lds	r25, 0x0199
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	29 f0       	breq	.+10     	; 0x17ac <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrONE)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    17a2:	e0 91 98 01 	lds	r30, 0x0198
    17a6:	f0 91 99 01 	lds	r31, 0x0199
    17aa:	09 95       	icall
	}
}
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	ff 91       	pop	r31
    17b2:	ef 91       	pop	r30
    17b4:	bf 91       	pop	r27
    17b6:	af 91       	pop	r26
    17b8:	9f 91       	pop	r25
    17ba:	8f 91       	pop	r24
    17bc:	7f 91       	pop	r23
    17be:	6f 91       	pop	r22
    17c0:	5f 91       	pop	r21
    17c2:	4f 91       	pop	r20
    17c4:	3f 91       	pop	r19
    17c6:	2f 91       	pop	r18
    17c8:	0f 90       	pop	r0
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	0f 90       	pop	r0
    17ce:	1f 90       	pop	r1
    17d0:	18 95       	reti

000017d2 <__vector_5>:
/*-------------------------------------------------------------------*/
/**                               TIMER 2                          **/

/* Interrupt for normal mode */
ISR(TIMER2_OVF_vect)
{
    17d2:	1f 92       	push	r1
    17d4:	0f 92       	push	r0
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	0f 92       	push	r0
    17da:	11 24       	eor	r1, r1
    17dc:	2f 93       	push	r18
    17de:	3f 93       	push	r19
    17e0:	4f 93       	push	r20
    17e2:	5f 93       	push	r21
    17e4:	6f 93       	push	r22
    17e6:	7f 93       	push	r23
    17e8:	8f 93       	push	r24
    17ea:	9f 93       	push	r25
    17ec:	af 93       	push	r26
    17ee:	bf 93       	push	r27
    17f0:	ef 93       	push	r30
    17f2:	ff 93       	push	r31
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTWO != NULL_PTR)
    17fc:	80 91 9a 01 	lds	r24, 0x019A
    1800:	90 91 9b 01 	lds	r25, 0x019B
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	29 f0       	breq	.+10     	; 0x1812 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrTWO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1808:	e0 91 9a 01 	lds	r30, 0x019A
    180c:	f0 91 9b 01 	lds	r31, 0x019B
    1810:	09 95       	icall
	}
}
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	ff 91       	pop	r31
    1818:	ef 91       	pop	r30
    181a:	bf 91       	pop	r27
    181c:	af 91       	pop	r26
    181e:	9f 91       	pop	r25
    1820:	8f 91       	pop	r24
    1822:	7f 91       	pop	r23
    1824:	6f 91       	pop	r22
    1826:	5f 91       	pop	r21
    1828:	4f 91       	pop	r20
    182a:	3f 91       	pop	r19
    182c:	2f 91       	pop	r18
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	0f 90       	pop	r0
    1834:	1f 90       	pop	r1
    1836:	18 95       	reti

00001838 <__vector_4>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER2_COMP_vect)
{
    1838:	1f 92       	push	r1
    183a:	0f 92       	push	r0
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	0f 92       	push	r0
    1840:	11 24       	eor	r1, r1
    1842:	2f 93       	push	r18
    1844:	3f 93       	push	r19
    1846:	4f 93       	push	r20
    1848:	5f 93       	push	r21
    184a:	6f 93       	push	r22
    184c:	7f 93       	push	r23
    184e:	8f 93       	push	r24
    1850:	9f 93       	push	r25
    1852:	af 93       	push	r26
    1854:	bf 93       	push	r27
    1856:	ef 93       	push	r30
    1858:	ff 93       	push	r31
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTWO != NULL_PTR)
    1862:	80 91 9a 01 	lds	r24, 0x019A
    1866:	90 91 9b 01 	lds	r25, 0x019B
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	29 f0       	breq	.+10     	; 0x1878 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrTWO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    186e:	e0 91 9a 01 	lds	r30, 0x019A
    1872:	f0 91 9b 01 	lds	r31, 0x019B
    1876:	09 95       	icall
	}
}
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	ff 91       	pop	r31
    187e:	ef 91       	pop	r30
    1880:	bf 91       	pop	r27
    1882:	af 91       	pop	r26
    1884:	9f 91       	pop	r25
    1886:	8f 91       	pop	r24
    1888:	7f 91       	pop	r23
    188a:	6f 91       	pop	r22
    188c:	5f 91       	pop	r21
    188e:	4f 91       	pop	r20
    1890:	3f 91       	pop	r19
    1892:	2f 91       	pop	r18
    1894:	0f 90       	pop	r0
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	0f 90       	pop	r0
    189a:	1f 90       	pop	r1
    189c:	18 95       	reti

0000189e <Timer0_Init>:
/**------------------------Timer ZERO-----------------------**/
/*
 * Initializing Timer0
 */
void Timer0_Init(const Timer0_ConfigType *Config_Ptr)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <Timer0_Init+0x6>
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01
	/* Selecting Force Output Compare */
	TCCR0 = (TCCR0 & 0x7F) | ((Config_Ptr->Timer0_ForceCompare)<<FOC0);
    18ac:	a3 e5       	ldi	r26, 0x53	; 83
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e3 e5       	ldi	r30, 0x53	; 83
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	28 2f       	mov	r18, r24
    18b8:	2f 77       	andi	r18, 0x7F	; 127
    18ba:	e9 81       	ldd	r30, Y+1	; 0x01
    18bc:	fa 81       	ldd	r31, Y+2	; 0x02
    18be:	81 81       	ldd	r24, Z+1	; 0x01
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	96 95       	lsr	r25
    18c6:	98 2f       	mov	r25, r24
    18c8:	88 27       	eor	r24, r24
    18ca:	97 95       	ror	r25
    18cc:	87 95       	ror	r24
    18ce:	82 2b       	or	r24, r18
    18d0:	8c 93       	st	X, r24

	/* Selecting the WaveForm Generation */
	TCCR0 = (TCCR0 & 0xBF) | (((Config_Ptr->Timer0_WaveForm)<<7)>>1);
    18d2:	a3 e5       	ldi	r26, 0x53	; 83
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e3 e5       	ldi	r30, 0x53	; 83
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	28 2f       	mov	r18, r24
    18de:	2f 7b       	andi	r18, 0xBF	; 191
    18e0:	e9 81       	ldd	r30, Y+1	; 0x01
    18e2:	fa 81       	ldd	r31, Y+2	; 0x02
    18e4:	82 81       	ldd	r24, Z+2	; 0x02
    18e6:	88 2f       	mov	r24, r24
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	96 95       	lsr	r25
    18ec:	98 2f       	mov	r25, r24
    18ee:	88 27       	eor	r24, r24
    18f0:	97 95       	ror	r25
    18f2:	87 95       	ror	r24
    18f4:	95 95       	asr	r25
    18f6:	87 95       	ror	r24
    18f8:	82 2b       	or	r24, r18
    18fa:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xF7) | (((Config_Ptr->Timer0_WaveForm)>>1)<<WGM01);
    18fc:	a3 e5       	ldi	r26, 0x53	; 83
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e3 e5       	ldi	r30, 0x53	; 83
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	28 2f       	mov	r18, r24
    1908:	27 7f       	andi	r18, 0xF7	; 247
    190a:	e9 81       	ldd	r30, Y+1	; 0x01
    190c:	fa 81       	ldd	r31, Y+2	; 0x02
    190e:	82 81       	ldd	r24, Z+2	; 0x02
    1910:	86 95       	lsr	r24
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	82 2b       	or	r24, r18
    1924:	8c 93       	st	X, r24

	/* Select Compare Match output mode */
	TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->Timer0_CompareMode)<<4);
    1926:	a3 e5       	ldi	r26, 0x53	; 83
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e3 e5       	ldi	r30, 0x53	; 83
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	28 2f       	mov	r18, r24
    1932:	2f 7c       	andi	r18, 0xCF	; 207
    1934:	e9 81       	ldd	r30, Y+1	; 0x01
    1936:	fa 81       	ldd	r31, Y+2	; 0x02
    1938:	83 81       	ldd	r24, Z+3	; 0x03
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	82 95       	swap	r24
    1940:	92 95       	swap	r25
    1942:	90 7f       	andi	r25, 0xF0	; 240
    1944:	98 27       	eor	r25, r24
    1946:	80 7f       	andi	r24, 0xF0	; 240
    1948:	98 27       	eor	r25, r24
    194a:	82 2b       	or	r24, r18
    194c:	8c 93       	st	X, r24

	/* Select the Prescaler Value */
	TCCR0 = (TCCR0 & 0xF8) | ((Config_Ptr->Timer0_PreScaler));
    194e:	a3 e5       	ldi	r26, 0x53	; 83
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e3 e5       	ldi	r30, 0x53	; 83
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	98 2f       	mov	r25, r24
    195a:	98 7f       	andi	r25, 0xF8	; 248
    195c:	e9 81       	ldd	r30, Y+1	; 0x01
    195e:	fa 81       	ldd	r31, Y+2	; 0x02
    1960:	80 81       	ld	r24, Z
    1962:	89 2b       	or	r24, r25
    1964:	8c 93       	st	X, r24

	/* Choosing the OVF value */
	TCNT0 = Config_Ptr->Timer0_TCNT0_Value;
    1966:	a2 e5       	ldi	r26, 0x52	; 82
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e9 81       	ldd	r30, Y+1	; 0x01
    196c:	fa 81       	ldd	r31, Y+2	; 0x02
    196e:	86 81       	ldd	r24, Z+6	; 0x06
    1970:	8c 93       	st	X, r24

	/* Choosing OCR0 value */
	OCR0 = Config_Ptr->Timer0_OCR0_Value;
    1972:	ac e5       	ldi	r26, 0x5C	; 92
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e9 81       	ldd	r30, Y+1	; 0x01
    1978:	fa 81       	ldd	r31, Y+2	; 0x02
    197a:	87 81       	ldd	r24, Z+7	; 0x07
    197c:	8c 93       	st	X, r24

	/* Enabling Interrupt for Compare */
	TIMSK = (TIMSK & 0xFD) | ((Config_Ptr->Timer0_COMP_INT)<<OCIE0);
    197e:	a9 e5       	ldi	r26, 0x59	; 89
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e9 e5       	ldi	r30, 0x59	; 89
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	28 2f       	mov	r18, r24
    198a:	2d 7f       	andi	r18, 0xFD	; 253
    198c:	e9 81       	ldd	r30, Y+1	; 0x01
    198e:	fa 81       	ldd	r31, Y+2	; 0x02
    1990:	84 81       	ldd	r24, Z+4	; 0x04
    1992:	88 2f       	mov	r24, r24
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	82 2b       	or	r24, r18
    199c:	8c 93       	st	X, r24

	/* Enabling Interrupts for OVF */
	TIMSK = (TIMSK & 0xFE) | ((Config_Ptr->Timer0_OVF_INT));
    199e:	a9 e5       	ldi	r26, 0x59	; 89
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e9 e5       	ldi	r30, 0x59	; 89
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	98 2f       	mov	r25, r24
    19aa:	9e 7f       	andi	r25, 0xFE	; 254
    19ac:	e9 81       	ldd	r30, Y+1	; 0x01
    19ae:	fa 81       	ldd	r31, Y+2	; 0x02
    19b0:	85 81       	ldd	r24, Z+5	; 0x05
    19b2:	89 2b       	or	r24, r25
    19b4:	8c 93       	st	X, r24
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <Timer0_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer0_deInit(void)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    19c8:	e3 e5       	ldi	r30, 0x53	; 83
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	10 82       	st	Z, r1
	TIMSK = (TIMSK & 0xFC);
    19ce:	a9 e5       	ldi	r26, 0x59	; 89
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e9 e5       	ldi	r30, 0x59	; 89
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8c 7f       	andi	r24, 0xFC	; 252
    19da:	8c 93       	st	X, r24
}
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <Timer0_setCallBackZERO>:

/*-------------------------------------------------------------------*/
/* Description: Function to set the Call Back function address. */
void Timer0_setCallBackZERO(void(*a_ptr)(void))
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <Timer0_setCallBackZERO+0x6>
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	9a 83       	std	Y+2, r25	; 0x02
    19ee:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrZERO = a_ptr;
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	9a 81       	ldd	r25, Y+2	; 0x02
    19f4:	90 93 97 01 	sts	0x0197, r25
    19f8:	80 93 96 01 	sts	0x0196, r24
}
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <Timer0_PWM_Init>:

/*
 * Initializing Timer0_PWM
 */
void Timer0_PWM_Init(const Timer0_ConfigType *Config_Ptr)
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <Timer0_PWM_Init+0x6>
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	9a 83       	std	Y+2, r25	; 0x02
    1a12:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Set Timer Initial Value to 0 */
    1a14:	e2 e5       	ldi	r30, 0x52	; 82
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	10 82       	st	Z, r1

	/* Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC */
	GPIO_setupPinDirection(PWM0_PORT_ID, PWM0_PIN_ID, PIN_OUTPUT);
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	63 e0       	ldi	r22, 0x03	; 3
    1a1e:	41 e0       	ldi	r20, 0x01	; 1
    1a20:	0e 94 df 07 	call	0xfbe	; 0xfbe <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = Dependent on the user
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01);
    1a24:	e3 e5       	ldi	r30, 0x53	; 83
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	88 e6       	ldi	r24, 0x68	; 104
    1a2a:	80 83       	st	Z, r24
	TCCR0 |= Config_Ptr->Timer0_PreScaler;
    1a2c:	a3 e5       	ldi	r26, 0x53	; 83
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e3 e5       	ldi	r30, 0x53	; 83
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	90 81       	ld	r25, Z
    1a36:	e9 81       	ldd	r30, Y+1	; 0x01
    1a38:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3a:	80 81       	ld	r24, Z
    1a3c:	89 2b       	or	r24, r25
    1a3e:	8c 93       	st	X, r24
}
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <Timer0_PWM_Activate>:

/*
 * Setting Timer0_PWM
 */
void Timer0_PWM_Activate(uint8 *SetDuty_Ptr)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <Timer0_PWM_Activate+0x6>
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Set Timer Initial Value to 0 */
    1a58:	e2 e5       	ldi	r30, 0x52	; 82
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	10 82       	st	Z, r1
	OCR0  = *SetDuty_Ptr; /* Set Compare Value */
    1a5e:	ac e5       	ldi	r26, 0x5C	; 92
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e9 81       	ldd	r30, Y+1	; 0x01
    1a64:	fa 81       	ldd	r31, Y+2	; 0x02
    1a66:	80 81       	ld	r24, Z
    1a68:	8c 93       	st	X, r24
}
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <Timer1_Init>:

/*
 * Initializing TIMER0
 */
void Timer1_Init(const Timer1_ConfigType *Config_Ptr)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <Timer1_Init+0x6>
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	9a 83       	std	Y+2, r25	; 0x02
    1a80:	89 83       	std	Y+1, r24	; 0x01
	/* Compare Output Mode for channel A */
	TCCR1A = (TCCR1A & 0x3F) | (Config_Ptr->CompareModeA<<6);
    1a82:	af e4       	ldi	r26, 0x4F	; 79
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	ef e4       	ldi	r30, 0x4F	; 79
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	2f 73       	andi	r18, 0x3F	; 63
    1a90:	e9 81       	ldd	r30, Y+1	; 0x01
    1a92:	fa 81       	ldd	r31, Y+2	; 0x02
    1a94:	80 81       	ld	r24, Z
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	00 24       	eor	r0, r0
    1a9c:	96 95       	lsr	r25
    1a9e:	87 95       	ror	r24
    1aa0:	07 94       	ror	r0
    1aa2:	96 95       	lsr	r25
    1aa4:	87 95       	ror	r24
    1aa6:	07 94       	ror	r0
    1aa8:	98 2f       	mov	r25, r24
    1aaa:	80 2d       	mov	r24, r0
    1aac:	82 2b       	or	r24, r18
    1aae:	8c 93       	st	X, r24

	/* Compare Output Mode for channel B */
	TCCR1A = (TCCR1A & 0xCF) | (Config_Ptr->CompareModeB<<4);
    1ab0:	af e4       	ldi	r26, 0x4F	; 79
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	ef e4       	ldi	r30, 0x4F	; 79
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	28 2f       	mov	r18, r24
    1abc:	2f 7c       	andi	r18, 0xCF	; 207
    1abe:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac2:	81 81       	ldd	r24, Z+1	; 0x01
    1ac4:	88 2f       	mov	r24, r24
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	82 95       	swap	r24
    1aca:	92 95       	swap	r25
    1acc:	90 7f       	andi	r25, 0xF0	; 240
    1ace:	98 27       	eor	r25, r24
    1ad0:	80 7f       	andi	r24, 0xF0	; 240
    1ad2:	98 27       	eor	r25, r24
    1ad4:	82 2b       	or	r24, r18
    1ad6:	8c 93       	st	X, r24

	/* Force Output Compare for Channel A */
	TCCR1A = (TCCR1A & 0xF7) | (Config_Ptr->ForceCompareA<<3);
    1ad8:	af e4       	ldi	r26, 0x4F	; 79
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	ef e4       	ldi	r30, 0x4F	; 79
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	27 7f       	andi	r18, 0xF7	; 247
    1ae6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aea:	82 81       	ldd	r24, Z+2	; 0x02
    1aec:	88 2f       	mov	r24, r24
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	82 2b       	or	r24, r18
    1afe:	8c 93       	st	X, r24

	/* Force Output Compare for Channel B */
	TCCR1A = (TCCR1A & 0xFB) | (Config_Ptr->ForceCompareB<<2);
    1b00:	af e4       	ldi	r26, 0x4F	; 79
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	ef e4       	ldi	r30, 0x4F	; 79
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	2b 7f       	andi	r18, 0xFB	; 251
    1b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b10:	fa 81       	ldd	r31, Y+2	; 0x02
    1b12:	83 81       	ldd	r24, Z+3	; 0x03
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	82 2b       	or	r24, r18
    1b22:	8c 93       	st	X, r24

	/* Setting the waveform */
	TCCR1A = (TCCR1A & 0xFC) | ((Config_Ptr->WaveForm<<6)>>6); /* Getting the first 2 bits only */
    1b24:	af e4       	ldi	r26, 0x4F	; 79
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	ef e4       	ldi	r30, 0x4F	; 79
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	28 2f       	mov	r18, r24
    1b30:	2c 7f       	andi	r18, 0xFC	; 252
    1b32:	e9 81       	ldd	r30, Y+1	; 0x01
    1b34:	fa 81       	ldd	r31, Y+2	; 0x02
    1b36:	87 81       	ldd	r24, Z+7	; 0x07
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	00 24       	eor	r0, r0
    1b3e:	96 95       	lsr	r25
    1b40:	87 95       	ror	r24
    1b42:	07 94       	ror	r0
    1b44:	96 95       	lsr	r25
    1b46:	87 95       	ror	r24
    1b48:	07 94       	ror	r0
    1b4a:	98 2f       	mov	r25, r24
    1b4c:	80 2d       	mov	r24, r0
    1b4e:	08 2e       	mov	r0, r24
    1b50:	89 2f       	mov	r24, r25
    1b52:	00 0c       	add	r0, r0
    1b54:	88 1f       	adc	r24, r24
    1b56:	99 0b       	sbc	r25, r25
    1b58:	00 0c       	add	r0, r0
    1b5a:	88 1f       	adc	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	82 2b       	or	r24, r18
    1b60:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xE7) | ((Config_Ptr->WaveForm>>2)<<3); /* Getting bit 2 and 3 only*/
    1b62:	ae e4       	ldi	r26, 0x4E	; 78
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	ee e4       	ldi	r30, 0x4E	; 78
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	27 7e       	andi	r18, 0xE7	; 231
    1b70:	e9 81       	ldd	r30, Y+1	; 0x01
    1b72:	fa 81       	ldd	r31, Y+2	; 0x02
    1b74:	87 81       	ldd	r24, Z+7	; 0x07
    1b76:	86 95       	lsr	r24
    1b78:	86 95       	lsr	r24
    1b7a:	88 2f       	mov	r24, r24
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	82 2b       	or	r24, r18
    1b8c:	8c 93       	st	X, r24

	/* Noise Canceler */
	TCCR1B = (TCCR1B & 0x7F) | ((Config_Ptr->NoiseControl)<<7);
    1b8e:	ae e4       	ldi	r26, 0x4E	; 78
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ee e4       	ldi	r30, 0x4E	; 78
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	28 2f       	mov	r18, r24
    1b9a:	2f 77       	andi	r18, 0x7F	; 127
    1b9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba0:	85 81       	ldd	r24, Z+5	; 0x05
    1ba2:	88 2f       	mov	r24, r24
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	96 95       	lsr	r25
    1ba8:	98 2f       	mov	r25, r24
    1baa:	88 27       	eor	r24, r24
    1bac:	97 95       	ror	r25
    1bae:	87 95       	ror	r24
    1bb0:	82 2b       	or	r24, r18
    1bb2:	8c 93       	st	X, r24

	/* Edge Select */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->EdgeControl)<<ICES1);
    1bb4:	ae e4       	ldi	r26, 0x4E	; 78
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	ee e4       	ldi	r30, 0x4E	; 78
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	2f 7b       	andi	r18, 0xBF	; 191
    1bc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc6:	84 81       	ldd	r24, Z+4	; 0x04
    1bc8:	88 2f       	mov	r24, r24
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	00 24       	eor	r0, r0
    1bce:	96 95       	lsr	r25
    1bd0:	87 95       	ror	r24
    1bd2:	07 94       	ror	r0
    1bd4:	96 95       	lsr	r25
    1bd6:	87 95       	ror	r24
    1bd8:	07 94       	ror	r0
    1bda:	98 2f       	mov	r25, r24
    1bdc:	80 2d       	mov	r24, r0
    1bde:	82 2b       	or	r24, r18
    1be0:	8c 93       	st	X, r24

	/* Clock Selection */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->F_TIMER1_CLOCK);
    1be2:	ae e4       	ldi	r26, 0x4E	; 78
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	ee e4       	ldi	r30, 0x4E	; 78
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	98 2f       	mov	r25, r24
    1bee:	98 7f       	andi	r25, 0xF8	; 248
    1bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf4:	86 81       	ldd	r24, Z+6	; 0x06
    1bf6:	89 2b       	or	r24, r25
    1bf8:	8c 93       	st	X, r24

	/* Enable compare A interrupt */
	TIMSK = (TIMSK & 0xEF) | ((Config_Ptr->interruptA)<<OCIE1A);
    1bfa:	a9 e5       	ldi	r26, 0x59	; 89
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e9 e5       	ldi	r30, 0x59	; 89
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	28 2f       	mov	r18, r24
    1c06:	2f 7e       	andi	r18, 0xEF	; 239
    1c08:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0c:	80 85       	ldd	r24, Z+8	; 0x08
    1c0e:	88 2f       	mov	r24, r24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	82 95       	swap	r24
    1c14:	92 95       	swap	r25
    1c16:	90 7f       	andi	r25, 0xF0	; 240
    1c18:	98 27       	eor	r25, r24
    1c1a:	80 7f       	andi	r24, 0xF0	; 240
    1c1c:	98 27       	eor	r25, r24
    1c1e:	82 2b       	or	r24, r18
    1c20:	8c 93       	st	X, r24

	/* Enable compare B interrupt */
	TIMSK = (TIMSK & 0xF7) | ((Config_Ptr->interruptB)<<OCIE1B);
    1c22:	a9 e5       	ldi	r26, 0x59	; 89
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e9 e5       	ldi	r30, 0x59	; 89
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	27 7f       	andi	r18, 0xF7	; 247
    1c30:	e9 81       	ldd	r30, Y+1	; 0x01
    1c32:	fa 81       	ldd	r31, Y+2	; 0x02
    1c34:	81 85       	ldd	r24, Z+9	; 0x09
    1c36:	88 2f       	mov	r24, r24
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	82 2b       	or	r24, r18
    1c48:	8c 93       	st	X, r24

	/* Enable OverFlow interrupt */
	TIMSK = (TIMSK & 0xFB) | ((Config_Ptr->interruptOvf)<<TOIE1);
    1c4a:	a9 e5       	ldi	r26, 0x59	; 89
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e9 e5       	ldi	r30, 0x59	; 89
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	28 2f       	mov	r18, r24
    1c56:	2b 7f       	andi	r18, 0xFB	; 251
    1c58:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5c:	82 85       	ldd	r24, Z+10	; 0x0a
    1c5e:	88 2f       	mov	r24, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	82 2b       	or	r24, r18
    1c6c:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = Config_Ptr->TCNT1_Value;
    1c6e:	ac e4       	ldi	r26, 0x4C	; 76
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e9 81       	ldd	r30, Y+1	; 0x01
    1c74:	fa 81       	ldd	r31, Y+2	; 0x02
    1c76:	83 85       	ldd	r24, Z+11	; 0x0b
    1c78:	94 85       	ldd	r25, Z+12	; 0x0c
    1c7a:	11 96       	adiw	r26, 0x01	; 1
    1c7c:	9c 93       	st	X, r25
    1c7e:	8e 93       	st	-X, r24

	/* Initializing the compare value register */
	OCR1A = Config_Ptr->OCR1A_Value;
    1c80:	aa e4       	ldi	r26, 0x4A	; 74
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e9 81       	ldd	r30, Y+1	; 0x01
    1c86:	fa 81       	ldd	r31, Y+2	; 0x02
    1c88:	85 85       	ldd	r24, Z+13	; 0x0d
    1c8a:	96 85       	ldd	r25, Z+14	; 0x0e
    1c8c:	11 96       	adiw	r26, 0x01	; 1
    1c8e:	9c 93       	st	X, r25
    1c90:	8e 93       	st	-X, r24
	OCR1B = Config_Ptr->OCR1B_Value;
    1c92:	a8 e4       	ldi	r26, 0x48	; 72
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e9 81       	ldd	r30, Y+1	; 0x01
    1c98:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9a:	87 85       	ldd	r24, Z+15	; 0x0f
    1c9c:	90 89       	ldd	r25, Z+16	; 0x10
    1c9e:	11 96       	adiw	r26, 0x01	; 1
    1ca0:	9c 93       	st	X, r25
    1ca2:	8e 93       	st	-X, r24
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <Timer1_setCallBackONE>:
/*-------------------------------------------------------------------*/

/* Description: Function to set the Call Back function address. */
void Timer1_setCallBackONE(void(*a_ptr)(void))
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <Timer1_setCallBackONE+0x6>
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	9a 83       	std	Y+2, r25	; 0x02
    1cba:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrONE = a_ptr;
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc0:	90 93 99 01 	sts	0x0199, r25
    1cc4:	80 93 98 01 	sts	0x0198, r24
}
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <Timer1_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer1_deInit()
{
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1cda:	ef e4       	ldi	r30, 0x4F	; 79
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	10 82       	st	Z, r1
	TCCR1B = 0;
    1ce0:	ee e4       	ldi	r30, 0x4E	; 78
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	10 82       	st	Z, r1
	TIMSK = TIMSK & 0xC3;
    1ce6:	a9 e5       	ldi	r26, 0x59	; 89
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e9 e5       	ldi	r30, 0x59	; 89
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	83 7c       	andi	r24, 0xC3	; 195
    1cf2:	8c 93       	st	X, r24
}
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <Timer2_Init>:
/**------------------------Timer TWO-----------------------**/
/*
 * Initializing Timer2
 */
void Timer2_Init(const Timer2_ConfigType *Config_Ptr)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <Timer2_Init+0x6>
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	9a 83       	std	Y+2, r25	; 0x02
    1d06:	89 83       	std	Y+1, r24	; 0x01
	/* Selecting Force Output Compare */
		TCCR2 = (TCCR2 & 0x7F) | ((Config_Ptr->Timer2_ForceCompare)<<FOC2);
    1d08:	a5 e4       	ldi	r26, 0x45	; 69
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e5 e4       	ldi	r30, 0x45	; 69
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	28 2f       	mov	r18, r24
    1d14:	2f 77       	andi	r18, 0x7F	; 127
    1d16:	e9 81       	ldd	r30, Y+1	; 0x01
    1d18:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1a:	81 81       	ldd	r24, Z+1	; 0x01
    1d1c:	88 2f       	mov	r24, r24
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	96 95       	lsr	r25
    1d22:	98 2f       	mov	r25, r24
    1d24:	88 27       	eor	r24, r24
    1d26:	97 95       	ror	r25
    1d28:	87 95       	ror	r24
    1d2a:	82 2b       	or	r24, r18
    1d2c:	8c 93       	st	X, r24

		/* Selecting the WaveForm Generation */
		TCCR2 = (TCCR2 & 0xBF) | (((Config_Ptr->Timer2_WaveForm)<<7)>>1);
    1d2e:	a5 e4       	ldi	r26, 0x45	; 69
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e5 e4       	ldi	r30, 0x45	; 69
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	28 2f       	mov	r18, r24
    1d3a:	2f 7b       	andi	r18, 0xBF	; 191
    1d3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	88 2f       	mov	r24, r24
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	96 95       	lsr	r25
    1d48:	98 2f       	mov	r25, r24
    1d4a:	88 27       	eor	r24, r24
    1d4c:	97 95       	ror	r25
    1d4e:	87 95       	ror	r24
    1d50:	95 95       	asr	r25
    1d52:	87 95       	ror	r24
    1d54:	82 2b       	or	r24, r18
    1d56:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xF7) | (((Config_Ptr->Timer2_WaveForm)>>1)<<WGM21);
    1d58:	a5 e4       	ldi	r26, 0x45	; 69
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e5 e4       	ldi	r30, 0x45	; 69
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	28 2f       	mov	r18, r24
    1d64:	27 7f       	andi	r18, 0xF7	; 247
    1d66:	e9 81       	ldd	r30, Y+1	; 0x01
    1d68:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	86 95       	lsr	r24
    1d6e:	88 2f       	mov	r24, r24
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	82 2b       	or	r24, r18
    1d80:	8c 93       	st	X, r24

		/* Select Compare Match output mode */
		TCCR2 = (TCCR2 & 0xCF) | ((Config_Ptr->Timer2_CompareMode)<<4);
    1d82:	a5 e4       	ldi	r26, 0x45	; 69
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e5 e4       	ldi	r30, 0x45	; 69
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	2f 7c       	andi	r18, 0xCF	; 207
    1d90:	e9 81       	ldd	r30, Y+1	; 0x01
    1d92:	fa 81       	ldd	r31, Y+2	; 0x02
    1d94:	83 81       	ldd	r24, Z+3	; 0x03
    1d96:	88 2f       	mov	r24, r24
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	82 95       	swap	r24
    1d9c:	92 95       	swap	r25
    1d9e:	90 7f       	andi	r25, 0xF0	; 240
    1da0:	98 27       	eor	r25, r24
    1da2:	80 7f       	andi	r24, 0xF0	; 240
    1da4:	98 27       	eor	r25, r24
    1da6:	82 2b       	or	r24, r18
    1da8:	8c 93       	st	X, r24

		/* Select the Prescaler Value */
		TCCR2 = (TCCR2 & 0xF8) | ((Config_Ptr->Timer2_PreScaler));
    1daa:	a5 e4       	ldi	r26, 0x45	; 69
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e5 e4       	ldi	r30, 0x45	; 69
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	98 2f       	mov	r25, r24
    1db6:	98 7f       	andi	r25, 0xF8	; 248
    1db8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dba:	fa 81       	ldd	r31, Y+2	; 0x02
    1dbc:	80 81       	ld	r24, Z
    1dbe:	89 2b       	or	r24, r25
    1dc0:	8c 93       	st	X, r24

		/* Choosing the OVF value */
		TCNT0 = Config_Ptr->Timer2_TCNT2_Value;
    1dc2:	a2 e5       	ldi	r26, 0x52	; 82
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dca:	86 81       	ldd	r24, Z+6	; 0x06
    1dcc:	8c 93       	st	X, r24

		/* Choosing OCR2 value */
		OCR2 = Config_Ptr->Timer2_OCR2_Value;
    1dce:	a3 e4       	ldi	r26, 0x43	; 67
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd6:	87 81       	ldd	r24, Z+7	; 0x07
    1dd8:	8c 93       	st	X, r24

		/* Enabling Interrupt for Compare */
		TIMSK = (TIMSK & 0x7F) | ((Config_Ptr->Timer2_COMP_INT)<<OCIE2);
    1dda:	a9 e5       	ldi	r26, 0x59	; 89
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e9 e5       	ldi	r30, 0x59	; 89
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	28 2f       	mov	r18, r24
    1de6:	2f 77       	andi	r18, 0x7F	; 127
    1de8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dea:	fa 81       	ldd	r31, Y+2	; 0x02
    1dec:	84 81       	ldd	r24, Z+4	; 0x04
    1dee:	88 2f       	mov	r24, r24
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	96 95       	lsr	r25
    1df4:	98 2f       	mov	r25, r24
    1df6:	88 27       	eor	r24, r24
    1df8:	97 95       	ror	r25
    1dfa:	87 95       	ror	r24
    1dfc:	82 2b       	or	r24, r18
    1dfe:	8c 93       	st	X, r24

		/* Enabling Interrupts for OVF */
		TIMSK = (TIMSK & 0xBF) | ((Config_Ptr->Timer2_OVF_INT));
    1e00:	a9 e5       	ldi	r26, 0x59	; 89
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e9 e5       	ldi	r30, 0x59	; 89
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	98 2f       	mov	r25, r24
    1e0c:	9f 7b       	andi	r25, 0xBF	; 191
    1e0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e10:	fa 81       	ldd	r31, Y+2	; 0x02
    1e12:	85 81       	ldd	r24, Z+5	; 0x05
    1e14:	89 2b       	or	r24, r25
    1e16:	8c 93       	st	X, r24
}
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <Timer2_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer2_deInit(void)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0;
    1e2a:	e5 e4       	ldi	r30, 0x45	; 69
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	10 82       	st	Z, r1
	TIMSK = (TIMSK & 0x3F);
    1e30:	a9 e5       	ldi	r26, 0x59	; 89
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e9 e5       	ldi	r30, 0x59	; 89
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	8f 73       	andi	r24, 0x3F	; 63
    1e3c:	8c 93       	st	X, r24
}
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <Timer2_setCallBackTWO>:

/*-------------------------------------------------------------------*/
/* Description: Function to set the Call Back function address. */
void Timer2_setCallBackTWO(void(*a_ptr)(void))
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <Timer2_setCallBackTWO+0x6>
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	9a 83       	std	Y+2, r25	; 0x02
    1e50:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrTWO = a_ptr;
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	9a 81       	ldd	r25, Y+2	; 0x02
    1e56:	90 93 9b 01 	sts	0x019B, r25
    1e5a:	80 93 9a 01 	sts	0x019A, r24
}
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <UART_init>:
/*
 * Description:
 *
 */
void UART_init(UART_ConfigType *Config_Ptr)
{
    1e68:	ef 92       	push	r14
    1e6a:	ff 92       	push	r15
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <UART_init+0xe>
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <UART_init+0x10>
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
    1e7e:	8b 83       	std	Y+3, r24	; 0x03
	/**-------------------------Local Variables---------------------**/
	/* UBRR_VALUE will be used to set the baud rate later */
	uint16 a_ubrr_value = 0;
    1e80:	1a 82       	std	Y+2, r1	; 0x02
    1e82:	19 82       	std	Y+1, r1	; 0x01
	/**-------------------------END Local Variables-----------------**/

	/* Setting the transmission speed */
	UCSRA = (UCSRA & 0xFD) | ((Config_Ptr->transmitSpeed)<<U2X);
    1e84:	ab e2       	ldi	r26, 0x2B	; 43
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	eb e2       	ldi	r30, 0x2B	; 43
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	28 2f       	mov	r18, r24
    1e90:	2d 7f       	andi	r18, 0xFD	; 253
    1e92:	eb 81       	ldd	r30, Y+3	; 0x03
    1e94:	fc 81       	ldd	r31, Y+4	; 0x04
    1e96:	80 81       	ld	r24, Z
    1e98:	88 2f       	mov	r24, r24
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	82 2b       	or	r24, r18
    1ea2:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the INTERRUPT for RX */
	UCSRB = (UCSRB & 0x7F) | ((Config_Ptr->receiverINT)<<RXCIE);
    1ea4:	aa e2       	ldi	r26, 0x2A	; 42
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	ea e2       	ldi	r30, 0x2A	; 42
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	28 2f       	mov	r18, r24
    1eb0:	2f 77       	andi	r18, 0x7F	; 127
    1eb2:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb4:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb6:	81 81       	ldd	r24, Z+1	; 0x01
    1eb8:	88 2f       	mov	r24, r24
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	96 95       	lsr	r25
    1ebe:	98 2f       	mov	r25, r24
    1ec0:	88 27       	eor	r24, r24
    1ec2:	97 95       	ror	r25
    1ec4:	87 95       	ror	r24
    1ec6:	82 2b       	or	r24, r18
    1ec8:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the INTERRUPT for TX */
	UCSRB = (UCSRB & 0x7F) | ((Config_Ptr->transmitterINT)<<TXCIE);
    1eca:	aa e2       	ldi	r26, 0x2A	; 42
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	ea e2       	ldi	r30, 0x2A	; 42
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	2f 77       	andi	r18, 0x7F	; 127
    1ed8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eda:	fc 81       	ldd	r31, Y+4	; 0x04
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	88 2f       	mov	r24, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	00 24       	eor	r0, r0
    1ee4:	96 95       	lsr	r25
    1ee6:	87 95       	ror	r24
    1ee8:	07 94       	ror	r0
    1eea:	96 95       	lsr	r25
    1eec:	87 95       	ror	r24
    1eee:	07 94       	ror	r0
    1ef0:	98 2f       	mov	r25, r24
    1ef2:	80 2d       	mov	r24, r0
    1ef4:	82 2b       	or	r24, r18
    1ef6:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the data register empty INTERRUPT */
	UCSRB = (UCSRB & 0xDF) | ((Config_Ptr->emptyINT)<<UDRIE);
    1ef8:	aa e2       	ldi	r26, 0x2A	; 42
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	ea e2       	ldi	r30, 0x2A	; 42
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	28 2f       	mov	r18, r24
    1f04:	2f 7d       	andi	r18, 0xDF	; 223
    1f06:	eb 81       	ldd	r30, Y+3	; 0x03
    1f08:	fc 81       	ldd	r31, Y+4	; 0x04
    1f0a:	83 81       	ldd	r24, Z+3	; 0x03
    1f0c:	88 2f       	mov	r24, r24
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	82 95       	swap	r24
    1f16:	92 95       	swap	r25
    1f18:	90 7f       	andi	r25, 0xF0	; 240
    1f1a:	98 27       	eor	r25, r24
    1f1c:	80 7f       	andi	r24, 0xF0	; 240
    1f1e:	98 27       	eor	r25, r24
    1f20:	82 2b       	or	r24, r18
    1f22:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Receiver Enable */
	UCSRB = (UCSRB & 0xEF) | ((Config_Ptr->receiverEN)<<RXEN);
    1f24:	aa e2       	ldi	r26, 0x2A	; 42
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	ea e2       	ldi	r30, 0x2A	; 42
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	28 2f       	mov	r18, r24
    1f30:	2f 7e       	andi	r18, 0xEF	; 239
    1f32:	eb 81       	ldd	r30, Y+3	; 0x03
    1f34:	fc 81       	ldd	r31, Y+4	; 0x04
    1f36:	84 81       	ldd	r24, Z+4	; 0x04
    1f38:	88 2f       	mov	r24, r24
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	82 95       	swap	r24
    1f3e:	92 95       	swap	r25
    1f40:	90 7f       	andi	r25, 0xF0	; 240
    1f42:	98 27       	eor	r25, r24
    1f44:	80 7f       	andi	r24, 0xF0	; 240
    1f46:	98 27       	eor	r25, r24
    1f48:	82 2b       	or	r24, r18
    1f4a:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Transmitter Enable */
	UCSRB = (UCSRB & 0xF7) | ((Config_Ptr->transmitterEN)<<TXEN);
    1f4c:	aa e2       	ldi	r26, 0x2A	; 42
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	ea e2       	ldi	r30, 0x2A	; 42
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	28 2f       	mov	r18, r24
    1f58:	27 7f       	andi	r18, 0xF7	; 247
    1f5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f5e:	85 81       	ldd	r24, Z+5	; 0x05
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	82 2b       	or	r24, r18
    1f72:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the character size on two separate register  */
	/* Adding only the third-bit to UCSRB and the 2 least bits to UCSRC */
	UCSRB = (UCSRB & 0xFB) | (((Config_Ptr->charSize)>>2)<<UCSZ2);
    1f74:	aa e2       	ldi	r26, 0x2A	; 42
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	ea e2       	ldi	r30, 0x2A	; 42
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	28 2f       	mov	r18, r24
    1f80:	2b 7f       	andi	r18, 0xFB	; 251
    1f82:	eb 81       	ldd	r30, Y+3	; 0x03
    1f84:	fc 81       	ldd	r31, Y+4	; 0x04
    1f86:	86 81       	ldd	r24, Z+6	; 0x06
    1f88:	86 95       	lsr	r24
    1f8a:	86 95       	lsr	r24
    1f8c:	88 2f       	mov	r24, r24
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	82 2b       	or	r24, r18
    1f9a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr->charSize)<<6)>>5);
    1f9c:	a0 e4       	ldi	r26, 0x40	; 64
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e0 e4       	ldi	r30, 0x40	; 64
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	29 7f       	andi	r18, 0xF9	; 249
    1faa:	eb 81       	ldd	r30, Y+3	; 0x03
    1fac:	fc 81       	ldd	r31, Y+4	; 0x04
    1fae:	86 81       	ldd	r24, Z+6	; 0x06
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	00 24       	eor	r0, r0
    1fb6:	96 95       	lsr	r25
    1fb8:	87 95       	ror	r24
    1fba:	07 94       	ror	r0
    1fbc:	96 95       	lsr	r25
    1fbe:	87 95       	ror	r24
    1fc0:	07 94       	ror	r0
    1fc2:	98 2f       	mov	r25, r24
    1fc4:	80 2d       	mov	r24, r0
    1fc6:	95 95       	asr	r25
    1fc8:	87 95       	ror	r24
    1fca:	95 95       	asr	r25
    1fcc:	87 95       	ror	r24
    1fce:	95 95       	asr	r25
    1fd0:	87 95       	ror	r24
    1fd2:	95 95       	asr	r25
    1fd4:	87 95       	ror	r24
    1fd6:	95 95       	asr	r25
    1fd8:	87 95       	ror	r24
    1fda:	82 2b       	or	r24, r18
    1fdc:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* USART Reg Select between UCSRC & UBRRH */
	UCSRC = (UCSRC & 0x7F) | ((Config_Ptr->regSelect)<<URSEL);
    1fde:	a0 e4       	ldi	r26, 0x40	; 64
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e0 e4       	ldi	r30, 0x40	; 64
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	28 2f       	mov	r18, r24
    1fea:	2f 77       	andi	r18, 0x7F	; 127
    1fec:	eb 81       	ldd	r30, Y+3	; 0x03
    1fee:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff0:	87 81       	ldd	r24, Z+7	; 0x07
    1ff2:	88 2f       	mov	r24, r24
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	96 95       	lsr	r25
    1ff8:	98 2f       	mov	r25, r24
    1ffa:	88 27       	eor	r24, r24
    1ffc:	97 95       	ror	r25
    1ffe:	87 95       	ror	r24
    2000:	82 2b       	or	r24, r18
    2002:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* USART Mode Select: 1- A-Synch , 2- Synch */
	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr->modeSelect)<<UMSEL);
    2004:	a0 e4       	ldi	r26, 0x40	; 64
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e0 e4       	ldi	r30, 0x40	; 64
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	28 2f       	mov	r18, r24
    2010:	2f 7b       	andi	r18, 0xBF	; 191
    2012:	eb 81       	ldd	r30, Y+3	; 0x03
    2014:	fc 81       	ldd	r31, Y+4	; 0x04
    2016:	80 85       	ldd	r24, Z+8	; 0x08
    2018:	88 2f       	mov	r24, r24
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	00 24       	eor	r0, r0
    201e:	96 95       	lsr	r25
    2020:	87 95       	ror	r24
    2022:	07 94       	ror	r0
    2024:	96 95       	lsr	r25
    2026:	87 95       	ror	r24
    2028:	07 94       	ror	r0
    202a:	98 2f       	mov	r25, r24
    202c:	80 2d       	mov	r24, r0
    202e:	82 2b       	or	r24, r18
    2030:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the parity mode : Disabled/Even/ODD */
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->paritySelect)<<4);
    2032:	a0 e4       	ldi	r26, 0x40	; 64
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e0 e4       	ldi	r30, 0x40	; 64
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	28 2f       	mov	r18, r24
    203e:	2f 7c       	andi	r18, 0xCF	; 207
    2040:	eb 81       	ldd	r30, Y+3	; 0x03
    2042:	fc 81       	ldd	r31, Y+4	; 0x04
    2044:	81 85       	ldd	r24, Z+9	; 0x09
    2046:	88 2f       	mov	r24, r24
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	82 95       	swap	r24
    204c:	92 95       	swap	r25
    204e:	90 7f       	andi	r25, 0xF0	; 240
    2050:	98 27       	eor	r25, r24
    2052:	80 7f       	andi	r24, 0xF0	; 240
    2054:	98 27       	eor	r25, r24
    2056:	82 2b       	or	r24, r18
    2058:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the stop bit mode: 1-bit and 2-bit */
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stopBitSelect)<<USBS);
    205a:	a0 e4       	ldi	r26, 0x40	; 64
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e0 e4       	ldi	r30, 0x40	; 64
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	28 2f       	mov	r18, r24
    2066:	27 7f       	andi	r18, 0xF7	; 247
    2068:	eb 81       	ldd	r30, Y+3	; 0x03
    206a:	fc 81       	ldd	r31, Y+4	; 0x04
    206c:	82 85       	ldd	r24, Z+10	; 0x0a
    206e:	88 2f       	mov	r24, r24
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	82 2b       	or	r24, r18
    2080:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the clock Polarity: Rising and Falling */
	UCSRC = (UCSRC & 0xFE) | (Config_Ptr->clockPolatiry);
    2082:	a0 e4       	ldi	r26, 0x40	; 64
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e0 e4       	ldi	r30, 0x40	; 64
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	98 2f       	mov	r25, r24
    208e:	9e 7f       	andi	r25, 0xFE	; 254
    2090:	eb 81       	ldd	r30, Y+3	; 0x03
    2092:	fc 81       	ldd	r31, Y+4	; 0x04
    2094:	83 85       	ldd	r24, Z+11	; 0x0b
    2096:	89 2b       	or	r24, r25
    2098:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the baud rate */
	/* At first you should calculate the UBRR value */
	a_ubrr_value = (uint16)((F_CPU*(Config_Ptr->transmitSpeed+1)/((Config_Ptr->baud_rate)*(16)))-1);
    209a:	eb 81       	ldd	r30, Y+3	; 0x03
    209c:	fc 81       	ldd	r31, Y+4	; 0x04
    209e:	80 81       	ld	r24, Z
    20a0:	88 2f       	mov	r24, r24
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	01 96       	adiw	r24, 0x01	; 1
    20a6:	aa 27       	eor	r26, r26
    20a8:	97 fd       	sbrc	r25, 7
    20aa:	a0 95       	com	r26
    20ac:	ba 2f       	mov	r27, r26
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	32 e1       	ldi	r19, 0x12	; 18
    20b2:	4a e7       	ldi	r20, 0x7A	; 122
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	bc 01       	movw	r22, r24
    20b8:	cd 01       	movw	r24, r26
    20ba:	0e 94 14 24 	call	0x4828	; 0x4828 <__mulsi3>
    20be:	7b 01       	movw	r14, r22
    20c0:	8c 01       	movw	r16, r24
    20c2:	eb 81       	ldd	r30, Y+3	; 0x03
    20c4:	fc 81       	ldd	r31, Y+4	; 0x04
    20c6:	84 85       	ldd	r24, Z+12	; 0x0c
    20c8:	95 85       	ldd	r25, Z+13	; 0x0d
    20ca:	a6 85       	ldd	r26, Z+14	; 0x0e
    20cc:	b7 85       	ldd	r27, Z+15	; 0x0f
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	aa 1f       	adc	r26, r26
    20d4:	bb 1f       	adc	r27, r27
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	aa 1f       	adc	r26, r26
    20dc:	bb 1f       	adc	r27, r27
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	aa 1f       	adc	r26, r26
    20e4:	bb 1f       	adc	r27, r27
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	aa 1f       	adc	r26, r26
    20ec:	bb 1f       	adc	r27, r27
    20ee:	9c 01       	movw	r18, r24
    20f0:	ad 01       	movw	r20, r26
    20f2:	c8 01       	movw	r24, r16
    20f4:	b7 01       	movw	r22, r14
    20f6:	0e 94 33 24 	call	0x4866	; 0x4866 <__udivmodsi4>
    20fa:	da 01       	movw	r26, r20
    20fc:	c9 01       	movw	r24, r18
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = a_ubrr_value>>8;
    2104:	e0 e4       	ldi	r30, 0x40	; 64
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	89 2f       	mov	r24, r25
    210e:	99 27       	eor	r25, r25
    2110:	80 83       	st	Z, r24
	UBRRL = a_ubrr_value;
    2112:	e9 e2       	ldi	r30, 0x29	; 41
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	80 83       	st	Z, r24

	/*----------------------------END--------------------------------*/
}
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	1f 91       	pop	r17
    2128:	0f 91       	pop	r16
    212a:	ff 90       	pop	r15
    212c:	ef 90       	pop	r14
    212e:	08 95       	ret

00002130 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	0f 92       	push	r0
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	89 83       	std	Y+1, r24	; 0x01
	/* Need to wait till the buffer is ready to get a new data */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    213c:	eb e2       	ldi	r30, 0x2B	; 43
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	88 2f       	mov	r24, r24
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	80 72       	andi	r24, 0x20	; 32
    2148:	90 70       	andi	r25, 0x00	; 0
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	b9 f3       	breq	.-18     	; 0x213c <UART_sendByte+0xc>

	/* When it's ready then send it  */
	UDR = data;
    214e:	ec e2       	ldi	r30, 0x2C	; 44
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	80 83       	st	Z, r24
}
    2156:	0f 90       	pop	r0
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	08 95       	ret

0000215e <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
	/* Waiting till we get a new data */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2166:	eb e2       	ldi	r30, 0x2B	; 43
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	88 23       	and	r24, r24
    216e:	dc f7       	brge	.-10     	; 0x2166 <UART_receiveByte+0x8>

	/* Return it after getting it */
	return UDR;
    2170:	ec e2       	ldi	r30, 0x2C	; 44
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
}
    2176:	cf 91       	pop	r28
    2178:	df 91       	pop	r29
    217a:	08 95       	ret

0000217c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	00 d0       	rcall	.+0      	; 0x2182 <UART_sendString+0x6>
    2182:	0f 92       	push	r0
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	9b 83       	std	Y+3, r25	; 0x03
    218a:	8a 83       	std	Y+2, r24	; 0x02
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;
    218c:	19 82       	std	Y+1, r1	; 0x01
    218e:	0e c0       	rjmp	.+28     	; 0x21ac <UART_sendString+0x30>

	/* Sending byte by byte using UART_sendByte functio */
	while(Str[a_stringCounter] != '\0')
	{
		UART_sendByte(Str[a_stringCounter]);
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	28 2f       	mov	r18, r24
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	9b 81       	ldd	r25, Y+3	; 0x03
    219a:	fc 01       	movw	r30, r24
    219c:	e2 0f       	add	r30, r18
    219e:	f3 1f       	adc	r31, r19
    21a0:	80 81       	ld	r24, Z
    21a2:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_sendByte>
		a_stringCounter++;
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	8f 5f       	subi	r24, 0xFF	; 255
    21aa:	89 83       	std	Y+1, r24	; 0x01
{
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;

	/* Sending byte by byte using UART_sendByte functio */
	while(Str[a_stringCounter] != '\0')
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	9b 81       	ldd	r25, Y+3	; 0x03
    21b6:	fc 01       	movw	r30, r24
    21b8:	e2 0f       	add	r30, r18
    21ba:	f3 1f       	adc	r31, r19
    21bc:	80 81       	ld	r24, Z
    21be:	88 23       	and	r24, r24
    21c0:	39 f7       	brne	.-50     	; 0x2190 <UART_sendString+0x14>
	{
		UART_sendByte(Str[a_stringCounter]);
		a_stringCounter++;
	}
}
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <UART_receiveString+0xa>
    21d8:	0f 92       	push	r0
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	9b 83       	std	Y+3, r25	; 0x03
    21e0:	8a 83       	std	Y+2, r24	; 0x02
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;
    21e2:	19 82       	std	Y+1, r1	; 0x01

	Str[a_stringCounter] = UART_receiveByte();
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	9b 81       	ldd	r25, Y+3	; 0x03
    21ee:	8c 01       	movw	r16, r24
    21f0:	02 0f       	add	r16, r18
    21f2:	13 1f       	adc	r17, r19
    21f4:	0e 94 af 10 	call	0x215e	; 0x215e <UART_receiveByte>
    21f8:	f8 01       	movw	r30, r16
    21fa:	80 83       	st	Z, r24
    21fc:	0f c0       	rjmp	.+30     	; 0x221c <UART_receiveString+0x4e>

	/* We will start check for a specific character which means to us a null char*/
	while(Str[a_stringCounter] != '=')
	{
		a_stringCounter++;
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	8f 5f       	subi	r24, 0xFF	; 255
    2202:	89 83       	std	Y+1, r24	; 0x01
		Str[a_stringCounter] = UART_receiveByte();
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	9b 81       	ldd	r25, Y+3	; 0x03
    220e:	8c 01       	movw	r16, r24
    2210:	02 0f       	add	r16, r18
    2212:	13 1f       	adc	r17, r19
    2214:	0e 94 af 10 	call	0x215e	; 0x215e <UART_receiveByte>
    2218:	f8 01       	movw	r30, r16
    221a:	80 83       	st	Z, r24
	uint8 a_stringCounter = 0;

	Str[a_stringCounter] = UART_receiveByte();

	/* We will start check for a specific character which means to us a null char*/
	while(Str[a_stringCounter] != '=')
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	9b 81       	ldd	r25, Y+3	; 0x03
    2226:	fc 01       	movw	r30, r24
    2228:	e2 0f       	add	r30, r18
    222a:	f3 1f       	adc	r31, r19
    222c:	80 81       	ld	r24, Z
    222e:	8d 33       	cpi	r24, 0x3D	; 61
    2230:	31 f7       	brne	.-52     	; 0x21fe <UART_receiveString+0x30>
		a_stringCounter++;
		Str[a_stringCounter] = UART_receiveByte();
	}

	/* Then redefining the string by replacing the stop char with NULL char */
	Str[a_stringCounter] = '\0';
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	9b 81       	ldd	r25, Y+3	; 0x03
    223c:	fc 01       	movw	r30, r24
    223e:	e2 0f       	add	r30, r18
    2240:	f3 1f       	adc	r31, r19
    2242:	10 82       	st	Z, r1
}
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	08 95       	ret

00002254 <__vector_1>:
static volatile void (*g_callBackPtr2)(void) = NULL_PTR;

/**-------------------------Interrupts Section----------------------**/

ISR(INT0_vect)
{
    2254:	1f 92       	push	r1
    2256:	0f 92       	push	r0
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	0f 92       	push	r0
    225c:	11 24       	eor	r1, r1
    225e:	2f 93       	push	r18
    2260:	3f 93       	push	r19
    2262:	4f 93       	push	r20
    2264:	5f 93       	push	r21
    2266:	6f 93       	push	r22
    2268:	7f 93       	push	r23
    226a:	8f 93       	push	r24
    226c:	9f 93       	push	r25
    226e:	af 93       	push	r26
    2270:	bf 93       	push	r27
    2272:	ef 93       	push	r30
    2274:	ff 93       	push	r31
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    227e:	80 91 9c 01 	lds	r24, 0x019C
    2282:	90 91 9d 01 	lds	r25, 0x019D
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	29 f0       	breq	.+10     	; 0x2294 <__vector_1+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    228a:	e0 91 9c 01 	lds	r30, 0x019C
    228e:	f0 91 9d 01 	lds	r31, 0x019D
    2292:	09 95       	icall
	}
}
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	ff 91       	pop	r31
    229a:	ef 91       	pop	r30
    229c:	bf 91       	pop	r27
    229e:	af 91       	pop	r26
    22a0:	9f 91       	pop	r25
    22a2:	8f 91       	pop	r24
    22a4:	7f 91       	pop	r23
    22a6:	6f 91       	pop	r22
    22a8:	5f 91       	pop	r21
    22aa:	4f 91       	pop	r20
    22ac:	3f 91       	pop	r19
    22ae:	2f 91       	pop	r18
    22b0:	0f 90       	pop	r0
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	0f 90       	pop	r0
    22b6:	1f 90       	pop	r1
    22b8:	18 95       	reti

000022ba <__vector_2>:
/*-------------------------------------------------------------------*/

ISR(INT1_vect)
{
    22ba:	1f 92       	push	r1
    22bc:	0f 92       	push	r0
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	0f 92       	push	r0
    22c2:	11 24       	eor	r1, r1
    22c4:	2f 93       	push	r18
    22c6:	3f 93       	push	r19
    22c8:	4f 93       	push	r20
    22ca:	5f 93       	push	r21
    22cc:	6f 93       	push	r22
    22ce:	7f 93       	push	r23
    22d0:	8f 93       	push	r24
    22d2:	9f 93       	push	r25
    22d4:	af 93       	push	r26
    22d6:	bf 93       	push	r27
    22d8:	ef 93       	push	r30
    22da:	ff 93       	push	r31
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    22e4:	80 91 9e 01 	lds	r24, 0x019E
    22e8:	90 91 9f 01 	lds	r25, 0x019F
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	29 f0       	breq	.+10     	; 0x22fa <__vector_2+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    22f0:	e0 91 9e 01 	lds	r30, 0x019E
    22f4:	f0 91 9f 01 	lds	r31, 0x019F
    22f8:	09 95       	icall
	}
}
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	ff 91       	pop	r31
    2300:	ef 91       	pop	r30
    2302:	bf 91       	pop	r27
    2304:	af 91       	pop	r26
    2306:	9f 91       	pop	r25
    2308:	8f 91       	pop	r24
    230a:	7f 91       	pop	r23
    230c:	6f 91       	pop	r22
    230e:	5f 91       	pop	r21
    2310:	4f 91       	pop	r20
    2312:	3f 91       	pop	r19
    2314:	2f 91       	pop	r18
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	0f 90       	pop	r0
    231c:	1f 90       	pop	r1
    231e:	18 95       	reti

00002320 <__vector_3>:
/*-------------------------------------------------------------------*/

ISR(INT2_vect)
{
    2320:	1f 92       	push	r1
    2322:	0f 92       	push	r0
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	0f 92       	push	r0
    2328:	11 24       	eor	r1, r1
    232a:	2f 93       	push	r18
    232c:	3f 93       	push	r19
    232e:	4f 93       	push	r20
    2330:	5f 93       	push	r21
    2332:	6f 93       	push	r22
    2334:	7f 93       	push	r23
    2336:	8f 93       	push	r24
    2338:	9f 93       	push	r25
    233a:	af 93       	push	r26
    233c:	bf 93       	push	r27
    233e:	ef 93       	push	r30
    2340:	ff 93       	push	r31
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    234a:	80 91 a0 01 	lds	r24, 0x01A0
    234e:	90 91 a1 01 	lds	r25, 0x01A1
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	29 f0       	breq	.+10     	; 0x2360 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2356:	e0 91 a0 01 	lds	r30, 0x01A0
    235a:	f0 91 a1 01 	lds	r31, 0x01A1
    235e:	09 95       	icall
	}
}
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	ff 91       	pop	r31
    2366:	ef 91       	pop	r30
    2368:	bf 91       	pop	r27
    236a:	af 91       	pop	r26
    236c:	9f 91       	pop	r25
    236e:	8f 91       	pop	r24
    2370:	7f 91       	pop	r23
    2372:	6f 91       	pop	r22
    2374:	5f 91       	pop	r21
    2376:	4f 91       	pop	r20
    2378:	3f 91       	pop	r19
    237a:	2f 91       	pop	r18
    237c:	0f 90       	pop	r0
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	0f 90       	pop	r0
    2382:	1f 90       	pop	r1
    2384:	18 95       	reti

00002386 <INT0_Init>:

/**-------------------------Function Definition Section-------------**/

/* Initializing interrupt zero */
void INT0_Init(INT_ConfigType *Config_Ptr)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	00 d0       	rcall	.+0      	; 0x238c <INT0_Init+0x6>
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	9a 83       	std	Y+2, r25	; 0x02
    2392:	89 83       	std	Y+1, r24	; 0x01
	/* Initializing the pin direction as input pin */
	GPIO_setupPinDirection(INT0_PORT_ID, INT0_PIN_ID, PIN_INPUT);
    2394:	83 e0       	ldi	r24, 0x03	; 3
    2396:	62 e0       	ldi	r22, 0x02	; 2
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	0e 94 df 07 	call	0xfbe	; 0xfbe <GPIO_setupPinDirection>

	/* Interrupt Sense Control */
	MCUCR = (MCUCR & 0xFC) | ((Config_Ptr->controlZero));
    239e:	a5 e5       	ldi	r26, 0x55	; 85
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e5 e5       	ldi	r30, 0x55	; 85
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	98 2f       	mov	r25, r24
    23aa:	9c 7f       	andi	r25, 0xFC	; 252
    23ac:	e9 81       	ldd	r30, Y+1	; 0x01
    23ae:	fa 81       	ldd	r31, Y+2	; 0x02
    23b0:	83 81       	ldd	r24, Z+3	; 0x03
    23b2:	89 2b       	or	r24, r25
    23b4:	8c 93       	st	X, r24

	/* Enable the interrupt */
	GICR = (GICR & 0xBF) | ((Config_Ptr->interruptZeroEN)<<INT0);
    23b6:	ab e5       	ldi	r26, 0x5B	; 91
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	eb e5       	ldi	r30, 0x5B	; 91
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	28 2f       	mov	r18, r24
    23c2:	2f 7b       	andi	r18, 0xBF	; 191
    23c4:	e9 81       	ldd	r30, Y+1	; 0x01
    23c6:	fa 81       	ldd	r31, Y+2	; 0x02
    23c8:	80 81       	ld	r24, Z
    23ca:	88 2f       	mov	r24, r24
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	00 24       	eor	r0, r0
    23d0:	96 95       	lsr	r25
    23d2:	87 95       	ror	r24
    23d4:	07 94       	ror	r0
    23d6:	96 95       	lsr	r25
    23d8:	87 95       	ror	r24
    23da:	07 94       	ror	r0
    23dc:	98 2f       	mov	r25, r24
    23de:	80 2d       	mov	r24, r0
    23e0:	82 2b       	or	r24, r18
    23e2:	8c 93       	st	X, r24
}
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <INT1_Init>:
/*-------------------------------------------------------------------*/

/* Initializing interrupt one */
void INT1_Init(INT_ConfigType *Config_Ptr)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <INT1_Init+0x6>
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	89 83       	std	Y+1, r24	; 0x01
	/* Initializing the pin direction as input pin */
	GPIO_setupPinDirection(INT1_PORT_ID, INT1_PIN_ID, PIN_INPUT);
    23fc:	83 e0       	ldi	r24, 0x03	; 3
    23fe:	63 e0       	ldi	r22, 0x03	; 3
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	0e 94 df 07 	call	0xfbe	; 0xfbe <GPIO_setupPinDirection>

	/* Interrupt Sense Control */
	MCUCR = (MCUCR & 0xF3) | ((Config_Ptr->controlOne)<<2);
    2406:	a5 e5       	ldi	r26, 0x55	; 85
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e5 e5       	ldi	r30, 0x55	; 85
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	28 2f       	mov	r18, r24
    2412:	23 7f       	andi	r18, 0xF3	; 243
    2414:	e9 81       	ldd	r30, Y+1	; 0x01
    2416:	fa 81       	ldd	r31, Y+2	; 0x02
    2418:	84 81       	ldd	r24, Z+4	; 0x04
    241a:	88 2f       	mov	r24, r24
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	88 0f       	add	r24, r24
    2424:	99 1f       	adc	r25, r25
    2426:	82 2b       	or	r24, r18
    2428:	8c 93       	st	X, r24

	/* Enable the interrupt */
	GICR = (GICR & 0x7F) | ((Config_Ptr->interruptOneEN)<<INT1);
    242a:	ab e5       	ldi	r26, 0x5B	; 91
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	eb e5       	ldi	r30, 0x5B	; 91
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	28 2f       	mov	r18, r24
    2436:	2f 77       	andi	r18, 0x7F	; 127
    2438:	e9 81       	ldd	r30, Y+1	; 0x01
    243a:	fa 81       	ldd	r31, Y+2	; 0x02
    243c:	81 81       	ldd	r24, Z+1	; 0x01
    243e:	88 2f       	mov	r24, r24
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	96 95       	lsr	r25
    2444:	98 2f       	mov	r25, r24
    2446:	88 27       	eor	r24, r24
    2448:	97 95       	ror	r25
    244a:	87 95       	ror	r24
    244c:	82 2b       	or	r24, r18
    244e:	8c 93       	st	X, r24
}
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	08 95       	ret

0000245a <INT2_Init>:
/*-------------------------------------------------------------------*/

/* Initializing interrupt two */
void INT2_Init(INT_ConfigType *Config_Ptr)
{
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	00 d0       	rcall	.+0      	; 0x2460 <INT2_Init+0x6>
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01
	/* Initializing the pin direction as input pin */
	GPIO_setupPinDirection(INT2_PORT_ID, INT2_PIN_ID, PIN_INPUT);
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	62 e0       	ldi	r22, 0x02	; 2
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	0e 94 df 07 	call	0xfbe	; 0xfbe <GPIO_setupPinDirection>

	/* Interrupt Sense Control */
	MCUCSR = (MCUCSR & 0xBF) | ((Config_Ptr->controlTwo)<<ISC2);
    2472:	a4 e5       	ldi	r26, 0x54	; 84
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	e4 e5       	ldi	r30, 0x54	; 84
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	28 2f       	mov	r18, r24
    247e:	2f 7b       	andi	r18, 0xBF	; 191
    2480:	e9 81       	ldd	r30, Y+1	; 0x01
    2482:	fa 81       	ldd	r31, Y+2	; 0x02
    2484:	85 81       	ldd	r24, Z+5	; 0x05
    2486:	88 2f       	mov	r24, r24
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	00 24       	eor	r0, r0
    248c:	96 95       	lsr	r25
    248e:	87 95       	ror	r24
    2490:	07 94       	ror	r0
    2492:	96 95       	lsr	r25
    2494:	87 95       	ror	r24
    2496:	07 94       	ror	r0
    2498:	98 2f       	mov	r25, r24
    249a:	80 2d       	mov	r24, r0
    249c:	82 2b       	or	r24, r18
    249e:	8c 93       	st	X, r24

	/* Enable the interrupt */
	GICR = (GICR & 0xDF) | ((Config_Ptr->interruptTwoEN)<<INT2);
    24a0:	ab e5       	ldi	r26, 0x5B	; 91
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	eb e5       	ldi	r30, 0x5B	; 91
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	28 2f       	mov	r18, r24
    24ac:	2f 7d       	andi	r18, 0xDF	; 223
    24ae:	e9 81       	ldd	r30, Y+1	; 0x01
    24b0:	fa 81       	ldd	r31, Y+2	; 0x02
    24b2:	82 81       	ldd	r24, Z+2	; 0x02
    24b4:	88 2f       	mov	r24, r24
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	88 0f       	add	r24, r24
    24ba:	99 1f       	adc	r25, r25
    24bc:	82 95       	swap	r24
    24be:	92 95       	swap	r25
    24c0:	90 7f       	andi	r25, 0xF0	; 240
    24c2:	98 27       	eor	r25, r24
    24c4:	80 7f       	andi	r24, 0xF0	; 240
    24c6:	98 27       	eor	r25, r24
    24c8:	82 2b       	or	r24, r18
    24ca:	8c 93       	st	X, r24

}
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <INT0_setCallBack>:
/*-------------------------------------------------------------------*/

/* Description: Function to set the Call Back function address. */
void INT0_setCallBack(void(*a_ptr)(void))
{
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	00 d0       	rcall	.+0      	; 0x24dc <INT0_setCallBack+0x6>
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	9a 83       	std	Y+2, r25	; 0x02
    24e2:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr0 = a_ptr;
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	9a 81       	ldd	r25, Y+2	; 0x02
    24e8:	90 93 9d 01 	sts	0x019D, r25
    24ec:	80 93 9c 01 	sts	0x019C, r24
}
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <INT1_setCallBack>:
/*-------------------------------------------------------------------*/

/* Description: Function to set the Call Back function address. */
void INT1_setCallBack(void(*a_ptr)(void))
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <INT1_setCallBack+0x6>
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	9a 83       	std	Y+2, r25	; 0x02
    2506:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr1 = a_ptr;
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
    250c:	90 93 9f 01 	sts	0x019F, r25
    2510:	80 93 9e 01 	sts	0x019E, r24
}
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <INT2_setCallBack>:
/*-------------------------------------------------------------------*/

/* Description: Function to set the Call Back function address. */
void INT2_setCallBack(void(*a_ptr)(void))
{
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	00 d0       	rcall	.+0      	; 0x2524 <INT2_setCallBack+0x6>
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr2 = a_ptr;
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	9a 81       	ldd	r25, Y+2	; 0x02
    2530:	90 93 a1 01 	sts	0x01A1, r25
    2534:	80 93 a0 01 	sts	0x01A0, r24
}
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <TWI_init>:
/*
 * Description:
 * Initializing I2C Registers
 */
void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	00 d0       	rcall	.+0      	; 0x2548 <TWI_init+0x6>
    2548:	0f 92       	push	r0
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    254e:	9a 83       	std	Y+2, r25	; 0x02
    2550:	89 83       	std	Y+1, r24	; 0x01
	/* Choosing the bit rate */
	TWBR = (TWBR & 0x00) | (Config_Ptr->bit_rate);
    2552:	e0 e2       	ldi	r30, 0x20	; 32
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	a0 e2       	ldi	r26, 0x20	; 32
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e9 81       	ldd	r30, Y+1	; 0x01
    255e:	fa 81       	ldd	r31, Y+2	; 0x02
    2560:	86 81       	ldd	r24, Z+6	; 0x06
    2562:	8c 93       	st	X, r24

	/* Choosing Ack */
	TWCR = (TWCR & 0xBF) | ((Config_Ptr->ackControl)<<TWEA);
    2564:	a6 e5       	ldi	r26, 0x56	; 86
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	e6 e5       	ldi	r30, 0x56	; 86
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	28 2f       	mov	r18, r24
    2570:	2f 7b       	andi	r18, 0xBF	; 191
    2572:	e9 81       	ldd	r30, Y+1	; 0x01
    2574:	fa 81       	ldd	r31, Y+2	; 0x02
    2576:	81 81       	ldd	r24, Z+1	; 0x01
    2578:	88 2f       	mov	r24, r24
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	00 24       	eor	r0, r0
    257e:	96 95       	lsr	r25
    2580:	87 95       	ror	r24
    2582:	07 94       	ror	r0
    2584:	96 95       	lsr	r25
    2586:	87 95       	ror	r24
    2588:	07 94       	ror	r0
    258a:	98 2f       	mov	r25, r24
    258c:	80 2d       	mov	r24, r0
    258e:	82 2b       	or	r24, r18
    2590:	8c 93       	st	X, r24

	/* Selecting the prescaler value */
	TWSR = (TWSR & 0xFC) | ((Config_Ptr->prescalerControl));
    2592:	a1 e2       	ldi	r26, 0x21	; 33
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e1 e2       	ldi	r30, 0x21	; 33
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	98 2f       	mov	r25, r24
    259e:	9c 7f       	andi	r25, 0xFC	; 252
    25a0:	e9 81       	ldd	r30, Y+1	; 0x01
    25a2:	fa 81       	ldd	r31, Y+2	; 0x02
    25a4:	83 81       	ldd	r24, Z+3	; 0x03
    25a6:	89 2b       	or	r24, r25
    25a8:	8c 93       	st	X, r24

	/* Identifying my self */
	TWAR = (TWAR & 0x01) | ((Config_Ptr->address)<<1);
    25aa:	a2 e2       	ldi	r26, 0x22	; 34
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e2 e2       	ldi	r30, 0x22	; 34
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	28 2f       	mov	r18, r24
    25b6:	21 70       	andi	r18, 0x01	; 1
    25b8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ba:	fa 81       	ldd	r31, Y+2	; 0x02
    25bc:	85 81       	ldd	r24, Z+5	; 0x05
    25be:	88 2f       	mov	r24, r24
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	88 0f       	add	r24, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	82 2b       	or	r24, r18
    25c8:	8c 93       	st	X, r24

	/* Enabling General Call Recognition */
	TWAR = (TWAR & 0xFE) | ((Config_Ptr->callRecControl));
    25ca:	a2 e2       	ldi	r26, 0x22	; 34
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	e2 e2       	ldi	r30, 0x22	; 34
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	98 2f       	mov	r25, r24
    25d6:	9e 7f       	andi	r25, 0xFE	; 254
    25d8:	e9 81       	ldd	r30, Y+1	; 0x01
    25da:	fa 81       	ldd	r31, Y+2	; 0x02
    25dc:	84 81       	ldd	r24, Z+4	; 0x04
    25de:	89 2b       	or	r24, r25
    25e0:	8c 93       	st	X, r24

	/* Interrupt Enable */
	TWCR = (TWCR & 0xFE) | ((Config_Ptr->interruptControl));
    25e2:	a6 e5       	ldi	r26, 0x56	; 86
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e6 e5       	ldi	r30, 0x56	; 86
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	98 2f       	mov	r25, r24
    25ee:	9e 7f       	andi	r25, 0xFE	; 254
    25f0:	e9 81       	ldd	r30, Y+1	; 0x01
    25f2:	fa 81       	ldd	r31, Y+2	; 0x02
    25f4:	80 81       	ld	r24, Z
    25f6:	89 2b       	or	r24, r25
    25f8:	8c 93       	st	X, r24

	/* Enable TWI */
	TWCR = (TWCR & 0xFB) | ((Config_Ptr->twiControl)<<TWEN);
    25fa:	a6 e5       	ldi	r26, 0x56	; 86
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e6 e5       	ldi	r30, 0x56	; 86
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	28 2f       	mov	r18, r24
    2606:	2b 7f       	andi	r18, 0xFB	; 251
    2608:	e9 81       	ldd	r30, Y+1	; 0x01
    260a:	fa 81       	ldd	r31, Y+2	; 0x02
    260c:	82 81       	ldd	r24, Z+2	; 0x02
    260e:	88 2f       	mov	r24, r24
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	82 2b       	or	r24, r18
    261c:	8c 93       	st	X, r24

}
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <TWI_start>:
/*
 * Description:
 * Getting ready to send and being a master
 */
void TWI_start(void)
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2632:	e6 e5       	ldi	r30, 0x56	; 86
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	84 ea       	ldi	r24, 0xA4	; 164
    2638:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    263a:	e6 e5       	ldi	r30, 0x56	; 86
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	88 23       	and	r24, r24
    2642:	dc f7       	brge	.-10     	; 0x263a <TWI_start+0x10>
}
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <TWI_stop>:
/*
 * Description:
 * Stopping the connection with slave
 */
void TWI_stop(void)
{
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2652:	e6 e5       	ldi	r30, 0x56	; 86
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	84 e9       	ldi	r24, 0x94	; 148
    2658:	80 83       	st	Z, r24
}
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <TWI_writeByte>:
/*
 * Description:
 * Sending byte
 */
void TWI_writeByte(uint8 data)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	0f 92       	push	r0
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    266c:	e3 e2       	ldi	r30, 0x23	; 35
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2674:	e6 e5       	ldi	r30, 0x56	; 86
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	84 e8       	ldi	r24, 0x84	; 132
    267a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    267c:	e6 e5       	ldi	r30, 0x56	; 86
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	88 23       	and	r24, r24
    2684:	dc f7       	brge	.-10     	; 0x267c <TWI_writeByte+0x1c>
}
    2686:	0f 90       	pop	r0
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <TWI_readByteWithACK>:
/*
 * Description:
 * Read the received value and then send ACK
 */
uint8 TWI_readByteWithACK(void)
{
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2696:	e6 e5       	ldi	r30, 0x56	; 86
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	84 ec       	ldi	r24, 0xC4	; 196
    269c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    269e:	e6 e5       	ldi	r30, 0x56	; 86
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	88 23       	and	r24, r24
    26a6:	dc f7       	brge	.-10     	; 0x269e <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    26a8:	e3 e2       	ldi	r30, 0x23	; 35
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
}
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	08 95       	ret

000026b4 <TWI_readByteWithNACK>:
/*
 * Description:
 * Read the received value and Don't send ACK
 */
uint8 TWI_readByteWithNACK(void)
{
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    26bc:	e6 e5       	ldi	r30, 0x56	; 86
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	84 e8       	ldi	r24, 0x84	; 132
    26c2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26c4:	e6 e5       	ldi	r30, 0x56	; 86
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	88 23       	and	r24, r24
    26cc:	dc f7       	brge	.-10     	; 0x26c4 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    26ce:	e3 e2       	ldi	r30, 0x23	; 35
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
}
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <TWI_getStatus>:
/*
 * Description:
 * Checking on the status of the register
 */
uint8 TWI_getStatus(void)
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	0f 92       	push	r0
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    26e4:	e1 e2       	ldi	r30, 0x21	; 33
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	88 7f       	andi	r24, 0xF8	; 248
    26ec:	89 83       	std	Y+1, r24	; 0x01
    return status;
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    26f0:	0f 90       	pop	r0
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <DCMotor_init>:
#include "../MCAL/Header/TIMER.h"

/**-------------------------Function Definition Section-------------**/

void DCMotor_init()
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Motor is connected to L293D Driver
	 */
	GPIO_setupPinDirection(DC_MOTOR_IN1_OUTPUT_PORT_ID, L293D_IN1_ID, PIN_OUTPUT);
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	60 e0       	ldi	r22, 0x00	; 0
    2704:	41 e0       	ldi	r20, 0x01	; 1
    2706:	0e 94 df 07 	call	0xfbe	; 0xfbe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN2_OUTPUT_PORT_ID, L293D_IN2_ID, PIN_OUTPUT);
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	61 e0       	ldi	r22, 0x01	; 1
    270e:	41 e0       	ldi	r20, 0x01	; 1
    2710:	0e 94 df 07 	call	0xfbe	; 0xfbe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_EN_PORT_ID, 		L293D_EN1_ID, PIN_OUTPUT);
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	63 e0       	ldi	r22, 0x03	; 3
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	0e 94 df 07 	call	0xfbe	; 0xfbe <GPIO_setupPinDirection>

} /* End DCMotor_init function */
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <DcMotor_Rotate>:

/*----------------------------------------------------------------------------*/

void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	00 d0       	rcall	.+0      	; 0x272a <DcMotor_Rotate+0x6>
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	6a 83       	std	Y+2, r22	; 0x02
	/* Selecting the Direction of the MOTOR */
	if(state == ClockWise)
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	88 23       	and	r24, r24
    2736:	59 f4       	brne	.+22     	; 0x274e <DcMotor_Rotate+0x2a>
	{
		GPIO_writePin(DC_MOTOR_IN1_OUTPUT_PORT_ID, L293D_IN1_ID, LOGIC_HIGH);
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	41 e0       	ldi	r20, 0x01	; 1
    273e:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_OUTPUT_PORT_ID, L293D_IN2_ID, LOGIC_LOW);
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	61 e0       	ldi	r22, 0x01	; 1
    2746:	40 e0       	ldi	r20, 0x00	; 0
    2748:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
    274c:	0d c0       	rjmp	.+26     	; 0x2768 <DcMotor_Rotate+0x44>
	}
	else if(state == Anti_ClockWise)
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	81 30       	cpi	r24, 0x01	; 1
    2752:	51 f4       	brne	.+20     	; 0x2768 <DcMotor_Rotate+0x44>
	{
		GPIO_writePin(DC_MOTOR_IN2_OUTPUT_PORT_ID, L293D_IN2_ID, LOGIC_HIGH);
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	61 e0       	ldi	r22, 0x01	; 1
    2758:	41 e0       	ldi	r20, 0x01	; 1
    275a:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN1_OUTPUT_PORT_ID, L293D_IN1_ID, LOGIC_LOW);
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	60 e0       	ldi	r22, 0x00	; 0
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
	}

	/* Sending the compare value to Timer everytime to change the motor speed */
	Timer0_PWM_Activate(&speed);
    2768:	ce 01       	movw	r24, r28
    276a:	02 96       	adiw	r24, 0x02	; 2
    276c:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <Timer0_PWM_Activate>
}
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <DCMotor_stop>:

/*----------------------------------------------------------------------------*/

void DCMotor_stop()
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	0f 92       	push	r0
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
	uint8 Speed = 0;
    2784:	19 82       	std	Y+1, r1	; 0x01
	Timer0_PWM_Activate(&Speed); /* Sending speed 0 to DCMotor_Speed() */
    2786:	ce 01       	movw	r24, r28
    2788:	01 96       	adiw	r24, 0x01	; 1
    278a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <Timer0_PWM_Activate>
}   /* End DCMotor_stop()function */
    278e:	0f 90       	pop	r0
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
    279e:	2e 97       	sbiw	r28, 0x0e	; 14
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT, LCD_RS_PIN , PIN_OUTPUT);
    27aa:	82 e0       	ldi	r24, 0x02	; 2
    27ac:	63 e0       	ldi	r22, 0x03	; 3
    27ae:	41 e0       	ldi	r20, 0x01	; 1
    27b0:	0e 94 df 07 	call	0xfbe	; 0xfbe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_EN_PORT, LCD_EN_PIN , PIN_OUTPUT);
    27b4:	82 e0       	ldi	r24, 0x02	; 2
    27b6:	62 e0       	ldi	r22, 0x02	; 2
    27b8:	41 e0       	ldi	r20, 0x01	; 1
    27ba:	0e 94 df 07 	call	0xfbe	; 0xfbe <GPIO_setupPinDirection>
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	a0 ea       	ldi	r26, 0xA0	; 160
    27c4:	b1 e4       	ldi	r27, 0x41	; 65
    27c6:	8b 87       	std	Y+11, r24	; 0x0b
    27c8:	9c 87       	std	Y+12, r25	; 0x0c
    27ca:	ad 87       	std	Y+13, r26	; 0x0d
    27cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	4a ef       	ldi	r20, 0xFA	; 250
    27dc:	54 e4       	ldi	r21, 0x44	; 68
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	8f 83       	std	Y+7, r24	; 0x07
    27e8:	98 87       	std	Y+8, r25	; 0x08
    27ea:	a9 87       	std	Y+9, r26	; 0x09
    27ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ee:	6f 81       	ldd	r22, Y+7	; 0x07
    27f0:	78 85       	ldd	r23, Y+8	; 0x08
    27f2:	89 85       	ldd	r24, Y+9	; 0x09
    27f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e8       	ldi	r20, 0x80	; 128
    27fc:	5f e3       	ldi	r21, 0x3F	; 63
    27fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2802:	88 23       	and	r24, r24
    2804:	2c f4       	brge	.+10     	; 0x2810 <LCD_init+0x7a>
		__ticks = 1;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	9e 83       	std	Y+6, r25	; 0x06
    280c:	8d 83       	std	Y+5, r24	; 0x05
    280e:	3f c0       	rjmp	.+126    	; 0x288e <LCD_init+0xf8>
	else if (__tmp > 65535)
    2810:	6f 81       	ldd	r22, Y+7	; 0x07
    2812:	78 85       	ldd	r23, Y+8	; 0x08
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	3f ef       	ldi	r19, 0xFF	; 255
    281c:	4f e7       	ldi	r20, 0x7F	; 127
    281e:	57 e4       	ldi	r21, 0x47	; 71
    2820:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2824:	18 16       	cp	r1, r24
    2826:	4c f5       	brge	.+82     	; 0x287a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2828:	6b 85       	ldd	r22, Y+11	; 0x0b
    282a:	7c 85       	ldd	r23, Y+12	; 0x0c
    282c:	8d 85       	ldd	r24, Y+13	; 0x0d
    282e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e2       	ldi	r20, 0x20	; 32
    2836:	51 e4       	ldi	r21, 0x41	; 65
    2838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	bc 01       	movw	r22, r24
    2842:	cd 01       	movw	r24, r26
    2844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	9e 83       	std	Y+6, r25	; 0x06
    284e:	8d 83       	std	Y+5, r24	; 0x05
    2850:	0f c0       	rjmp	.+30     	; 0x2870 <LCD_init+0xda>
    2852:	88 ec       	ldi	r24, 0xC8	; 200
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	9c 83       	std	Y+4, r25	; 0x04
    2858:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
    285c:	9c 81       	ldd	r25, Y+4	; 0x04
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <LCD_init+0xc8>
    2862:	9c 83       	std	Y+4, r25	; 0x04
    2864:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
    2868:	9e 81       	ldd	r25, Y+6	; 0x06
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	9e 83       	std	Y+6, r25	; 0x06
    286e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2870:	8d 81       	ldd	r24, Y+5	; 0x05
    2872:	9e 81       	ldd	r25, Y+6	; 0x06
    2874:	00 97       	sbiw	r24, 0x00	; 0
    2876:	69 f7       	brne	.-38     	; 0x2852 <LCD_init+0xbc>
    2878:	14 c0       	rjmp	.+40     	; 0x28a2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287a:	6f 81       	ldd	r22, Y+7	; 0x07
    287c:	78 85       	ldd	r23, Y+8	; 0x08
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	9e 83       	std	Y+6, r25	; 0x06
    288c:	8d 83       	std	Y+5, r24	; 0x05
    288e:	8d 81       	ldd	r24, Y+5	; 0x05
    2890:	9e 81       	ldd	r25, Y+6	; 0x06
    2892:	9a 83       	std	Y+2, r25	; 0x02
    2894:	89 83       	std	Y+1, r24	; 0x01
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	9a 81       	ldd	r25, Y+2	; 0x02
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	f1 f7       	brne	.-4      	; 0x289a <LCD_init+0x104>
    289e:	9a 83       	std	Y+2, r25	; 0x02
    28a0:	89 83       	std	Y+1, r24	; 0x01
		LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
	}
#elif(LCD_DATA_MODE == 4) /* Using 4 bit mode */
	{

		GPIO_setupPinDirection(LCD_OUTPUT_PORT, LCD_D4_PIN , PIN_OUTPUT);
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	64 e0       	ldi	r22, 0x04	; 4
    28a6:	41 e0       	ldi	r20, 0x01	; 1
    28a8:	0e 94 df 07 	call	0xfbe	; 0xfbe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_OUTPUT_PORT, LCD_D5_PIN , PIN_OUTPUT);
    28ac:	82 e0       	ldi	r24, 0x02	; 2
    28ae:	65 e0       	ldi	r22, 0x05	; 5
    28b0:	41 e0       	ldi	r20, 0x01	; 1
    28b2:	0e 94 df 07 	call	0xfbe	; 0xfbe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_OUTPUT_PORT, LCD_D6_PIN , PIN_OUTPUT);
    28b6:	82 e0       	ldi	r24, 0x02	; 2
    28b8:	66 e0       	ldi	r22, 0x06	; 6
    28ba:	41 e0       	ldi	r20, 0x01	; 1
    28bc:	0e 94 df 07 	call	0xfbe	; 0xfbe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_OUTPUT_PORT, LCD_D7_PIN , PIN_OUTPUT);
    28c0:	82 e0       	ldi	r24, 0x02	; 2
    28c2:	67 e0       	ldi	r22, 0x07	; 7
    28c4:	41 e0       	ldi	r20, 0x01	; 1
    28c6:	0e 94 df 07 	call	0xfbe	; 0xfbe <GPIO_setupPinDirection>

		/* Send for 4 bit initialization of LCD  */
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    28ca:	83 e3       	ldi	r24, 0x33	; 51
    28cc:	0e 94 7d 14 	call	0x28fa	; 0x28fa <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    28d0:	82 e3       	ldi	r24, 0x32	; 50
    28d2:	0e 94 7d 14 	call	0x28fa	; 0x28fa <LCD_sendCommand>
		/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    28d6:	88 e2       	ldi	r24, 0x28	; 40
    28d8:	0e 94 7d 14 	call	0x28fa	; 0x28fa <LCD_sendCommand>
	}

#endif

	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF ); /* cursor off */
    28dc:	8c e0       	ldi	r24, 0x0C	; 12
    28de:	0e 94 7d 14 	call	0x28fa	; 0x28fa <LCD_sendCommand>
	LCD_sendCommand(LCD_CLR_DISPLAY); 		 /* clear LCD at the beginning */
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	0e 94 7d 14 	call	0x28fa	; 0x28fa <LCD_sendCommand>
}
    28e8:	2e 96       	adiw	r28, 0x0e	; 14
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    28fa:	0f 93       	push	r16
    28fc:	1f 93       	push	r17
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	c3 56       	subi	r28, 0x63	; 99
    2908:	d0 40       	sbci	r29, 0x00	; 0
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
    2914:	fe 01       	movw	r30, r28
    2916:	ed 59       	subi	r30, 0x9D	; 157
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW); 	/* Setting to Command Register selection */
    291c:	82 e0       	ldi	r24, 0x02	; 2
    291e:	63 e0       	ldi	r22, 0x03	; 3
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
    2926:	fe 01       	movw	r30, r28
    2928:	e1 5a       	subi	r30, 0xA1	; 161
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	a0 e8       	ldi	r26, 0x80	; 128
    2932:	bf e3       	ldi	r27, 0x3F	; 63
    2934:	80 83       	st	Z, r24
    2936:	91 83       	std	Z+1, r25	; 0x01
    2938:	a2 83       	std	Z+2, r26	; 0x02
    293a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293c:	8e 01       	movw	r16, r28
    293e:	05 5a       	subi	r16, 0xA5	; 165
    2940:	1f 4f       	sbci	r17, 0xFF	; 255
    2942:	fe 01       	movw	r30, r28
    2944:	e1 5a       	subi	r30, 0xA1	; 161
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	60 81       	ld	r22, Z
    294a:	71 81       	ldd	r23, Z+1	; 0x01
    294c:	82 81       	ldd	r24, Z+2	; 0x02
    294e:	93 81       	ldd	r25, Z+3	; 0x03
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	4a ef       	ldi	r20, 0xFA	; 250
    2956:	54 e4       	ldi	r21, 0x44	; 68
    2958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	f8 01       	movw	r30, r16
    2962:	80 83       	st	Z, r24
    2964:	91 83       	std	Z+1, r25	; 0x01
    2966:	a2 83       	std	Z+2, r26	; 0x02
    2968:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    296a:	fe 01       	movw	r30, r28
    296c:	e5 5a       	subi	r30, 0xA5	; 165
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	60 81       	ld	r22, Z
    2972:	71 81       	ldd	r23, Z+1	; 0x01
    2974:	82 81       	ldd	r24, Z+2	; 0x02
    2976:	93 81       	ldd	r25, Z+3	; 0x03
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e8       	ldi	r20, 0x80	; 128
    297e:	5f e3       	ldi	r21, 0x3F	; 63
    2980:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2984:	88 23       	and	r24, r24
    2986:	44 f4       	brge	.+16     	; 0x2998 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2988:	fe 01       	movw	r30, r28
    298a:	e7 5a       	subi	r30, 0xA7	; 167
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	91 83       	std	Z+1, r25	; 0x01
    2994:	80 83       	st	Z, r24
    2996:	64 c0       	rjmp	.+200    	; 0x2a60 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2998:	fe 01       	movw	r30, r28
    299a:	e5 5a       	subi	r30, 0xA5	; 165
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	60 81       	ld	r22, Z
    29a0:	71 81       	ldd	r23, Z+1	; 0x01
    29a2:	82 81       	ldd	r24, Z+2	; 0x02
    29a4:	93 81       	ldd	r25, Z+3	; 0x03
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	3f ef       	ldi	r19, 0xFF	; 255
    29aa:	4f e7       	ldi	r20, 0x7F	; 127
    29ac:	57 e4       	ldi	r21, 0x47	; 71
    29ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b2:	18 16       	cp	r1, r24
    29b4:	0c f0       	brlt	.+2      	; 0x29b8 <LCD_sendCommand+0xbe>
    29b6:	43 c0       	rjmp	.+134    	; 0x2a3e <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b8:	fe 01       	movw	r30, r28
    29ba:	e1 5a       	subi	r30, 0xA1	; 161
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	60 81       	ld	r22, Z
    29c0:	71 81       	ldd	r23, Z+1	; 0x01
    29c2:	82 81       	ldd	r24, Z+2	; 0x02
    29c4:	93 81       	ldd	r25, Z+3	; 0x03
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	40 e2       	ldi	r20, 0x20	; 32
    29cc:	51 e4       	ldi	r21, 0x41	; 65
    29ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	8e 01       	movw	r16, r28
    29d8:	07 5a       	subi	r16, 0xA7	; 167
    29da:	1f 4f       	sbci	r17, 0xFF	; 255
    29dc:	bc 01       	movw	r22, r24
    29de:	cd 01       	movw	r24, r26
    29e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	f8 01       	movw	r30, r16
    29ea:	91 83       	std	Z+1, r25	; 0x01
    29ec:	80 83       	st	Z, r24
    29ee:	1f c0       	rjmp	.+62     	; 0x2a2e <LCD_sendCommand+0x134>
    29f0:	fe 01       	movw	r30, r28
    29f2:	e9 5a       	subi	r30, 0xA9	; 169
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	88 ec       	ldi	r24, 0xC8	; 200
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	91 83       	std	Z+1, r25	; 0x01
    29fc:	80 83       	st	Z, r24
    29fe:	fe 01       	movw	r30, r28
    2a00:	e9 5a       	subi	r30, 0xA9	; 169
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	80 81       	ld	r24, Z
    2a06:	91 81       	ldd	r25, Z+1	; 0x01
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	f1 f7       	brne	.-4      	; 0x2a08 <LCD_sendCommand+0x10e>
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e9 5a       	subi	r30, 0xA9	; 169
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	91 83       	std	Z+1, r25	; 0x01
    2a14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a16:	de 01       	movw	r26, r28
    2a18:	a7 5a       	subi	r26, 0xA7	; 167
    2a1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e7 5a       	subi	r30, 0xA7	; 167
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	80 81       	ld	r24, Z
    2a24:	91 81       	ldd	r25, Z+1	; 0x01
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	11 96       	adiw	r26, 0x01	; 1
    2a2a:	9c 93       	st	X, r25
    2a2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2e:	fe 01       	movw	r30, r28
    2a30:	e7 5a       	subi	r30, 0xA7	; 167
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	80 81       	ld	r24, Z
    2a36:	91 81       	ldd	r25, Z+1	; 0x01
    2a38:	00 97       	sbiw	r24, 0x00	; 0
    2a3a:	d1 f6       	brne	.-76     	; 0x29f0 <LCD_sendCommand+0xf6>
    2a3c:	27 c0       	rjmp	.+78     	; 0x2a8c <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3e:	8e 01       	movw	r16, r28
    2a40:	07 5a       	subi	r16, 0xA7	; 167
    2a42:	1f 4f       	sbci	r17, 0xFF	; 255
    2a44:	fe 01       	movw	r30, r28
    2a46:	e5 5a       	subi	r30, 0xA5	; 165
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	60 81       	ld	r22, Z
    2a4c:	71 81       	ldd	r23, Z+1	; 0x01
    2a4e:	82 81       	ldd	r24, Z+2	; 0x02
    2a50:	93 81       	ldd	r25, Z+3	; 0x03
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	f8 01       	movw	r30, r16
    2a5c:	91 83       	std	Z+1, r25	; 0x01
    2a5e:	80 83       	st	Z, r24
    2a60:	de 01       	movw	r26, r28
    2a62:	ab 5a       	subi	r26, 0xAB	; 171
    2a64:	bf 4f       	sbci	r27, 0xFF	; 255
    2a66:	fe 01       	movw	r30, r28
    2a68:	e7 5a       	subi	r30, 0xA7	; 167
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	80 81       	ld	r24, Z
    2a6e:	91 81       	ldd	r25, Z+1	; 0x01
    2a70:	8d 93       	st	X+, r24
    2a72:	9c 93       	st	X, r25
    2a74:	fe 01       	movw	r30, r28
    2a76:	eb 5a       	subi	r30, 0xAB	; 171
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	80 81       	ld	r24, Z
    2a7c:	91 81       	ldd	r25, Z+1	; 0x01
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <LCD_sendCommand+0x184>
    2a82:	fe 01       	movw	r30, r28
    2a84:	eb 5a       	subi	r30, 0xAB	; 171
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	91 83       	std	Z+1, r25	; 0x01
    2a8a:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH); /* Enable LCD */
    2a8c:	82 e0       	ldi	r24, 0x02	; 2
    2a8e:	62 e0       	ldi	r22, 0x02	; 2
    2a90:	41 e0       	ldi	r20, 0x01	; 1
    2a92:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
    2a96:	fe 01       	movw	r30, r28
    2a98:	ef 5a       	subi	r30, 0xAF	; 175
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	a0 e8       	ldi	r26, 0x80	; 128
    2aa2:	bf e3       	ldi	r27, 0x3F	; 63
    2aa4:	80 83       	st	Z, r24
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	a2 83       	std	Z+2, r26	; 0x02
    2aaa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aac:	8e 01       	movw	r16, r28
    2aae:	03 5b       	subi	r16, 0xB3	; 179
    2ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	ef 5a       	subi	r30, 0xAF	; 175
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	60 81       	ld	r22, Z
    2aba:	71 81       	ldd	r23, Z+1	; 0x01
    2abc:	82 81       	ldd	r24, Z+2	; 0x02
    2abe:	93 81       	ldd	r25, Z+3	; 0x03
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	4a ef       	ldi	r20, 0xFA	; 250
    2ac6:	54 e4       	ldi	r21, 0x44	; 68
    2ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	f8 01       	movw	r30, r16
    2ad2:	80 83       	st	Z, r24
    2ad4:	91 83       	std	Z+1, r25	; 0x01
    2ad6:	a2 83       	std	Z+2, r26	; 0x02
    2ad8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ada:	fe 01       	movw	r30, r28
    2adc:	e3 5b       	subi	r30, 0xB3	; 179
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	60 81       	ld	r22, Z
    2ae2:	71 81       	ldd	r23, Z+1	; 0x01
    2ae4:	82 81       	ldd	r24, Z+2	; 0x02
    2ae6:	93 81       	ldd	r25, Z+3	; 0x03
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	40 e8       	ldi	r20, 0x80	; 128
    2aee:	5f e3       	ldi	r21, 0x3F	; 63
    2af0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2af4:	88 23       	and	r24, r24
    2af6:	44 f4       	brge	.+16     	; 0x2b08 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2af8:	fe 01       	movw	r30, r28
    2afa:	e5 5b       	subi	r30, 0xB5	; 181
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	91 83       	std	Z+1, r25	; 0x01
    2b04:	80 83       	st	Z, r24
    2b06:	64 c0       	rjmp	.+200    	; 0x2bd0 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2b08:	fe 01       	movw	r30, r28
    2b0a:	e3 5b       	subi	r30, 0xB3	; 179
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	60 81       	ld	r22, Z
    2b10:	71 81       	ldd	r23, Z+1	; 0x01
    2b12:	82 81       	ldd	r24, Z+2	; 0x02
    2b14:	93 81       	ldd	r25, Z+3	; 0x03
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	3f ef       	ldi	r19, 0xFF	; 255
    2b1a:	4f e7       	ldi	r20, 0x7F	; 127
    2b1c:	57 e4       	ldi	r21, 0x47	; 71
    2b1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b22:	18 16       	cp	r1, r24
    2b24:	0c f0       	brlt	.+2      	; 0x2b28 <LCD_sendCommand+0x22e>
    2b26:	43 c0       	rjmp	.+134    	; 0x2bae <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b28:	fe 01       	movw	r30, r28
    2b2a:	ef 5a       	subi	r30, 0xAF	; 175
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	60 81       	ld	r22, Z
    2b30:	71 81       	ldd	r23, Z+1	; 0x01
    2b32:	82 81       	ldd	r24, Z+2	; 0x02
    2b34:	93 81       	ldd	r25, Z+3	; 0x03
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e2       	ldi	r20, 0x20	; 32
    2b3c:	51 e4       	ldi	r21, 0x41	; 65
    2b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	8e 01       	movw	r16, r28
    2b48:	05 5b       	subi	r16, 0xB5	; 181
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	bc 01       	movw	r22, r24
    2b4e:	cd 01       	movw	r24, r26
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	f8 01       	movw	r30, r16
    2b5a:	91 83       	std	Z+1, r25	; 0x01
    2b5c:	80 83       	st	Z, r24
    2b5e:	1f c0       	rjmp	.+62     	; 0x2b9e <LCD_sendCommand+0x2a4>
    2b60:	fe 01       	movw	r30, r28
    2b62:	e7 5b       	subi	r30, 0xB7	; 183
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	88 ec       	ldi	r24, 0xC8	; 200
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e7 5b       	subi	r30, 0xB7	; 183
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	80 81       	ld	r24, Z
    2b76:	91 81       	ldd	r25, Z+1	; 0x01
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	f1 f7       	brne	.-4      	; 0x2b78 <LCD_sendCommand+0x27e>
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e7 5b       	subi	r30, 0xB7	; 183
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	91 83       	std	Z+1, r25	; 0x01
    2b84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b86:	de 01       	movw	r26, r28
    2b88:	a5 5b       	subi	r26, 0xB5	; 181
    2b8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	e5 5b       	subi	r30, 0xB5	; 181
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	80 81       	ld	r24, Z
    2b94:	91 81       	ldd	r25, Z+1	; 0x01
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	11 96       	adiw	r26, 0x01	; 1
    2b9a:	9c 93       	st	X, r25
    2b9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	e5 5b       	subi	r30, 0xB5	; 181
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	80 81       	ld	r24, Z
    2ba6:	91 81       	ldd	r25, Z+1	; 0x01
    2ba8:	00 97       	sbiw	r24, 0x00	; 0
    2baa:	d1 f6       	brne	.-76     	; 0x2b60 <LCD_sendCommand+0x266>
    2bac:	27 c0       	rjmp	.+78     	; 0x2bfc <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bae:	8e 01       	movw	r16, r28
    2bb0:	05 5b       	subi	r16, 0xB5	; 181
    2bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	e3 5b       	subi	r30, 0xB3	; 179
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	60 81       	ld	r22, Z
    2bbc:	71 81       	ldd	r23, Z+1	; 0x01
    2bbe:	82 81       	ldd	r24, Z+2	; 0x02
    2bc0:	93 81       	ldd	r25, Z+3	; 0x03
    2bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	f8 01       	movw	r30, r16
    2bcc:	91 83       	std	Z+1, r25	; 0x01
    2bce:	80 83       	st	Z, r24
    2bd0:	de 01       	movw	r26, r28
    2bd2:	a9 5b       	subi	r26, 0xB9	; 185
    2bd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	e5 5b       	subi	r30, 0xB5	; 181
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 81       	ld	r24, Z
    2bde:	91 81       	ldd	r25, Z+1	; 0x01
    2be0:	8d 93       	st	X+, r24
    2be2:	9c 93       	st	X, r25
    2be4:	fe 01       	movw	r30, r28
    2be6:	e9 5b       	subi	r30, 0xB9	; 185
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	80 81       	ld	r24, Z
    2bec:	91 81       	ldd	r25, Z+1	; 0x01
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <LCD_sendCommand+0x2f4>
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e9 5b       	subi	r30, 0xB9	; 185
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	91 83       	std	Z+1, r25	; 0x01
    2bfa:	80 83       	st	Z, r24
		GPIO_writePort(LCD_OUTPUT_PORT, command); 			/* Sending the command through the 8 pins*/
	}
#else
	{
		/* Sending the LAST four BITS */
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D4_PIN , GET_BIT(command,4));
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	ed 59       	subi	r30, 0x9D	; 157
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	80 81       	ld	r24, Z
    2c04:	88 2f       	mov	r24, r24
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	80 71       	andi	r24, 0x10	; 16
    2c0a:	90 70       	andi	r25, 0x00	; 0
    2c0c:	95 95       	asr	r25
    2c0e:	87 95       	ror	r24
    2c10:	95 95       	asr	r25
    2c12:	87 95       	ror	r24
    2c14:	95 95       	asr	r25
    2c16:	87 95       	ror	r24
    2c18:	95 95       	asr	r25
    2c1a:	87 95       	ror	r24
    2c1c:	98 2f       	mov	r25, r24
    2c1e:	82 e0       	ldi	r24, 0x02	; 2
    2c20:	64 e0       	ldi	r22, 0x04	; 4
    2c22:	49 2f       	mov	r20, r25
    2c24:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D5_PIN , GET_BIT(command,5));
    2c28:	fe 01       	movw	r30, r28
    2c2a:	ed 59       	subi	r30, 0x9D	; 157
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	80 81       	ld	r24, Z
    2c30:	88 2f       	mov	r24, r24
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	80 72       	andi	r24, 0x20	; 32
    2c36:	90 70       	andi	r25, 0x00	; 0
    2c38:	95 95       	asr	r25
    2c3a:	87 95       	ror	r24
    2c3c:	95 95       	asr	r25
    2c3e:	87 95       	ror	r24
    2c40:	95 95       	asr	r25
    2c42:	87 95       	ror	r24
    2c44:	95 95       	asr	r25
    2c46:	87 95       	ror	r24
    2c48:	95 95       	asr	r25
    2c4a:	87 95       	ror	r24
    2c4c:	98 2f       	mov	r25, r24
    2c4e:	82 e0       	ldi	r24, 0x02	; 2
    2c50:	65 e0       	ldi	r22, 0x05	; 5
    2c52:	49 2f       	mov	r20, r25
    2c54:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D6_PIN , GET_BIT(command,6));
    2c58:	fe 01       	movw	r30, r28
    2c5a:	ed 59       	subi	r30, 0x9D	; 157
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	80 81       	ld	r24, Z
    2c60:	88 2f       	mov	r24, r24
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	80 74       	andi	r24, 0x40	; 64
    2c66:	90 70       	andi	r25, 0x00	; 0
    2c68:	08 2e       	mov	r0, r24
    2c6a:	89 2f       	mov	r24, r25
    2c6c:	00 0c       	add	r0, r0
    2c6e:	88 1f       	adc	r24, r24
    2c70:	99 0b       	sbc	r25, r25
    2c72:	00 0c       	add	r0, r0
    2c74:	88 1f       	adc	r24, r24
    2c76:	99 1f       	adc	r25, r25
    2c78:	98 2f       	mov	r25, r24
    2c7a:	82 e0       	ldi	r24, 0x02	; 2
    2c7c:	66 e0       	ldi	r22, 0x06	; 6
    2c7e:	49 2f       	mov	r20, r25
    2c80:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D7_PIN , GET_BIT(command,7));
    2c84:	fe 01       	movw	r30, r28
    2c86:	ed 59       	subi	r30, 0x9D	; 157
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	80 81       	ld	r24, Z
    2c8c:	98 2f       	mov	r25, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	99 27       	eor	r25, r25
    2c92:	99 1f       	adc	r25, r25
    2c94:	82 e0       	ldi	r24, 0x02	; 2
    2c96:	67 e0       	ldi	r22, 0x07	; 7
    2c98:	49 2f       	mov	r20, r25
    2c9a:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	ed 5b       	subi	r30, 0xBD	; 189
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	a0 e8       	ldi	r26, 0x80	; 128
    2caa:	bf e3       	ldi	r27, 0x3F	; 63
    2cac:	80 83       	st	Z, r24
    2cae:	91 83       	std	Z+1, r25	; 0x01
    2cb0:	a2 83       	std	Z+2, r26	; 0x02
    2cb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb4:	8e 01       	movw	r16, r28
    2cb6:	01 5c       	subi	r16, 0xC1	; 193
    2cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cba:	fe 01       	movw	r30, r28
    2cbc:	ed 5b       	subi	r30, 0xBD	; 189
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	60 81       	ld	r22, Z
    2cc2:	71 81       	ldd	r23, Z+1	; 0x01
    2cc4:	82 81       	ldd	r24, Z+2	; 0x02
    2cc6:	93 81       	ldd	r25, Z+3	; 0x03
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	4a ef       	ldi	r20, 0xFA	; 250
    2cce:	54 e4       	ldi	r21, 0x44	; 68
    2cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	f8 01       	movw	r30, r16
    2cda:	80 83       	st	Z, r24
    2cdc:	91 83       	std	Z+1, r25	; 0x01
    2cde:	a2 83       	std	Z+2, r26	; 0x02
    2ce0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	ff 96       	adiw	r30, 0x3f	; 63
    2ce6:	60 81       	ld	r22, Z
    2ce8:	71 81       	ldd	r23, Z+1	; 0x01
    2cea:	82 81       	ldd	r24, Z+2	; 0x02
    2cec:	93 81       	ldd	r25, Z+3	; 0x03
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e8       	ldi	r20, 0x80	; 128
    2cf4:	5f e3       	ldi	r21, 0x3F	; 63
    2cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cfa:	88 23       	and	r24, r24
    2cfc:	2c f4       	brge	.+10     	; 0x2d08 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	9e af       	std	Y+62, r25	; 0x3e
    2d04:	8d af       	std	Y+61, r24	; 0x3d
    2d06:	46 c0       	rjmp	.+140    	; 0x2d94 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2d08:	fe 01       	movw	r30, r28
    2d0a:	ff 96       	adiw	r30, 0x3f	; 63
    2d0c:	60 81       	ld	r22, Z
    2d0e:	71 81       	ldd	r23, Z+1	; 0x01
    2d10:	82 81       	ldd	r24, Z+2	; 0x02
    2d12:	93 81       	ldd	r25, Z+3	; 0x03
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	3f ef       	ldi	r19, 0xFF	; 255
    2d18:	4f e7       	ldi	r20, 0x7F	; 127
    2d1a:	57 e4       	ldi	r21, 0x47	; 71
    2d1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d20:	18 16       	cp	r1, r24
    2d22:	64 f5       	brge	.+88     	; 0x2d7c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d24:	fe 01       	movw	r30, r28
    2d26:	ed 5b       	subi	r30, 0xBD	; 189
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	60 81       	ld	r22, Z
    2d2c:	71 81       	ldd	r23, Z+1	; 0x01
    2d2e:	82 81       	ldd	r24, Z+2	; 0x02
    2d30:	93 81       	ldd	r25, Z+3	; 0x03
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e2       	ldi	r20, 0x20	; 32
    2d38:	51 e4       	ldi	r21, 0x41	; 65
    2d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	bc 01       	movw	r22, r24
    2d44:	cd 01       	movw	r24, r26
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	9e af       	std	Y+62, r25	; 0x3e
    2d50:	8d af       	std	Y+61, r24	; 0x3d
    2d52:	0f c0       	rjmp	.+30     	; 0x2d72 <LCD_sendCommand+0x478>
    2d54:	88 ec       	ldi	r24, 0xC8	; 200
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9c af       	std	Y+60, r25	; 0x3c
    2d5a:	8b af       	std	Y+59, r24	; 0x3b
    2d5c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d5e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <LCD_sendCommand+0x466>
    2d64:	9c af       	std	Y+60, r25	; 0x3c
    2d66:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d68:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	9e af       	std	Y+62, r25	; 0x3e
    2d70:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d72:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d74:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d76:	00 97       	sbiw	r24, 0x00	; 0
    2d78:	69 f7       	brne	.-38     	; 0x2d54 <LCD_sendCommand+0x45a>
    2d7a:	16 c0       	rjmp	.+44     	; 0x2da8 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	ff 96       	adiw	r30, 0x3f	; 63
    2d80:	60 81       	ld	r22, Z
    2d82:	71 81       	ldd	r23, Z+1	; 0x01
    2d84:	82 81       	ldd	r24, Z+2	; 0x02
    2d86:	93 81       	ldd	r25, Z+3	; 0x03
    2d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	9e af       	std	Y+62, r25	; 0x3e
    2d92:	8d af       	std	Y+61, r24	; 0x3d
    2d94:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d96:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d98:	9a af       	std	Y+58, r25	; 0x3a
    2d9a:	89 af       	std	Y+57, r24	; 0x39
    2d9c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d9e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	f1 f7       	brne	.-4      	; 0x2da0 <LCD_sendCommand+0x4a6>
    2da4:	9a af       	std	Y+58, r25	; 0x3a
    2da6:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW); /* De-activating the LCD */
    2da8:	82 e0       	ldi	r24, 0x02	; 2
    2daa:	62 e0       	ldi	r22, 0x02	; 2
    2dac:	40 e0       	ldi	r20, 0x00	; 0
    2dae:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	a0 e8       	ldi	r26, 0x80	; 128
    2db8:	bf e3       	ldi	r27, 0x3F	; 63
    2dba:	8d ab       	std	Y+53, r24	; 0x35
    2dbc:	9e ab       	std	Y+54, r25	; 0x36
    2dbe:	af ab       	std	Y+55, r26	; 0x37
    2dc0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc2:	6d a9       	ldd	r22, Y+53	; 0x35
    2dc4:	7e a9       	ldd	r23, Y+54	; 0x36
    2dc6:	8f a9       	ldd	r24, Y+55	; 0x37
    2dc8:	98 ad       	ldd	r25, Y+56	; 0x38
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	4a ef       	ldi	r20, 0xFA	; 250
    2dd0:	54 e4       	ldi	r21, 0x44	; 68
    2dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	89 ab       	std	Y+49, r24	; 0x31
    2ddc:	9a ab       	std	Y+50, r25	; 0x32
    2dde:	ab ab       	std	Y+51, r26	; 0x33
    2de0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2de2:	69 a9       	ldd	r22, Y+49	; 0x31
    2de4:	7a a9       	ldd	r23, Y+50	; 0x32
    2de6:	8b a9       	ldd	r24, Y+51	; 0x33
    2de8:	9c a9       	ldd	r25, Y+52	; 0x34
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	40 e8       	ldi	r20, 0x80	; 128
    2df0:	5f e3       	ldi	r21, 0x3F	; 63
    2df2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2df6:	88 23       	and	r24, r24
    2df8:	2c f4       	brge	.+10     	; 0x2e04 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	98 ab       	std	Y+48, r25	; 0x30
    2e00:	8f a7       	std	Y+47, r24	; 0x2f
    2e02:	3f c0       	rjmp	.+126    	; 0x2e82 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2e04:	69 a9       	ldd	r22, Y+49	; 0x31
    2e06:	7a a9       	ldd	r23, Y+50	; 0x32
    2e08:	8b a9       	ldd	r24, Y+51	; 0x33
    2e0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	3f ef       	ldi	r19, 0xFF	; 255
    2e10:	4f e7       	ldi	r20, 0x7F	; 127
    2e12:	57 e4       	ldi	r21, 0x47	; 71
    2e14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e18:	18 16       	cp	r1, r24
    2e1a:	4c f5       	brge	.+82     	; 0x2e6e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e1c:	6d a9       	ldd	r22, Y+53	; 0x35
    2e1e:	7e a9       	ldd	r23, Y+54	; 0x36
    2e20:	8f a9       	ldd	r24, Y+55	; 0x37
    2e22:	98 ad       	ldd	r25, Y+56	; 0x38
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 e2       	ldi	r20, 0x20	; 32
    2e2a:	51 e4       	ldi	r21, 0x41	; 65
    2e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	bc 01       	movw	r22, r24
    2e36:	cd 01       	movw	r24, r26
    2e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	98 ab       	std	Y+48, r25	; 0x30
    2e42:	8f a7       	std	Y+47, r24	; 0x2f
    2e44:	0f c0       	rjmp	.+30     	; 0x2e64 <LCD_sendCommand+0x56a>
    2e46:	88 ec       	ldi	r24, 0xC8	; 200
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	9e a7       	std	Y+46, r25	; 0x2e
    2e4c:	8d a7       	std	Y+45, r24	; 0x2d
    2e4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e50:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	f1 f7       	brne	.-4      	; 0x2e52 <LCD_sendCommand+0x558>
    2e56:	9e a7       	std	Y+46, r25	; 0x2e
    2e58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e5c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	98 ab       	std	Y+48, r25	; 0x30
    2e62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e64:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e66:	98 a9       	ldd	r25, Y+48	; 0x30
    2e68:	00 97       	sbiw	r24, 0x00	; 0
    2e6a:	69 f7       	brne	.-38     	; 0x2e46 <LCD_sendCommand+0x54c>
    2e6c:	14 c0       	rjmp	.+40     	; 0x2e96 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e6e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e70:	7a a9       	ldd	r23, Y+50	; 0x32
    2e72:	8b a9       	ldd	r24, Y+51	; 0x33
    2e74:	9c a9       	ldd	r25, Y+52	; 0x34
    2e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	98 ab       	std	Y+48, r25	; 0x30
    2e80:	8f a7       	std	Y+47, r24	; 0x2f
    2e82:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e84:	98 a9       	ldd	r25, Y+48	; 0x30
    2e86:	9c a7       	std	Y+44, r25	; 0x2c
    2e88:	8b a7       	std	Y+43, r24	; 0x2b
    2e8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <LCD_sendCommand+0x594>
    2e92:	9c a7       	std	Y+44, r25	; 0x2c
    2e94:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH); /* Enable LCD */
    2e96:	82 e0       	ldi	r24, 0x02	; 2
    2e98:	62 e0       	ldi	r22, 0x02	; 2
    2e9a:	41 e0       	ldi	r20, 0x01	; 1
    2e9c:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	a0 e8       	ldi	r26, 0x80	; 128
    2ea6:	bf e3       	ldi	r27, 0x3F	; 63
    2ea8:	8f a3       	std	Y+39, r24	; 0x27
    2eaa:	98 a7       	std	Y+40, r25	; 0x28
    2eac:	a9 a7       	std	Y+41, r26	; 0x29
    2eae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb0:	6f a1       	ldd	r22, Y+39	; 0x27
    2eb2:	78 a5       	ldd	r23, Y+40	; 0x28
    2eb4:	89 a5       	ldd	r24, Y+41	; 0x29
    2eb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	4a ef       	ldi	r20, 0xFA	; 250
    2ebe:	54 e4       	ldi	r21, 0x44	; 68
    2ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	8b a3       	std	Y+35, r24	; 0x23
    2eca:	9c a3       	std	Y+36, r25	; 0x24
    2ecc:	ad a3       	std	Y+37, r26	; 0x25
    2ece:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ed0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ed2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ed4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ed6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e8       	ldi	r20, 0x80	; 128
    2ede:	5f e3       	ldi	r21, 0x3F	; 63
    2ee0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ee4:	88 23       	and	r24, r24
    2ee6:	2c f4       	brge	.+10     	; 0x2ef2 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	9a a3       	std	Y+34, r25	; 0x22
    2eee:	89 a3       	std	Y+33, r24	; 0x21
    2ef0:	3f c0       	rjmp	.+126    	; 0x2f70 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2ef2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ef4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ef6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ef8:	9e a1       	ldd	r25, Y+38	; 0x26
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	3f ef       	ldi	r19, 0xFF	; 255
    2efe:	4f e7       	ldi	r20, 0x7F	; 127
    2f00:	57 e4       	ldi	r21, 0x47	; 71
    2f02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f06:	18 16       	cp	r1, r24
    2f08:	4c f5       	brge	.+82     	; 0x2f5c <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f0a:	6f a1       	ldd	r22, Y+39	; 0x27
    2f0c:	78 a5       	ldd	r23, Y+40	; 0x28
    2f0e:	89 a5       	ldd	r24, Y+41	; 0x29
    2f10:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e2       	ldi	r20, 0x20	; 32
    2f18:	51 e4       	ldi	r21, 0x41	; 65
    2f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	bc 01       	movw	r22, r24
    2f24:	cd 01       	movw	r24, r26
    2f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	9a a3       	std	Y+34, r25	; 0x22
    2f30:	89 a3       	std	Y+33, r24	; 0x21
    2f32:	0f c0       	rjmp	.+30     	; 0x2f52 <LCD_sendCommand+0x658>
    2f34:	88 ec       	ldi	r24, 0xC8	; 200
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	98 a3       	std	Y+32, r25	; 0x20
    2f3a:	8f 8f       	std	Y+31, r24	; 0x1f
    2f3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f3e:	98 a1       	ldd	r25, Y+32	; 0x20
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	f1 f7       	brne	.-4      	; 0x2f40 <LCD_sendCommand+0x646>
    2f44:	98 a3       	std	Y+32, r25	; 0x20
    2f46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f48:	89 a1       	ldd	r24, Y+33	; 0x21
    2f4a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	9a a3       	std	Y+34, r25	; 0x22
    2f50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f52:	89 a1       	ldd	r24, Y+33	; 0x21
    2f54:	9a a1       	ldd	r25, Y+34	; 0x22
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	69 f7       	brne	.-38     	; 0x2f34 <LCD_sendCommand+0x63a>
    2f5a:	14 c0       	rjmp	.+40     	; 0x2f84 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f5c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f5e:	7c a1       	ldd	r23, Y+36	; 0x24
    2f60:	8d a1       	ldd	r24, Y+37	; 0x25
    2f62:	9e a1       	ldd	r25, Y+38	; 0x26
    2f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	9a a3       	std	Y+34, r25	; 0x22
    2f6e:	89 a3       	std	Y+33, r24	; 0x21
    2f70:	89 a1       	ldd	r24, Y+33	; 0x21
    2f72:	9a a1       	ldd	r25, Y+34	; 0x22
    2f74:	9e 8f       	std	Y+30, r25	; 0x1e
    2f76:	8d 8f       	std	Y+29, r24	; 0x1d
    2f78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <LCD_sendCommand+0x682>
    2f80:	9e 8f       	std	Y+30, r25	; 0x1e
    2f82:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		/* Sending the FIRST four BITS */
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D4_PIN , GET_BIT(command,0));
    2f84:	fe 01       	movw	r30, r28
    2f86:	ed 59       	subi	r30, 0x9D	; 157
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	80 81       	ld	r24, Z
    2f8c:	98 2f       	mov	r25, r24
    2f8e:	91 70       	andi	r25, 0x01	; 1
    2f90:	82 e0       	ldi	r24, 0x02	; 2
    2f92:	64 e0       	ldi	r22, 0x04	; 4
    2f94:	49 2f       	mov	r20, r25
    2f96:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D5_PIN , GET_BIT(command,1));
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	ed 59       	subi	r30, 0x9D	; 157
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	80 81       	ld	r24, Z
    2fa2:	88 2f       	mov	r24, r24
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	82 70       	andi	r24, 0x02	; 2
    2fa8:	90 70       	andi	r25, 0x00	; 0
    2faa:	95 95       	asr	r25
    2fac:	87 95       	ror	r24
    2fae:	98 2f       	mov	r25, r24
    2fb0:	82 e0       	ldi	r24, 0x02	; 2
    2fb2:	65 e0       	ldi	r22, 0x05	; 5
    2fb4:	49 2f       	mov	r20, r25
    2fb6:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D6_PIN , GET_BIT(command,2));
    2fba:	fe 01       	movw	r30, r28
    2fbc:	ed 59       	subi	r30, 0x9D	; 157
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	80 81       	ld	r24, Z
    2fc2:	88 2f       	mov	r24, r24
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	84 70       	andi	r24, 0x04	; 4
    2fc8:	90 70       	andi	r25, 0x00	; 0
    2fca:	95 95       	asr	r25
    2fcc:	87 95       	ror	r24
    2fce:	95 95       	asr	r25
    2fd0:	87 95       	ror	r24
    2fd2:	98 2f       	mov	r25, r24
    2fd4:	82 e0       	ldi	r24, 0x02	; 2
    2fd6:	66 e0       	ldi	r22, 0x06	; 6
    2fd8:	49 2f       	mov	r20, r25
    2fda:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D7_PIN , GET_BIT(command,3));
    2fde:	fe 01       	movw	r30, r28
    2fe0:	ed 59       	subi	r30, 0x9D	; 157
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	80 81       	ld	r24, Z
    2fe6:	88 2f       	mov	r24, r24
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	88 70       	andi	r24, 0x08	; 8
    2fec:	90 70       	andi	r25, 0x00	; 0
    2fee:	95 95       	asr	r25
    2ff0:	87 95       	ror	r24
    2ff2:	95 95       	asr	r25
    2ff4:	87 95       	ror	r24
    2ff6:	95 95       	asr	r25
    2ff8:	87 95       	ror	r24
    2ffa:	98 2f       	mov	r25, r24
    2ffc:	82 e0       	ldi	r24, 0x02	; 2
    2ffe:	67 e0       	ldi	r22, 0x07	; 7
    3000:	49 2f       	mov	r20, r25
    3002:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	a0 e8       	ldi	r26, 0x80	; 128
    300c:	bf e3       	ldi	r27, 0x3F	; 63
    300e:	89 8f       	std	Y+25, r24	; 0x19
    3010:	9a 8f       	std	Y+26, r25	; 0x1a
    3012:	ab 8f       	std	Y+27, r26	; 0x1b
    3014:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3016:	69 8d       	ldd	r22, Y+25	; 0x19
    3018:	7a 8d       	ldd	r23, Y+26	; 0x1a
    301a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    301c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	4a ef       	ldi	r20, 0xFA	; 250
    3024:	54 e4       	ldi	r21, 0x44	; 68
    3026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	8d 8b       	std	Y+21, r24	; 0x15
    3030:	9e 8b       	std	Y+22, r25	; 0x16
    3032:	af 8b       	std	Y+23, r26	; 0x17
    3034:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3036:	6d 89       	ldd	r22, Y+21	; 0x15
    3038:	7e 89       	ldd	r23, Y+22	; 0x16
    303a:	8f 89       	ldd	r24, Y+23	; 0x17
    303c:	98 8d       	ldd	r25, Y+24	; 0x18
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	40 e8       	ldi	r20, 0x80	; 128
    3044:	5f e3       	ldi	r21, 0x3F	; 63
    3046:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    304a:	88 23       	and	r24, r24
    304c:	2c f4       	brge	.+10     	; 0x3058 <LCD_sendCommand+0x75e>
		__ticks = 1;
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	9c 8b       	std	Y+20, r25	; 0x14
    3054:	8b 8b       	std	Y+19, r24	; 0x13
    3056:	3f c0       	rjmp	.+126    	; 0x30d6 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    3058:	6d 89       	ldd	r22, Y+21	; 0x15
    305a:	7e 89       	ldd	r23, Y+22	; 0x16
    305c:	8f 89       	ldd	r24, Y+23	; 0x17
    305e:	98 8d       	ldd	r25, Y+24	; 0x18
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	3f ef       	ldi	r19, 0xFF	; 255
    3064:	4f e7       	ldi	r20, 0x7F	; 127
    3066:	57 e4       	ldi	r21, 0x47	; 71
    3068:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    306c:	18 16       	cp	r1, r24
    306e:	4c f5       	brge	.+82     	; 0x30c2 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3070:	69 8d       	ldd	r22, Y+25	; 0x19
    3072:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3074:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3076:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 e2       	ldi	r20, 0x20	; 32
    307e:	51 e4       	ldi	r21, 0x41	; 65
    3080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	bc 01       	movw	r22, r24
    308a:	cd 01       	movw	r24, r26
    308c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	9c 8b       	std	Y+20, r25	; 0x14
    3096:	8b 8b       	std	Y+19, r24	; 0x13
    3098:	0f c0       	rjmp	.+30     	; 0x30b8 <LCD_sendCommand+0x7be>
    309a:	88 ec       	ldi	r24, 0xC8	; 200
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	9a 8b       	std	Y+18, r25	; 0x12
    30a0:	89 8b       	std	Y+17, r24	; 0x11
    30a2:	89 89       	ldd	r24, Y+17	; 0x11
    30a4:	9a 89       	ldd	r25, Y+18	; 0x12
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	f1 f7       	brne	.-4      	; 0x30a6 <LCD_sendCommand+0x7ac>
    30aa:	9a 8b       	std	Y+18, r25	; 0x12
    30ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ae:	8b 89       	ldd	r24, Y+19	; 0x13
    30b0:	9c 89       	ldd	r25, Y+20	; 0x14
    30b2:	01 97       	sbiw	r24, 0x01	; 1
    30b4:	9c 8b       	std	Y+20, r25	; 0x14
    30b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b8:	8b 89       	ldd	r24, Y+19	; 0x13
    30ba:	9c 89       	ldd	r25, Y+20	; 0x14
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	69 f7       	brne	.-38     	; 0x309a <LCD_sendCommand+0x7a0>
    30c0:	14 c0       	rjmp	.+40     	; 0x30ea <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c2:	6d 89       	ldd	r22, Y+21	; 0x15
    30c4:	7e 89       	ldd	r23, Y+22	; 0x16
    30c6:	8f 89       	ldd	r24, Y+23	; 0x17
    30c8:	98 8d       	ldd	r25, Y+24	; 0x18
    30ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	9c 8b       	std	Y+20, r25	; 0x14
    30d4:	8b 8b       	std	Y+19, r24	; 0x13
    30d6:	8b 89       	ldd	r24, Y+19	; 0x13
    30d8:	9c 89       	ldd	r25, Y+20	; 0x14
    30da:	98 8b       	std	Y+16, r25	; 0x10
    30dc:	8f 87       	std	Y+15, r24	; 0x0f
    30de:	8f 85       	ldd	r24, Y+15	; 0x0f
    30e0:	98 89       	ldd	r25, Y+16	; 0x10
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	f1 f7       	brne	.-4      	; 0x30e2 <LCD_sendCommand+0x7e8>
    30e6:	98 8b       	std	Y+16, r25	; 0x10
    30e8:	8f 87       	std	Y+15, r24	; 0x0f
	}
#endif

	/* Shared Part must be added at the END */
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW); /* De-activating the LCD */
    30ea:	82 e0       	ldi	r24, 0x02	; 2
    30ec:	62 e0       	ldi	r22, 0x02	; 2
    30ee:	40 e0       	ldi	r20, 0x00	; 0
    30f0:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	a0 e8       	ldi	r26, 0x80	; 128
    30fa:	bf e3       	ldi	r27, 0x3F	; 63
    30fc:	8b 87       	std	Y+11, r24	; 0x0b
    30fe:	9c 87       	std	Y+12, r25	; 0x0c
    3100:	ad 87       	std	Y+13, r26	; 0x0d
    3102:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3104:	6b 85       	ldd	r22, Y+11	; 0x0b
    3106:	7c 85       	ldd	r23, Y+12	; 0x0c
    3108:	8d 85       	ldd	r24, Y+13	; 0x0d
    310a:	9e 85       	ldd	r25, Y+14	; 0x0e
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	4a ef       	ldi	r20, 0xFA	; 250
    3112:	54 e4       	ldi	r21, 0x44	; 68
    3114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	8f 83       	std	Y+7, r24	; 0x07
    311e:	98 87       	std	Y+8, r25	; 0x08
    3120:	a9 87       	std	Y+9, r26	; 0x09
    3122:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3124:	6f 81       	ldd	r22, Y+7	; 0x07
    3126:	78 85       	ldd	r23, Y+8	; 0x08
    3128:	89 85       	ldd	r24, Y+9	; 0x09
    312a:	9a 85       	ldd	r25, Y+10	; 0x0a
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	40 e8       	ldi	r20, 0x80	; 128
    3132:	5f e3       	ldi	r21, 0x3F	; 63
    3134:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3138:	88 23       	and	r24, r24
    313a:	2c f4       	brge	.+10     	; 0x3146 <LCD_sendCommand+0x84c>
		__ticks = 1;
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	9e 83       	std	Y+6, r25	; 0x06
    3142:	8d 83       	std	Y+5, r24	; 0x05
    3144:	3f c0       	rjmp	.+126    	; 0x31c4 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    3146:	6f 81       	ldd	r22, Y+7	; 0x07
    3148:	78 85       	ldd	r23, Y+8	; 0x08
    314a:	89 85       	ldd	r24, Y+9	; 0x09
    314c:	9a 85       	ldd	r25, Y+10	; 0x0a
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	3f ef       	ldi	r19, 0xFF	; 255
    3152:	4f e7       	ldi	r20, 0x7F	; 127
    3154:	57 e4       	ldi	r21, 0x47	; 71
    3156:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    315a:	18 16       	cp	r1, r24
    315c:	4c f5       	brge	.+82     	; 0x31b0 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    315e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3160:	7c 85       	ldd	r23, Y+12	; 0x0c
    3162:	8d 85       	ldd	r24, Y+13	; 0x0d
    3164:	9e 85       	ldd	r25, Y+14	; 0x0e
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	40 e2       	ldi	r20, 0x20	; 32
    316c:	51 e4       	ldi	r21, 0x41	; 65
    316e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	bc 01       	movw	r22, r24
    3178:	cd 01       	movw	r24, r26
    317a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	9e 83       	std	Y+6, r25	; 0x06
    3184:	8d 83       	std	Y+5, r24	; 0x05
    3186:	0f c0       	rjmp	.+30     	; 0x31a6 <LCD_sendCommand+0x8ac>
    3188:	88 ec       	ldi	r24, 0xC8	; 200
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	9c 83       	std	Y+4, r25	; 0x04
    318e:	8b 83       	std	Y+3, r24	; 0x03
    3190:	8b 81       	ldd	r24, Y+3	; 0x03
    3192:	9c 81       	ldd	r25, Y+4	; 0x04
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	f1 f7       	brne	.-4      	; 0x3194 <LCD_sendCommand+0x89a>
    3198:	9c 83       	std	Y+4, r25	; 0x04
    319a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    319c:	8d 81       	ldd	r24, Y+5	; 0x05
    319e:	9e 81       	ldd	r25, Y+6	; 0x06
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	9e 83       	std	Y+6, r25	; 0x06
    31a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a6:	8d 81       	ldd	r24, Y+5	; 0x05
    31a8:	9e 81       	ldd	r25, Y+6	; 0x06
    31aa:	00 97       	sbiw	r24, 0x00	; 0
    31ac:	69 f7       	brne	.-38     	; 0x3188 <LCD_sendCommand+0x88e>
    31ae:	14 c0       	rjmp	.+40     	; 0x31d8 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b0:	6f 81       	ldd	r22, Y+7	; 0x07
    31b2:	78 85       	ldd	r23, Y+8	; 0x08
    31b4:	89 85       	ldd	r24, Y+9	; 0x09
    31b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	9e 83       	std	Y+6, r25	; 0x06
    31c2:	8d 83       	std	Y+5, r24	; 0x05
    31c4:	8d 81       	ldd	r24, Y+5	; 0x05
    31c6:	9e 81       	ldd	r25, Y+6	; 0x06
    31c8:	9a 83       	std	Y+2, r25	; 0x02
    31ca:	89 83       	std	Y+1, r24	; 0x01
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	9a 81       	ldd	r25, Y+2	; 0x02
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	f1 f7       	brne	.-4      	; 0x31d0 <LCD_sendCommand+0x8d6>
    31d4:	9a 83       	std	Y+2, r25	; 0x02
    31d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    31d8:	cd 59       	subi	r28, 0x9D	; 157
    31da:	df 4f       	sbci	r29, 0xFF	; 255
    31dc:	0f b6       	in	r0, 0x3f	; 63
    31de:	f8 94       	cli
    31e0:	de bf       	out	0x3e, r29	; 62
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	cd bf       	out	0x3d, r28	; 61
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	08 95       	ret

000031f0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    31f0:	0f 93       	push	r16
    31f2:	1f 93       	push	r17
    31f4:	df 93       	push	r29
    31f6:	cf 93       	push	r28
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
    31fc:	c3 56       	subi	r28, 0x63	; 99
    31fe:	d0 40       	sbci	r29, 0x00	; 0
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61
    320a:	fe 01       	movw	r30, r28
    320c:	ed 59       	subi	r30, 0x9D	; 157
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH); /* Activating the Data Register */
    3212:	82 e0       	ldi	r24, 0x02	; 2
    3214:	63 e0       	ldi	r22, 0x03	; 3
    3216:	41 e0       	ldi	r20, 0x01	; 1
    3218:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
    321c:	fe 01       	movw	r30, r28
    321e:	e1 5a       	subi	r30, 0xA1	; 161
    3220:	ff 4f       	sbci	r31, 0xFF	; 255
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	a0 e8       	ldi	r26, 0x80	; 128
    3228:	bf e3       	ldi	r27, 0x3F	; 63
    322a:	80 83       	st	Z, r24
    322c:	91 83       	std	Z+1, r25	; 0x01
    322e:	a2 83       	std	Z+2, r26	; 0x02
    3230:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3232:	8e 01       	movw	r16, r28
    3234:	05 5a       	subi	r16, 0xA5	; 165
    3236:	1f 4f       	sbci	r17, 0xFF	; 255
    3238:	fe 01       	movw	r30, r28
    323a:	e1 5a       	subi	r30, 0xA1	; 161
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	60 81       	ld	r22, Z
    3240:	71 81       	ldd	r23, Z+1	; 0x01
    3242:	82 81       	ldd	r24, Z+2	; 0x02
    3244:	93 81       	ldd	r25, Z+3	; 0x03
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	4a ef       	ldi	r20, 0xFA	; 250
    324c:	54 e4       	ldi	r21, 0x44	; 68
    324e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	f8 01       	movw	r30, r16
    3258:	80 83       	st	Z, r24
    325a:	91 83       	std	Z+1, r25	; 0x01
    325c:	a2 83       	std	Z+2, r26	; 0x02
    325e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3260:	fe 01       	movw	r30, r28
    3262:	e5 5a       	subi	r30, 0xA5	; 165
    3264:	ff 4f       	sbci	r31, 0xFF	; 255
    3266:	60 81       	ld	r22, Z
    3268:	71 81       	ldd	r23, Z+1	; 0x01
    326a:	82 81       	ldd	r24, Z+2	; 0x02
    326c:	93 81       	ldd	r25, Z+3	; 0x03
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e8       	ldi	r20, 0x80	; 128
    3274:	5f e3       	ldi	r21, 0x3F	; 63
    3276:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    327a:	88 23       	and	r24, r24
    327c:	44 f4       	brge	.+16     	; 0x328e <LCD_displayCharacter+0x9e>
		__ticks = 1;
    327e:	fe 01       	movw	r30, r28
    3280:	e7 5a       	subi	r30, 0xA7	; 167
    3282:	ff 4f       	sbci	r31, 0xFF	; 255
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	91 83       	std	Z+1, r25	; 0x01
    328a:	80 83       	st	Z, r24
    328c:	64 c0       	rjmp	.+200    	; 0x3356 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    328e:	fe 01       	movw	r30, r28
    3290:	e5 5a       	subi	r30, 0xA5	; 165
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	60 81       	ld	r22, Z
    3296:	71 81       	ldd	r23, Z+1	; 0x01
    3298:	82 81       	ldd	r24, Z+2	; 0x02
    329a:	93 81       	ldd	r25, Z+3	; 0x03
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	3f ef       	ldi	r19, 0xFF	; 255
    32a0:	4f e7       	ldi	r20, 0x7F	; 127
    32a2:	57 e4       	ldi	r21, 0x47	; 71
    32a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32a8:	18 16       	cp	r1, r24
    32aa:	0c f0       	brlt	.+2      	; 0x32ae <LCD_displayCharacter+0xbe>
    32ac:	43 c0       	rjmp	.+134    	; 0x3334 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ae:	fe 01       	movw	r30, r28
    32b0:	e1 5a       	subi	r30, 0xA1	; 161
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	60 81       	ld	r22, Z
    32b6:	71 81       	ldd	r23, Z+1	; 0x01
    32b8:	82 81       	ldd	r24, Z+2	; 0x02
    32ba:	93 81       	ldd	r25, Z+3	; 0x03
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e2       	ldi	r20, 0x20	; 32
    32c2:	51 e4       	ldi	r21, 0x41	; 65
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	8e 01       	movw	r16, r28
    32ce:	07 5a       	subi	r16, 0xA7	; 167
    32d0:	1f 4f       	sbci	r17, 0xFF	; 255
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	f8 01       	movw	r30, r16
    32e0:	91 83       	std	Z+1, r25	; 0x01
    32e2:	80 83       	st	Z, r24
    32e4:	1f c0       	rjmp	.+62     	; 0x3324 <LCD_displayCharacter+0x134>
    32e6:	fe 01       	movw	r30, r28
    32e8:	e9 5a       	subi	r30, 0xA9	; 169
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	88 ec       	ldi	r24, 0xC8	; 200
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	91 83       	std	Z+1, r25	; 0x01
    32f2:	80 83       	st	Z, r24
    32f4:	fe 01       	movw	r30, r28
    32f6:	e9 5a       	subi	r30, 0xA9	; 169
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	80 81       	ld	r24, Z
    32fc:	91 81       	ldd	r25, Z+1	; 0x01
    32fe:	01 97       	sbiw	r24, 0x01	; 1
    3300:	f1 f7       	brne	.-4      	; 0x32fe <LCD_displayCharacter+0x10e>
    3302:	fe 01       	movw	r30, r28
    3304:	e9 5a       	subi	r30, 0xA9	; 169
    3306:	ff 4f       	sbci	r31, 0xFF	; 255
    3308:	91 83       	std	Z+1, r25	; 0x01
    330a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330c:	de 01       	movw	r26, r28
    330e:	a7 5a       	subi	r26, 0xA7	; 167
    3310:	bf 4f       	sbci	r27, 0xFF	; 255
    3312:	fe 01       	movw	r30, r28
    3314:	e7 5a       	subi	r30, 0xA7	; 167
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	80 81       	ld	r24, Z
    331a:	91 81       	ldd	r25, Z+1	; 0x01
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	11 96       	adiw	r26, 0x01	; 1
    3320:	9c 93       	st	X, r25
    3322:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3324:	fe 01       	movw	r30, r28
    3326:	e7 5a       	subi	r30, 0xA7	; 167
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	80 81       	ld	r24, Z
    332c:	91 81       	ldd	r25, Z+1	; 0x01
    332e:	00 97       	sbiw	r24, 0x00	; 0
    3330:	d1 f6       	brne	.-76     	; 0x32e6 <LCD_displayCharacter+0xf6>
    3332:	27 c0       	rjmp	.+78     	; 0x3382 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3334:	8e 01       	movw	r16, r28
    3336:	07 5a       	subi	r16, 0xA7	; 167
    3338:	1f 4f       	sbci	r17, 0xFF	; 255
    333a:	fe 01       	movw	r30, r28
    333c:	e5 5a       	subi	r30, 0xA5	; 165
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	60 81       	ld	r22, Z
    3342:	71 81       	ldd	r23, Z+1	; 0x01
    3344:	82 81       	ldd	r24, Z+2	; 0x02
    3346:	93 81       	ldd	r25, Z+3	; 0x03
    3348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	f8 01       	movw	r30, r16
    3352:	91 83       	std	Z+1, r25	; 0x01
    3354:	80 83       	st	Z, r24
    3356:	de 01       	movw	r26, r28
    3358:	ab 5a       	subi	r26, 0xAB	; 171
    335a:	bf 4f       	sbci	r27, 0xFF	; 255
    335c:	fe 01       	movw	r30, r28
    335e:	e7 5a       	subi	r30, 0xA7	; 167
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	80 81       	ld	r24, Z
    3364:	91 81       	ldd	r25, Z+1	; 0x01
    3366:	8d 93       	st	X+, r24
    3368:	9c 93       	st	X, r25
    336a:	fe 01       	movw	r30, r28
    336c:	eb 5a       	subi	r30, 0xAB	; 171
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	80 81       	ld	r24, Z
    3372:	91 81       	ldd	r25, Z+1	; 0x01
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	f1 f7       	brne	.-4      	; 0x3374 <LCD_displayCharacter+0x184>
    3378:	fe 01       	movw	r30, r28
    337a:	eb 5a       	subi	r30, 0xAB	; 171
    337c:	ff 4f       	sbci	r31, 0xFF	; 255
    337e:	91 83       	std	Z+1, r25	; 0x01
    3380:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH); /* Activating the LCD */
    3382:	82 e0       	ldi	r24, 0x02	; 2
    3384:	62 e0       	ldi	r22, 0x02	; 2
    3386:	41 e0       	ldi	r20, 0x01	; 1
    3388:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
    338c:	fe 01       	movw	r30, r28
    338e:	ef 5a       	subi	r30, 0xAF	; 175
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	a0 e8       	ldi	r26, 0x80	; 128
    3398:	bf e3       	ldi	r27, 0x3F	; 63
    339a:	80 83       	st	Z, r24
    339c:	91 83       	std	Z+1, r25	; 0x01
    339e:	a2 83       	std	Z+2, r26	; 0x02
    33a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33a2:	8e 01       	movw	r16, r28
    33a4:	03 5b       	subi	r16, 0xB3	; 179
    33a6:	1f 4f       	sbci	r17, 0xFF	; 255
    33a8:	fe 01       	movw	r30, r28
    33aa:	ef 5a       	subi	r30, 0xAF	; 175
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	60 81       	ld	r22, Z
    33b0:	71 81       	ldd	r23, Z+1	; 0x01
    33b2:	82 81       	ldd	r24, Z+2	; 0x02
    33b4:	93 81       	ldd	r25, Z+3	; 0x03
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	4a ef       	ldi	r20, 0xFA	; 250
    33bc:	54 e4       	ldi	r21, 0x44	; 68
    33be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	f8 01       	movw	r30, r16
    33c8:	80 83       	st	Z, r24
    33ca:	91 83       	std	Z+1, r25	; 0x01
    33cc:	a2 83       	std	Z+2, r26	; 0x02
    33ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33d0:	fe 01       	movw	r30, r28
    33d2:	e3 5b       	subi	r30, 0xB3	; 179
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	60 81       	ld	r22, Z
    33d8:	71 81       	ldd	r23, Z+1	; 0x01
    33da:	82 81       	ldd	r24, Z+2	; 0x02
    33dc:	93 81       	ldd	r25, Z+3	; 0x03
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	40 e8       	ldi	r20, 0x80	; 128
    33e4:	5f e3       	ldi	r21, 0x3F	; 63
    33e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ea:	88 23       	and	r24, r24
    33ec:	44 f4       	brge	.+16     	; 0x33fe <LCD_displayCharacter+0x20e>
		__ticks = 1;
    33ee:	fe 01       	movw	r30, r28
    33f0:	e5 5b       	subi	r30, 0xB5	; 181
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	91 83       	std	Z+1, r25	; 0x01
    33fa:	80 83       	st	Z, r24
    33fc:	64 c0       	rjmp	.+200    	; 0x34c6 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    33fe:	fe 01       	movw	r30, r28
    3400:	e3 5b       	subi	r30, 0xB3	; 179
    3402:	ff 4f       	sbci	r31, 0xFF	; 255
    3404:	60 81       	ld	r22, Z
    3406:	71 81       	ldd	r23, Z+1	; 0x01
    3408:	82 81       	ldd	r24, Z+2	; 0x02
    340a:	93 81       	ldd	r25, Z+3	; 0x03
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	3f ef       	ldi	r19, 0xFF	; 255
    3410:	4f e7       	ldi	r20, 0x7F	; 127
    3412:	57 e4       	ldi	r21, 0x47	; 71
    3414:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3418:	18 16       	cp	r1, r24
    341a:	0c f0       	brlt	.+2      	; 0x341e <LCD_displayCharacter+0x22e>
    341c:	43 c0       	rjmp	.+134    	; 0x34a4 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    341e:	fe 01       	movw	r30, r28
    3420:	ef 5a       	subi	r30, 0xAF	; 175
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	60 81       	ld	r22, Z
    3426:	71 81       	ldd	r23, Z+1	; 0x01
    3428:	82 81       	ldd	r24, Z+2	; 0x02
    342a:	93 81       	ldd	r25, Z+3	; 0x03
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	40 e2       	ldi	r20, 0x20	; 32
    3432:	51 e4       	ldi	r21, 0x41	; 65
    3434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	8e 01       	movw	r16, r28
    343e:	05 5b       	subi	r16, 0xB5	; 181
    3440:	1f 4f       	sbci	r17, 0xFF	; 255
    3442:	bc 01       	movw	r22, r24
    3444:	cd 01       	movw	r24, r26
    3446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	f8 01       	movw	r30, r16
    3450:	91 83       	std	Z+1, r25	; 0x01
    3452:	80 83       	st	Z, r24
    3454:	1f c0       	rjmp	.+62     	; 0x3494 <LCD_displayCharacter+0x2a4>
    3456:	fe 01       	movw	r30, r28
    3458:	e7 5b       	subi	r30, 0xB7	; 183
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	88 ec       	ldi	r24, 0xC8	; 200
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	91 83       	std	Z+1, r25	; 0x01
    3462:	80 83       	st	Z, r24
    3464:	fe 01       	movw	r30, r28
    3466:	e7 5b       	subi	r30, 0xB7	; 183
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	80 81       	ld	r24, Z
    346c:	91 81       	ldd	r25, Z+1	; 0x01
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	f1 f7       	brne	.-4      	; 0x346e <LCD_displayCharacter+0x27e>
    3472:	fe 01       	movw	r30, r28
    3474:	e7 5b       	subi	r30, 0xB7	; 183
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	91 83       	std	Z+1, r25	; 0x01
    347a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    347c:	de 01       	movw	r26, r28
    347e:	a5 5b       	subi	r26, 0xB5	; 181
    3480:	bf 4f       	sbci	r27, 0xFF	; 255
    3482:	fe 01       	movw	r30, r28
    3484:	e5 5b       	subi	r30, 0xB5	; 181
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	80 81       	ld	r24, Z
    348a:	91 81       	ldd	r25, Z+1	; 0x01
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	11 96       	adiw	r26, 0x01	; 1
    3490:	9c 93       	st	X, r25
    3492:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3494:	fe 01       	movw	r30, r28
    3496:	e5 5b       	subi	r30, 0xB5	; 181
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	80 81       	ld	r24, Z
    349c:	91 81       	ldd	r25, Z+1	; 0x01
    349e:	00 97       	sbiw	r24, 0x00	; 0
    34a0:	d1 f6       	brne	.-76     	; 0x3456 <LCD_displayCharacter+0x266>
    34a2:	27 c0       	rjmp	.+78     	; 0x34f2 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34a4:	8e 01       	movw	r16, r28
    34a6:	05 5b       	subi	r16, 0xB5	; 181
    34a8:	1f 4f       	sbci	r17, 0xFF	; 255
    34aa:	fe 01       	movw	r30, r28
    34ac:	e3 5b       	subi	r30, 0xB3	; 179
    34ae:	ff 4f       	sbci	r31, 0xFF	; 255
    34b0:	60 81       	ld	r22, Z
    34b2:	71 81       	ldd	r23, Z+1	; 0x01
    34b4:	82 81       	ldd	r24, Z+2	; 0x02
    34b6:	93 81       	ldd	r25, Z+3	; 0x03
    34b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	f8 01       	movw	r30, r16
    34c2:	91 83       	std	Z+1, r25	; 0x01
    34c4:	80 83       	st	Z, r24
    34c6:	de 01       	movw	r26, r28
    34c8:	a9 5b       	subi	r26, 0xB9	; 185
    34ca:	bf 4f       	sbci	r27, 0xFF	; 255
    34cc:	fe 01       	movw	r30, r28
    34ce:	e5 5b       	subi	r30, 0xB5	; 181
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	80 81       	ld	r24, Z
    34d4:	91 81       	ldd	r25, Z+1	; 0x01
    34d6:	8d 93       	st	X+, r24
    34d8:	9c 93       	st	X, r25
    34da:	fe 01       	movw	r30, r28
    34dc:	e9 5b       	subi	r30, 0xB9	; 185
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	80 81       	ld	r24, Z
    34e2:	91 81       	ldd	r25, Z+1	; 0x01
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	f1 f7       	brne	.-4      	; 0x34e4 <LCD_displayCharacter+0x2f4>
    34e8:	fe 01       	movw	r30, r28
    34ea:	e9 5b       	subi	r30, 0xB9	; 185
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	91 83       	std	Z+1, r25	; 0x01
    34f0:	80 83       	st	Z, r24
		_delay_ms(1);
	}
#else
	{
		/* Sending the LAST four BITS */
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D4_PIN , GET_BIT(data,4));
    34f2:	fe 01       	movw	r30, r28
    34f4:	ed 59       	subi	r30, 0x9D	; 157
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	80 81       	ld	r24, Z
    34fa:	88 2f       	mov	r24, r24
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	80 71       	andi	r24, 0x10	; 16
    3500:	90 70       	andi	r25, 0x00	; 0
    3502:	95 95       	asr	r25
    3504:	87 95       	ror	r24
    3506:	95 95       	asr	r25
    3508:	87 95       	ror	r24
    350a:	95 95       	asr	r25
    350c:	87 95       	ror	r24
    350e:	95 95       	asr	r25
    3510:	87 95       	ror	r24
    3512:	98 2f       	mov	r25, r24
    3514:	82 e0       	ldi	r24, 0x02	; 2
    3516:	64 e0       	ldi	r22, 0x04	; 4
    3518:	49 2f       	mov	r20, r25
    351a:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D5_PIN , GET_BIT(data,5));
    351e:	fe 01       	movw	r30, r28
    3520:	ed 59       	subi	r30, 0x9D	; 157
    3522:	ff 4f       	sbci	r31, 0xFF	; 255
    3524:	80 81       	ld	r24, Z
    3526:	88 2f       	mov	r24, r24
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	80 72       	andi	r24, 0x20	; 32
    352c:	90 70       	andi	r25, 0x00	; 0
    352e:	95 95       	asr	r25
    3530:	87 95       	ror	r24
    3532:	95 95       	asr	r25
    3534:	87 95       	ror	r24
    3536:	95 95       	asr	r25
    3538:	87 95       	ror	r24
    353a:	95 95       	asr	r25
    353c:	87 95       	ror	r24
    353e:	95 95       	asr	r25
    3540:	87 95       	ror	r24
    3542:	98 2f       	mov	r25, r24
    3544:	82 e0       	ldi	r24, 0x02	; 2
    3546:	65 e0       	ldi	r22, 0x05	; 5
    3548:	49 2f       	mov	r20, r25
    354a:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D6_PIN , GET_BIT(data,6));
    354e:	fe 01       	movw	r30, r28
    3550:	ed 59       	subi	r30, 0x9D	; 157
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	80 81       	ld	r24, Z
    3556:	88 2f       	mov	r24, r24
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	80 74       	andi	r24, 0x40	; 64
    355c:	90 70       	andi	r25, 0x00	; 0
    355e:	08 2e       	mov	r0, r24
    3560:	89 2f       	mov	r24, r25
    3562:	00 0c       	add	r0, r0
    3564:	88 1f       	adc	r24, r24
    3566:	99 0b       	sbc	r25, r25
    3568:	00 0c       	add	r0, r0
    356a:	88 1f       	adc	r24, r24
    356c:	99 1f       	adc	r25, r25
    356e:	98 2f       	mov	r25, r24
    3570:	82 e0       	ldi	r24, 0x02	; 2
    3572:	66 e0       	ldi	r22, 0x06	; 6
    3574:	49 2f       	mov	r20, r25
    3576:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D7_PIN , GET_BIT(data,7));
    357a:	fe 01       	movw	r30, r28
    357c:	ed 59       	subi	r30, 0x9D	; 157
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	80 81       	ld	r24, Z
    3582:	98 2f       	mov	r25, r24
    3584:	99 1f       	adc	r25, r25
    3586:	99 27       	eor	r25, r25
    3588:	99 1f       	adc	r25, r25
    358a:	82 e0       	ldi	r24, 0x02	; 2
    358c:	67 e0       	ldi	r22, 0x07	; 7
    358e:	49 2f       	mov	r20, r25
    3590:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
    3594:	fe 01       	movw	r30, r28
    3596:	ed 5b       	subi	r30, 0xBD	; 189
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	a0 e8       	ldi	r26, 0x80	; 128
    35a0:	bf e3       	ldi	r27, 0x3F	; 63
    35a2:	80 83       	st	Z, r24
    35a4:	91 83       	std	Z+1, r25	; 0x01
    35a6:	a2 83       	std	Z+2, r26	; 0x02
    35a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35aa:	8e 01       	movw	r16, r28
    35ac:	01 5c       	subi	r16, 0xC1	; 193
    35ae:	1f 4f       	sbci	r17, 0xFF	; 255
    35b0:	fe 01       	movw	r30, r28
    35b2:	ed 5b       	subi	r30, 0xBD	; 189
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	60 81       	ld	r22, Z
    35b8:	71 81       	ldd	r23, Z+1	; 0x01
    35ba:	82 81       	ldd	r24, Z+2	; 0x02
    35bc:	93 81       	ldd	r25, Z+3	; 0x03
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	4a ef       	ldi	r20, 0xFA	; 250
    35c4:	54 e4       	ldi	r21, 0x44	; 68
    35c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	f8 01       	movw	r30, r16
    35d0:	80 83       	st	Z, r24
    35d2:	91 83       	std	Z+1, r25	; 0x01
    35d4:	a2 83       	std	Z+2, r26	; 0x02
    35d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35d8:	fe 01       	movw	r30, r28
    35da:	ff 96       	adiw	r30, 0x3f	; 63
    35dc:	60 81       	ld	r22, Z
    35de:	71 81       	ldd	r23, Z+1	; 0x01
    35e0:	82 81       	ldd	r24, Z+2	; 0x02
    35e2:	93 81       	ldd	r25, Z+3	; 0x03
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	40 e8       	ldi	r20, 0x80	; 128
    35ea:	5f e3       	ldi	r21, 0x3F	; 63
    35ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35f0:	88 23       	and	r24, r24
    35f2:	2c f4       	brge	.+10     	; 0x35fe <LCD_displayCharacter+0x40e>
		__ticks = 1;
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	9e af       	std	Y+62, r25	; 0x3e
    35fa:	8d af       	std	Y+61, r24	; 0x3d
    35fc:	46 c0       	rjmp	.+140    	; 0x368a <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    35fe:	fe 01       	movw	r30, r28
    3600:	ff 96       	adiw	r30, 0x3f	; 63
    3602:	60 81       	ld	r22, Z
    3604:	71 81       	ldd	r23, Z+1	; 0x01
    3606:	82 81       	ldd	r24, Z+2	; 0x02
    3608:	93 81       	ldd	r25, Z+3	; 0x03
    360a:	20 e0       	ldi	r18, 0x00	; 0
    360c:	3f ef       	ldi	r19, 0xFF	; 255
    360e:	4f e7       	ldi	r20, 0x7F	; 127
    3610:	57 e4       	ldi	r21, 0x47	; 71
    3612:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3616:	18 16       	cp	r1, r24
    3618:	64 f5       	brge	.+88     	; 0x3672 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    361a:	fe 01       	movw	r30, r28
    361c:	ed 5b       	subi	r30, 0xBD	; 189
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	60 81       	ld	r22, Z
    3622:	71 81       	ldd	r23, Z+1	; 0x01
    3624:	82 81       	ldd	r24, Z+2	; 0x02
    3626:	93 81       	ldd	r25, Z+3	; 0x03
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	40 e2       	ldi	r20, 0x20	; 32
    362e:	51 e4       	ldi	r21, 0x41	; 65
    3630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	bc 01       	movw	r22, r24
    363a:	cd 01       	movw	r24, r26
    363c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	9e af       	std	Y+62, r25	; 0x3e
    3646:	8d af       	std	Y+61, r24	; 0x3d
    3648:	0f c0       	rjmp	.+30     	; 0x3668 <LCD_displayCharacter+0x478>
    364a:	88 ec       	ldi	r24, 0xC8	; 200
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	9c af       	std	Y+60, r25	; 0x3c
    3650:	8b af       	std	Y+59, r24	; 0x3b
    3652:	8b ad       	ldd	r24, Y+59	; 0x3b
    3654:	9c ad       	ldd	r25, Y+60	; 0x3c
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	f1 f7       	brne	.-4      	; 0x3656 <LCD_displayCharacter+0x466>
    365a:	9c af       	std	Y+60, r25	; 0x3c
    365c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    365e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3660:	9e ad       	ldd	r25, Y+62	; 0x3e
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	9e af       	std	Y+62, r25	; 0x3e
    3666:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3668:	8d ad       	ldd	r24, Y+61	; 0x3d
    366a:	9e ad       	ldd	r25, Y+62	; 0x3e
    366c:	00 97       	sbiw	r24, 0x00	; 0
    366e:	69 f7       	brne	.-38     	; 0x364a <LCD_displayCharacter+0x45a>
    3670:	16 c0       	rjmp	.+44     	; 0x369e <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3672:	fe 01       	movw	r30, r28
    3674:	ff 96       	adiw	r30, 0x3f	; 63
    3676:	60 81       	ld	r22, Z
    3678:	71 81       	ldd	r23, Z+1	; 0x01
    367a:	82 81       	ldd	r24, Z+2	; 0x02
    367c:	93 81       	ldd	r25, Z+3	; 0x03
    367e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	9e af       	std	Y+62, r25	; 0x3e
    3688:	8d af       	std	Y+61, r24	; 0x3d
    368a:	8d ad       	ldd	r24, Y+61	; 0x3d
    368c:	9e ad       	ldd	r25, Y+62	; 0x3e
    368e:	9a af       	std	Y+58, r25	; 0x3a
    3690:	89 af       	std	Y+57, r24	; 0x39
    3692:	89 ad       	ldd	r24, Y+57	; 0x39
    3694:	9a ad       	ldd	r25, Y+58	; 0x3a
    3696:	01 97       	sbiw	r24, 0x01	; 1
    3698:	f1 f7       	brne	.-4      	; 0x3696 <LCD_displayCharacter+0x4a6>
    369a:	9a af       	std	Y+58, r25	; 0x3a
    369c:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW); /* De-activating the LCD */
    369e:	82 e0       	ldi	r24, 0x02	; 2
    36a0:	62 e0       	ldi	r22, 0x02	; 2
    36a2:	40 e0       	ldi	r20, 0x00	; 0
    36a4:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	a0 e8       	ldi	r26, 0x80	; 128
    36ae:	bf e3       	ldi	r27, 0x3F	; 63
    36b0:	8d ab       	std	Y+53, r24	; 0x35
    36b2:	9e ab       	std	Y+54, r25	; 0x36
    36b4:	af ab       	std	Y+55, r26	; 0x37
    36b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b8:	6d a9       	ldd	r22, Y+53	; 0x35
    36ba:	7e a9       	ldd	r23, Y+54	; 0x36
    36bc:	8f a9       	ldd	r24, Y+55	; 0x37
    36be:	98 ad       	ldd	r25, Y+56	; 0x38
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	4a ef       	ldi	r20, 0xFA	; 250
    36c6:	54 e4       	ldi	r21, 0x44	; 68
    36c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	89 ab       	std	Y+49, r24	; 0x31
    36d2:	9a ab       	std	Y+50, r25	; 0x32
    36d4:	ab ab       	std	Y+51, r26	; 0x33
    36d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36d8:	69 a9       	ldd	r22, Y+49	; 0x31
    36da:	7a a9       	ldd	r23, Y+50	; 0x32
    36dc:	8b a9       	ldd	r24, Y+51	; 0x33
    36de:	9c a9       	ldd	r25, Y+52	; 0x34
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	40 e8       	ldi	r20, 0x80	; 128
    36e6:	5f e3       	ldi	r21, 0x3F	; 63
    36e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36ec:	88 23       	and	r24, r24
    36ee:	2c f4       	brge	.+10     	; 0x36fa <LCD_displayCharacter+0x50a>
		__ticks = 1;
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	98 ab       	std	Y+48, r25	; 0x30
    36f6:	8f a7       	std	Y+47, r24	; 0x2f
    36f8:	3f c0       	rjmp	.+126    	; 0x3778 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    36fa:	69 a9       	ldd	r22, Y+49	; 0x31
    36fc:	7a a9       	ldd	r23, Y+50	; 0x32
    36fe:	8b a9       	ldd	r24, Y+51	; 0x33
    3700:	9c a9       	ldd	r25, Y+52	; 0x34
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	3f ef       	ldi	r19, 0xFF	; 255
    3706:	4f e7       	ldi	r20, 0x7F	; 127
    3708:	57 e4       	ldi	r21, 0x47	; 71
    370a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    370e:	18 16       	cp	r1, r24
    3710:	4c f5       	brge	.+82     	; 0x3764 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3712:	6d a9       	ldd	r22, Y+53	; 0x35
    3714:	7e a9       	ldd	r23, Y+54	; 0x36
    3716:	8f a9       	ldd	r24, Y+55	; 0x37
    3718:	98 ad       	ldd	r25, Y+56	; 0x38
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	40 e2       	ldi	r20, 0x20	; 32
    3720:	51 e4       	ldi	r21, 0x41	; 65
    3722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	bc 01       	movw	r22, r24
    372c:	cd 01       	movw	r24, r26
    372e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	98 ab       	std	Y+48, r25	; 0x30
    3738:	8f a7       	std	Y+47, r24	; 0x2f
    373a:	0f c0       	rjmp	.+30     	; 0x375a <LCD_displayCharacter+0x56a>
    373c:	88 ec       	ldi	r24, 0xC8	; 200
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	9e a7       	std	Y+46, r25	; 0x2e
    3742:	8d a7       	std	Y+45, r24	; 0x2d
    3744:	8d a5       	ldd	r24, Y+45	; 0x2d
    3746:	9e a5       	ldd	r25, Y+46	; 0x2e
    3748:	01 97       	sbiw	r24, 0x01	; 1
    374a:	f1 f7       	brne	.-4      	; 0x3748 <LCD_displayCharacter+0x558>
    374c:	9e a7       	std	Y+46, r25	; 0x2e
    374e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3750:	8f a5       	ldd	r24, Y+47	; 0x2f
    3752:	98 a9       	ldd	r25, Y+48	; 0x30
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	98 ab       	std	Y+48, r25	; 0x30
    3758:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    375a:	8f a5       	ldd	r24, Y+47	; 0x2f
    375c:	98 a9       	ldd	r25, Y+48	; 0x30
    375e:	00 97       	sbiw	r24, 0x00	; 0
    3760:	69 f7       	brne	.-38     	; 0x373c <LCD_displayCharacter+0x54c>
    3762:	14 c0       	rjmp	.+40     	; 0x378c <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3764:	69 a9       	ldd	r22, Y+49	; 0x31
    3766:	7a a9       	ldd	r23, Y+50	; 0x32
    3768:	8b a9       	ldd	r24, Y+51	; 0x33
    376a:	9c a9       	ldd	r25, Y+52	; 0x34
    376c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	98 ab       	std	Y+48, r25	; 0x30
    3776:	8f a7       	std	Y+47, r24	; 0x2f
    3778:	8f a5       	ldd	r24, Y+47	; 0x2f
    377a:	98 a9       	ldd	r25, Y+48	; 0x30
    377c:	9c a7       	std	Y+44, r25	; 0x2c
    377e:	8b a7       	std	Y+43, r24	; 0x2b
    3780:	8b a5       	ldd	r24, Y+43	; 0x2b
    3782:	9c a5       	ldd	r25, Y+44	; 0x2c
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	f1 f7       	brne	.-4      	; 0x3784 <LCD_displayCharacter+0x594>
    3788:	9c a7       	std	Y+44, r25	; 0x2c
    378a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH); /* Enable LCD */
    378c:	82 e0       	ldi	r24, 0x02	; 2
    378e:	62 e0       	ldi	r22, 0x02	; 2
    3790:	41 e0       	ldi	r20, 0x01	; 1
    3792:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
    3796:	80 e0       	ldi	r24, 0x00	; 0
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	a0 e8       	ldi	r26, 0x80	; 128
    379c:	bf e3       	ldi	r27, 0x3F	; 63
    379e:	8f a3       	std	Y+39, r24	; 0x27
    37a0:	98 a7       	std	Y+40, r25	; 0x28
    37a2:	a9 a7       	std	Y+41, r26	; 0x29
    37a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37a6:	6f a1       	ldd	r22, Y+39	; 0x27
    37a8:	78 a5       	ldd	r23, Y+40	; 0x28
    37aa:	89 a5       	ldd	r24, Y+41	; 0x29
    37ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	4a ef       	ldi	r20, 0xFA	; 250
    37b4:	54 e4       	ldi	r21, 0x44	; 68
    37b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	8b a3       	std	Y+35, r24	; 0x23
    37c0:	9c a3       	std	Y+36, r25	; 0x24
    37c2:	ad a3       	std	Y+37, r26	; 0x25
    37c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37c6:	6b a1       	ldd	r22, Y+35	; 0x23
    37c8:	7c a1       	ldd	r23, Y+36	; 0x24
    37ca:	8d a1       	ldd	r24, Y+37	; 0x25
    37cc:	9e a1       	ldd	r25, Y+38	; 0x26
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	40 e8       	ldi	r20, 0x80	; 128
    37d4:	5f e3       	ldi	r21, 0x3F	; 63
    37d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37da:	88 23       	and	r24, r24
    37dc:	2c f4       	brge	.+10     	; 0x37e8 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	9a a3       	std	Y+34, r25	; 0x22
    37e4:	89 a3       	std	Y+33, r24	; 0x21
    37e6:	3f c0       	rjmp	.+126    	; 0x3866 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    37e8:	6b a1       	ldd	r22, Y+35	; 0x23
    37ea:	7c a1       	ldd	r23, Y+36	; 0x24
    37ec:	8d a1       	ldd	r24, Y+37	; 0x25
    37ee:	9e a1       	ldd	r25, Y+38	; 0x26
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	3f ef       	ldi	r19, 0xFF	; 255
    37f4:	4f e7       	ldi	r20, 0x7F	; 127
    37f6:	57 e4       	ldi	r21, 0x47	; 71
    37f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37fc:	18 16       	cp	r1, r24
    37fe:	4c f5       	brge	.+82     	; 0x3852 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3800:	6f a1       	ldd	r22, Y+39	; 0x27
    3802:	78 a5       	ldd	r23, Y+40	; 0x28
    3804:	89 a5       	ldd	r24, Y+41	; 0x29
    3806:	9a a5       	ldd	r25, Y+42	; 0x2a
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	40 e2       	ldi	r20, 0x20	; 32
    380e:	51 e4       	ldi	r21, 0x41	; 65
    3810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	bc 01       	movw	r22, r24
    381a:	cd 01       	movw	r24, r26
    381c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3820:	dc 01       	movw	r26, r24
    3822:	cb 01       	movw	r24, r22
    3824:	9a a3       	std	Y+34, r25	; 0x22
    3826:	89 a3       	std	Y+33, r24	; 0x21
    3828:	0f c0       	rjmp	.+30     	; 0x3848 <LCD_displayCharacter+0x658>
    382a:	88 ec       	ldi	r24, 0xC8	; 200
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	98 a3       	std	Y+32, r25	; 0x20
    3830:	8f 8f       	std	Y+31, r24	; 0x1f
    3832:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3834:	98 a1       	ldd	r25, Y+32	; 0x20
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	f1 f7       	brne	.-4      	; 0x3836 <LCD_displayCharacter+0x646>
    383a:	98 a3       	std	Y+32, r25	; 0x20
    383c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    383e:	89 a1       	ldd	r24, Y+33	; 0x21
    3840:	9a a1       	ldd	r25, Y+34	; 0x22
    3842:	01 97       	sbiw	r24, 0x01	; 1
    3844:	9a a3       	std	Y+34, r25	; 0x22
    3846:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3848:	89 a1       	ldd	r24, Y+33	; 0x21
    384a:	9a a1       	ldd	r25, Y+34	; 0x22
    384c:	00 97       	sbiw	r24, 0x00	; 0
    384e:	69 f7       	brne	.-38     	; 0x382a <LCD_displayCharacter+0x63a>
    3850:	14 c0       	rjmp	.+40     	; 0x387a <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3852:	6b a1       	ldd	r22, Y+35	; 0x23
    3854:	7c a1       	ldd	r23, Y+36	; 0x24
    3856:	8d a1       	ldd	r24, Y+37	; 0x25
    3858:	9e a1       	ldd	r25, Y+38	; 0x26
    385a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	9a a3       	std	Y+34, r25	; 0x22
    3864:	89 a3       	std	Y+33, r24	; 0x21
    3866:	89 a1       	ldd	r24, Y+33	; 0x21
    3868:	9a a1       	ldd	r25, Y+34	; 0x22
    386a:	9e 8f       	std	Y+30, r25	; 0x1e
    386c:	8d 8f       	std	Y+29, r24	; 0x1d
    386e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3870:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	f1 f7       	brne	.-4      	; 0x3872 <LCD_displayCharacter+0x682>
    3876:	9e 8f       	std	Y+30, r25	; 0x1e
    3878:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		/* Sending the FIRST four BITS */
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D4_PIN , GET_BIT(data,0));
    387a:	fe 01       	movw	r30, r28
    387c:	ed 59       	subi	r30, 0x9D	; 157
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	80 81       	ld	r24, Z
    3882:	98 2f       	mov	r25, r24
    3884:	91 70       	andi	r25, 0x01	; 1
    3886:	82 e0       	ldi	r24, 0x02	; 2
    3888:	64 e0       	ldi	r22, 0x04	; 4
    388a:	49 2f       	mov	r20, r25
    388c:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D5_PIN , GET_BIT(data,1));
    3890:	fe 01       	movw	r30, r28
    3892:	ed 59       	subi	r30, 0x9D	; 157
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	80 81       	ld	r24, Z
    3898:	88 2f       	mov	r24, r24
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	82 70       	andi	r24, 0x02	; 2
    389e:	90 70       	andi	r25, 0x00	; 0
    38a0:	95 95       	asr	r25
    38a2:	87 95       	ror	r24
    38a4:	98 2f       	mov	r25, r24
    38a6:	82 e0       	ldi	r24, 0x02	; 2
    38a8:	65 e0       	ldi	r22, 0x05	; 5
    38aa:	49 2f       	mov	r20, r25
    38ac:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D6_PIN , GET_BIT(data,2));
    38b0:	fe 01       	movw	r30, r28
    38b2:	ed 59       	subi	r30, 0x9D	; 157
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	80 81       	ld	r24, Z
    38b8:	88 2f       	mov	r24, r24
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	84 70       	andi	r24, 0x04	; 4
    38be:	90 70       	andi	r25, 0x00	; 0
    38c0:	95 95       	asr	r25
    38c2:	87 95       	ror	r24
    38c4:	95 95       	asr	r25
    38c6:	87 95       	ror	r24
    38c8:	98 2f       	mov	r25, r24
    38ca:	82 e0       	ldi	r24, 0x02	; 2
    38cc:	66 e0       	ldi	r22, 0x06	; 6
    38ce:	49 2f       	mov	r20, r25
    38d0:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D7_PIN , GET_BIT(data,3));
    38d4:	fe 01       	movw	r30, r28
    38d6:	ed 59       	subi	r30, 0x9D	; 157
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	80 81       	ld	r24, Z
    38dc:	88 2f       	mov	r24, r24
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	88 70       	andi	r24, 0x08	; 8
    38e2:	90 70       	andi	r25, 0x00	; 0
    38e4:	95 95       	asr	r25
    38e6:	87 95       	ror	r24
    38e8:	95 95       	asr	r25
    38ea:	87 95       	ror	r24
    38ec:	95 95       	asr	r25
    38ee:	87 95       	ror	r24
    38f0:	98 2f       	mov	r25, r24
    38f2:	82 e0       	ldi	r24, 0x02	; 2
    38f4:	67 e0       	ldi	r22, 0x07	; 7
    38f6:	49 2f       	mov	r20, r25
    38f8:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	a0 e8       	ldi	r26, 0x80	; 128
    3902:	bf e3       	ldi	r27, 0x3F	; 63
    3904:	89 8f       	std	Y+25, r24	; 0x19
    3906:	9a 8f       	std	Y+26, r25	; 0x1a
    3908:	ab 8f       	std	Y+27, r26	; 0x1b
    390a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    390c:	69 8d       	ldd	r22, Y+25	; 0x19
    390e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3910:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3912:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	4a ef       	ldi	r20, 0xFA	; 250
    391a:	54 e4       	ldi	r21, 0x44	; 68
    391c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	8d 8b       	std	Y+21, r24	; 0x15
    3926:	9e 8b       	std	Y+22, r25	; 0x16
    3928:	af 8b       	std	Y+23, r26	; 0x17
    392a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    392c:	6d 89       	ldd	r22, Y+21	; 0x15
    392e:	7e 89       	ldd	r23, Y+22	; 0x16
    3930:	8f 89       	ldd	r24, Y+23	; 0x17
    3932:	98 8d       	ldd	r25, Y+24	; 0x18
    3934:	20 e0       	ldi	r18, 0x00	; 0
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	40 e8       	ldi	r20, 0x80	; 128
    393a:	5f e3       	ldi	r21, 0x3F	; 63
    393c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3940:	88 23       	and	r24, r24
    3942:	2c f4       	brge	.+10     	; 0x394e <LCD_displayCharacter+0x75e>
		__ticks = 1;
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	9c 8b       	std	Y+20, r25	; 0x14
    394a:	8b 8b       	std	Y+19, r24	; 0x13
    394c:	3f c0       	rjmp	.+126    	; 0x39cc <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    394e:	6d 89       	ldd	r22, Y+21	; 0x15
    3950:	7e 89       	ldd	r23, Y+22	; 0x16
    3952:	8f 89       	ldd	r24, Y+23	; 0x17
    3954:	98 8d       	ldd	r25, Y+24	; 0x18
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	3f ef       	ldi	r19, 0xFF	; 255
    395a:	4f e7       	ldi	r20, 0x7F	; 127
    395c:	57 e4       	ldi	r21, 0x47	; 71
    395e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3962:	18 16       	cp	r1, r24
    3964:	4c f5       	brge	.+82     	; 0x39b8 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3966:	69 8d       	ldd	r22, Y+25	; 0x19
    3968:	7a 8d       	ldd	r23, Y+26	; 0x1a
    396a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    396c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	40 e2       	ldi	r20, 0x20	; 32
    3974:	51 e4       	ldi	r21, 0x41	; 65
    3976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	bc 01       	movw	r22, r24
    3980:	cd 01       	movw	r24, r26
    3982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	9c 8b       	std	Y+20, r25	; 0x14
    398c:	8b 8b       	std	Y+19, r24	; 0x13
    398e:	0f c0       	rjmp	.+30     	; 0x39ae <LCD_displayCharacter+0x7be>
    3990:	88 ec       	ldi	r24, 0xC8	; 200
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	9a 8b       	std	Y+18, r25	; 0x12
    3996:	89 8b       	std	Y+17, r24	; 0x11
    3998:	89 89       	ldd	r24, Y+17	; 0x11
    399a:	9a 89       	ldd	r25, Y+18	; 0x12
    399c:	01 97       	sbiw	r24, 0x01	; 1
    399e:	f1 f7       	brne	.-4      	; 0x399c <LCD_displayCharacter+0x7ac>
    39a0:	9a 8b       	std	Y+18, r25	; 0x12
    39a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a4:	8b 89       	ldd	r24, Y+19	; 0x13
    39a6:	9c 89       	ldd	r25, Y+20	; 0x14
    39a8:	01 97       	sbiw	r24, 0x01	; 1
    39aa:	9c 8b       	std	Y+20, r25	; 0x14
    39ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ae:	8b 89       	ldd	r24, Y+19	; 0x13
    39b0:	9c 89       	ldd	r25, Y+20	; 0x14
    39b2:	00 97       	sbiw	r24, 0x00	; 0
    39b4:	69 f7       	brne	.-38     	; 0x3990 <LCD_displayCharacter+0x7a0>
    39b6:	14 c0       	rjmp	.+40     	; 0x39e0 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b8:	6d 89       	ldd	r22, Y+21	; 0x15
    39ba:	7e 89       	ldd	r23, Y+22	; 0x16
    39bc:	8f 89       	ldd	r24, Y+23	; 0x17
    39be:	98 8d       	ldd	r25, Y+24	; 0x18
    39c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	9c 8b       	std	Y+20, r25	; 0x14
    39ca:	8b 8b       	std	Y+19, r24	; 0x13
    39cc:	8b 89       	ldd	r24, Y+19	; 0x13
    39ce:	9c 89       	ldd	r25, Y+20	; 0x14
    39d0:	98 8b       	std	Y+16, r25	; 0x10
    39d2:	8f 87       	std	Y+15, r24	; 0x0f
    39d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    39d6:	98 89       	ldd	r25, Y+16	; 0x10
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	f1 f7       	brne	.-4      	; 0x39d8 <LCD_displayCharacter+0x7e8>
    39dc:	98 8b       	std	Y+16, r25	; 0x10
    39de:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
	}
#endif

	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW); /* Activating the LCD */
    39e0:	82 e0       	ldi	r24, 0x02	; 2
    39e2:	62 e0       	ldi	r22, 0x02	; 2
    39e4:	40 e0       	ldi	r20, 0x00	; 0
    39e6:	0e 94 ca 08 	call	0x1194	; 0x1194 <GPIO_writePin>
    39ea:	80 e0       	ldi	r24, 0x00	; 0
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	a0 e8       	ldi	r26, 0x80	; 128
    39f0:	bf e3       	ldi	r27, 0x3F	; 63
    39f2:	8b 87       	std	Y+11, r24	; 0x0b
    39f4:	9c 87       	std	Y+12, r25	; 0x0c
    39f6:	ad 87       	std	Y+13, r26	; 0x0d
    39f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    39fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    39fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a00:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	4a ef       	ldi	r20, 0xFA	; 250
    3a08:	54 e4       	ldi	r21, 0x44	; 68
    3a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	8f 83       	std	Y+7, r24	; 0x07
    3a14:	98 87       	std	Y+8, r25	; 0x08
    3a16:	a9 87       	std	Y+9, r26	; 0x09
    3a18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1c:	78 85       	ldd	r23, Y+8	; 0x08
    3a1e:	89 85       	ldd	r24, Y+9	; 0x09
    3a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	40 e8       	ldi	r20, 0x80	; 128
    3a28:	5f e3       	ldi	r21, 0x3F	; 63
    3a2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a2e:	88 23       	and	r24, r24
    3a30:	2c f4       	brge	.+10     	; 0x3a3c <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	9e 83       	std	Y+6, r25	; 0x06
    3a38:	8d 83       	std	Y+5, r24	; 0x05
    3a3a:	3f c0       	rjmp	.+126    	; 0x3aba <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a3e:	78 85       	ldd	r23, Y+8	; 0x08
    3a40:	89 85       	ldd	r24, Y+9	; 0x09
    3a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	3f ef       	ldi	r19, 0xFF	; 255
    3a48:	4f e7       	ldi	r20, 0x7F	; 127
    3a4a:	57 e4       	ldi	r21, 0x47	; 71
    3a4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a50:	18 16       	cp	r1, r24
    3a52:	4c f5       	brge	.+82     	; 0x3aa6 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a54:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a56:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a58:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	40 e2       	ldi	r20, 0x20	; 32
    3a62:	51 e4       	ldi	r21, 0x41	; 65
    3a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	bc 01       	movw	r22, r24
    3a6e:	cd 01       	movw	r24, r26
    3a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	9e 83       	std	Y+6, r25	; 0x06
    3a7a:	8d 83       	std	Y+5, r24	; 0x05
    3a7c:	0f c0       	rjmp	.+30     	; 0x3a9c <LCD_displayCharacter+0x8ac>
    3a7e:	88 ec       	ldi	r24, 0xC8	; 200
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	9c 83       	std	Y+4, r25	; 0x04
    3a84:	8b 83       	std	Y+3, r24	; 0x03
    3a86:	8b 81       	ldd	r24, Y+3	; 0x03
    3a88:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8a:	01 97       	sbiw	r24, 0x01	; 1
    3a8c:	f1 f7       	brne	.-4      	; 0x3a8a <LCD_displayCharacter+0x89a>
    3a8e:	9c 83       	std	Y+4, r25	; 0x04
    3a90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a92:	8d 81       	ldd	r24, Y+5	; 0x05
    3a94:	9e 81       	ldd	r25, Y+6	; 0x06
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	9e 83       	std	Y+6, r25	; 0x06
    3a9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa0:	00 97       	sbiw	r24, 0x00	; 0
    3aa2:	69 f7       	brne	.-38     	; 0x3a7e <LCD_displayCharacter+0x88e>
    3aa4:	14 c0       	rjmp	.+40     	; 0x3ace <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    3aa8:	78 85       	ldd	r23, Y+8	; 0x08
    3aaa:	89 85       	ldd	r24, Y+9	; 0x09
    3aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	9e 83       	std	Y+6, r25	; 0x06
    3ab8:	8d 83       	std	Y+5, r24	; 0x05
    3aba:	8d 81       	ldd	r24, Y+5	; 0x05
    3abc:	9e 81       	ldd	r25, Y+6	; 0x06
    3abe:	9a 83       	std	Y+2, r25	; 0x02
    3ac0:	89 83       	std	Y+1, r24	; 0x01
    3ac2:	89 81       	ldd	r24, Y+1	; 0x01
    3ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	f1 f7       	brne	.-4      	; 0x3ac6 <LCD_displayCharacter+0x8d6>
    3aca:	9a 83       	std	Y+2, r25	; 0x02
    3acc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3ace:	cd 59       	subi	r28, 0x9D	; 157
    3ad0:	df 4f       	sbci	r29, 0xFF	; 255
    3ad2:	0f b6       	in	r0, 0x3f	; 63
    3ad4:	f8 94       	cli
    3ad6:	de bf       	out	0x3e, r29	; 62
    3ad8:	0f be       	out	0x3f, r0	; 63
    3ada:	cd bf       	out	0x3d, r28	; 61
    3adc:	cf 91       	pop	r28
    3ade:	df 91       	pop	r29
    3ae0:	1f 91       	pop	r17
    3ae2:	0f 91       	pop	r16
    3ae4:	08 95       	ret

00003ae6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3ae6:	df 93       	push	r29
    3ae8:	cf 93       	push	r28
    3aea:	00 d0       	rcall	.+0      	; 0x3aec <LCD_displayString+0x6>
    3aec:	0f 92       	push	r0
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62
    3af2:	9b 83       	std	Y+3, r25	; 0x03
    3af4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_stringCounter = 0; /* Counting the array of chars */
    3af6:	19 82       	std	Y+1, r1	; 0x01
    3af8:	0e c0       	rjmp	.+28     	; 0x3b16 <LCD_displayString+0x30>

	while(Str[a_stringCounter] != '\0')
	{
		LCD_displayCharacter(Str[a_stringCounter]);
    3afa:	89 81       	ldd	r24, Y+1	; 0x01
    3afc:	28 2f       	mov	r18, r24
    3afe:	30 e0       	ldi	r19, 0x00	; 0
    3b00:	8a 81       	ldd	r24, Y+2	; 0x02
    3b02:	9b 81       	ldd	r25, Y+3	; 0x03
    3b04:	fc 01       	movw	r30, r24
    3b06:	e2 0f       	add	r30, r18
    3b08:	f3 1f       	adc	r31, r19
    3b0a:	80 81       	ld	r24, Z
    3b0c:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <LCD_displayCharacter>
		a_stringCounter++;
    3b10:	89 81       	ldd	r24, Y+1	; 0x01
    3b12:	8f 5f       	subi	r24, 0xFF	; 255
    3b14:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const char *Str)
{
	uint8 a_stringCounter = 0; /* Counting the array of chars */

	while(Str[a_stringCounter] != '\0')
    3b16:	89 81       	ldd	r24, Y+1	; 0x01
    3b18:	28 2f       	mov	r18, r24
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b20:	fc 01       	movw	r30, r24
    3b22:	e2 0f       	add	r30, r18
    3b24:	f3 1f       	adc	r31, r19
    3b26:	80 81       	ld	r24, Z
    3b28:	88 23       	and	r24, r24
    3b2a:	39 f7       	brne	.-50     	; 0x3afa <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[a_stringCounter]);
		a_stringCounter++;
	}
}
    3b2c:	0f 90       	pop	r0
    3b2e:	0f 90       	pop	r0
    3b30:	0f 90       	pop	r0
    3b32:	cf 91       	pop	r28
    3b34:	df 91       	pop	r29
    3b36:	08 95       	ret

00003b38 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3b38:	df 93       	push	r29
    3b3a:	cf 93       	push	r28
    3b3c:	00 d0       	rcall	.+0      	; 0x3b3e <LCD_moveCursor+0x6>
    3b3e:	00 d0       	rcall	.+0      	; 0x3b40 <LCD_moveCursor+0x8>
    3b40:	0f 92       	push	r0
    3b42:	cd b7       	in	r28, 0x3d	; 61
    3b44:	de b7       	in	r29, 0x3e	; 62
    3b46:	8a 83       	std	Y+2, r24	; 0x02
    3b48:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4c:	28 2f       	mov	r18, r24
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	3d 83       	std	Y+5, r19	; 0x05
    3b52:	2c 83       	std	Y+4, r18	; 0x04
    3b54:	8c 81       	ldd	r24, Y+4	; 0x04
    3b56:	9d 81       	ldd	r25, Y+5	; 0x05
    3b58:	81 30       	cpi	r24, 0x01	; 1
    3b5a:	91 05       	cpc	r25, r1
    3b5c:	c1 f0       	breq	.+48     	; 0x3b8e <LCD_moveCursor+0x56>
    3b5e:	2c 81       	ldd	r18, Y+4	; 0x04
    3b60:	3d 81       	ldd	r19, Y+5	; 0x05
    3b62:	22 30       	cpi	r18, 0x02	; 2
    3b64:	31 05       	cpc	r19, r1
    3b66:	2c f4       	brge	.+10     	; 0x3b72 <LCD_moveCursor+0x3a>
    3b68:	8c 81       	ldd	r24, Y+4	; 0x04
    3b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b6c:	00 97       	sbiw	r24, 0x00	; 0
    3b6e:	61 f0       	breq	.+24     	; 0x3b88 <LCD_moveCursor+0x50>
    3b70:	19 c0       	rjmp	.+50     	; 0x3ba4 <LCD_moveCursor+0x6c>
    3b72:	2c 81       	ldd	r18, Y+4	; 0x04
    3b74:	3d 81       	ldd	r19, Y+5	; 0x05
    3b76:	22 30       	cpi	r18, 0x02	; 2
    3b78:	31 05       	cpc	r19, r1
    3b7a:	69 f0       	breq	.+26     	; 0x3b96 <LCD_moveCursor+0x5e>
    3b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b7e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b80:	83 30       	cpi	r24, 0x03	; 3
    3b82:	91 05       	cpc	r25, r1
    3b84:	61 f0       	breq	.+24     	; 0x3b9e <LCD_moveCursor+0x66>
    3b86:	0e c0       	rjmp	.+28     	; 0x3ba4 <LCD_moveCursor+0x6c>
	{
	case 0:
		a_lcd_memory_address=col;
    3b88:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8a:	89 83       	std	Y+1, r24	; 0x01
    3b8c:	0b c0       	rjmp	.+22     	; 0x3ba4 <LCD_moveCursor+0x6c>
		break;
	case 1:
		a_lcd_memory_address=col+0x40;
    3b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b90:	80 5c       	subi	r24, 0xC0	; 192
    3b92:	89 83       	std	Y+1, r24	; 0x01
    3b94:	07 c0       	rjmp	.+14     	; 0x3ba4 <LCD_moveCursor+0x6c>
		break;
	case 2:
		a_lcd_memory_address=col+0x10;
    3b96:	8b 81       	ldd	r24, Y+3	; 0x03
    3b98:	80 5f       	subi	r24, 0xF0	; 240
    3b9a:	89 83       	std	Y+1, r24	; 0x01
    3b9c:	03 c0       	rjmp	.+6      	; 0x3ba4 <LCD_moveCursor+0x6c>
		break;
	case 3:
		a_lcd_memory_address=col+0x50;
    3b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba0:	80 5b       	subi	r24, 0xB0	; 176
    3ba2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(a_lcd_memory_address | START_AT_FIRST_LINE);
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
    3ba6:	80 68       	ori	r24, 0x80	; 128
    3ba8:	0e 94 7d 14 	call	0x28fa	; 0x28fa <LCD_sendCommand>
}
    3bac:	0f 90       	pop	r0
    3bae:	0f 90       	pop	r0
    3bb0:	0f 90       	pop	r0
    3bb2:	0f 90       	pop	r0
    3bb4:	0f 90       	pop	r0
    3bb6:	cf 91       	pop	r28
    3bb8:	df 91       	pop	r29
    3bba:	08 95       	ret

00003bbc <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3bbc:	df 93       	push	r29
    3bbe:	cf 93       	push	r28
    3bc0:	00 d0       	rcall	.+0      	; 0x3bc2 <LCD_displayStringRowColumn+0x6>
    3bc2:	00 d0       	rcall	.+0      	; 0x3bc4 <LCD_displayStringRowColumn+0x8>
    3bc4:	cd b7       	in	r28, 0x3d	; 61
    3bc6:	de b7       	in	r29, 0x3e	; 62
    3bc8:	89 83       	std	Y+1, r24	; 0x01
    3bca:	6a 83       	std	Y+2, r22	; 0x02
    3bcc:	5c 83       	std	Y+4, r21	; 0x04
    3bce:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3bd0:	89 81       	ldd	r24, Y+1	; 0x01
    3bd2:	6a 81       	ldd	r22, Y+2	; 0x02
    3bd4:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bda:	9c 81       	ldd	r25, Y+4	; 0x04
    3bdc:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <LCD_displayString>
}
    3be0:	0f 90       	pop	r0
    3be2:	0f 90       	pop	r0
    3be4:	0f 90       	pop	r0
    3be6:	0f 90       	pop	r0
    3be8:	cf 91       	pop	r28
    3bea:	df 91       	pop	r29
    3bec:	08 95       	ret

00003bee <LCD_displayCharRowColumn>:
/*
 * Description :
 * Display the required Char in a specified row and column index on the screen
 */
void LCD_displayCharRowColumn(uint8 row,uint8 col,uint8 data)
{
    3bee:	df 93       	push	r29
    3bf0:	cf 93       	push	r28
    3bf2:	00 d0       	rcall	.+0      	; 0x3bf4 <LCD_displayCharRowColumn+0x6>
    3bf4:	0f 92       	push	r0
    3bf6:	cd b7       	in	r28, 0x3d	; 61
    3bf8:	de b7       	in	r29, 0x3e	; 62
    3bfa:	89 83       	std	Y+1, r24	; 0x01
    3bfc:	6a 83       	std	Y+2, r22	; 0x02
    3bfe:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3c00:	89 81       	ldd	r24, Y+1	; 0x01
    3c02:	6a 81       	ldd	r22, Y+2	; 0x02
    3c04:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LCD_moveCursor>
	LCD_displayCharacter(data); /* display the string */
    3c08:	8b 81       	ldd	r24, Y+3	; 0x03
    3c0a:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <LCD_displayCharacter>
}
    3c0e:	0f 90       	pop	r0
    3c10:	0f 90       	pop	r0
    3c12:	0f 90       	pop	r0
    3c14:	cf 91       	pop	r28
    3c16:	df 91       	pop	r29
    3c18:	08 95       	ret

00003c1a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3c1a:	df 93       	push	r29
    3c1c:	cf 93       	push	r28
    3c1e:	cd b7       	in	r28, 0x3d	; 61
    3c20:	de b7       	in	r29, 0x3e	; 62
    3c22:	62 97       	sbiw	r28, 0x12	; 18
    3c24:	0f b6       	in	r0, 0x3f	; 63
    3c26:	f8 94       	cli
    3c28:	de bf       	out	0x3e, r29	; 62
    3c2a:	0f be       	out	0x3f, r0	; 63
    3c2c:	cd bf       	out	0x3d, r28	; 61
    3c2e:	9a 8b       	std	Y+18, r25	; 0x12
    3c30:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; 				/* String to hold the ascii result */
	itoa(data,buff,10); 		/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3c32:	89 89       	ldd	r24, Y+17	; 0x11
    3c34:	9a 89       	ldd	r25, Y+18	; 0x12
    3c36:	9e 01       	movw	r18, r28
    3c38:	2f 5f       	subi	r18, 0xFF	; 255
    3c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c3c:	b9 01       	movw	r22, r18
    3c3e:	4a e0       	ldi	r20, 0x0A	; 10
    3c40:	50 e0       	ldi	r21, 0x00	; 0
    3c42:	0e 94 8c 24 	call	0x4918	; 0x4918 <itoa>
	LCD_displayString(buff); 	/* Display the string */
    3c46:	ce 01       	movw	r24, r28
    3c48:	01 96       	adiw	r24, 0x01	; 1
    3c4a:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <LCD_displayString>
}
    3c4e:	62 96       	adiw	r28, 0x12	; 18
    3c50:	0f b6       	in	r0, 0x3f	; 63
    3c52:	f8 94       	cli
    3c54:	de bf       	out	0x3e, r29	; 62
    3c56:	0f be       	out	0x3f, r0	; 63
    3c58:	cd bf       	out	0x3d, r28	; 61
    3c5a:	cf 91       	pop	r28
    3c5c:	df 91       	pop	r29
    3c5e:	08 95       	ret

00003c60 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3c60:	df 93       	push	r29
    3c62:	cf 93       	push	r28
    3c64:	cd b7       	in	r28, 0x3d	; 61
    3c66:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLR_DISPLAY);
    3c68:	81 e0       	ldi	r24, 0x01	; 1
    3c6a:	0e 94 7d 14 	call	0x28fa	; 0x28fa <LCD_sendCommand>
}
    3c6e:	cf 91       	pop	r28
    3c70:	df 91       	pop	r29
    3c72:	08 95       	ret

00003c74 <EEPROM_writeByte>:
 *******************************************************************************/
#include "Header/external_eeprom.h"
#include "../MCAL/Header/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    3c74:	df 93       	push	r29
    3c76:	cf 93       	push	r28
    3c78:	00 d0       	rcall	.+0      	; 0x3c7a <EEPROM_writeByte+0x6>
    3c7a:	00 d0       	rcall	.+0      	; 0x3c7c <EEPROM_writeByte+0x8>
    3c7c:	cd b7       	in	r28, 0x3d	; 61
    3c7e:	de b7       	in	r29, 0x3e	; 62
    3c80:	9a 83       	std	Y+2, r25	; 0x02
    3c82:	89 83       	std	Y+1, r24	; 0x01
    3c84:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    3c86:	0e 94 15 13 	call	0x262a	; 0x262a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    3c8a:	0e 94 6d 13 	call	0x26da	; 0x26da <TWI_getStatus>
    3c8e:	88 30       	cpi	r24, 0x08	; 8
    3c90:	11 f0       	breq	.+4      	; 0x3c96 <EEPROM_writeByte+0x22>
        return ERROR;
    3c92:	1c 82       	std	Y+4, r1	; 0x04
    3c94:	28 c0       	rjmp	.+80     	; 0x3ce6 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9a:	80 70       	andi	r24, 0x00	; 0
    3c9c:	97 70       	andi	r25, 0x07	; 7
    3c9e:	88 0f       	add	r24, r24
    3ca0:	89 2f       	mov	r24, r25
    3ca2:	88 1f       	adc	r24, r24
    3ca4:	99 0b       	sbc	r25, r25
    3ca6:	91 95       	neg	r25
    3ca8:	80 6a       	ori	r24, 0xA0	; 160
    3caa:	0e 94 30 13 	call	0x2660	; 0x2660 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    3cae:	0e 94 6d 13 	call	0x26da	; 0x26da <TWI_getStatus>
    3cb2:	88 31       	cpi	r24, 0x18	; 24
    3cb4:	11 f0       	breq	.+4      	; 0x3cba <EEPROM_writeByte+0x46>
        return ERROR;
    3cb6:	1c 82       	std	Y+4, r1	; 0x04
    3cb8:	16 c0       	rjmp	.+44     	; 0x3ce6 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    3cba:	89 81       	ldd	r24, Y+1	; 0x01
    3cbc:	0e 94 30 13 	call	0x2660	; 0x2660 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    3cc0:	0e 94 6d 13 	call	0x26da	; 0x26da <TWI_getStatus>
    3cc4:	88 32       	cpi	r24, 0x28	; 40
    3cc6:	11 f0       	breq	.+4      	; 0x3ccc <EEPROM_writeByte+0x58>
        return ERROR;
    3cc8:	1c 82       	std	Y+4, r1	; 0x04
    3cca:	0d c0       	rjmp	.+26     	; 0x3ce6 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    3ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cce:	0e 94 30 13 	call	0x2660	; 0x2660 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    3cd2:	0e 94 6d 13 	call	0x26da	; 0x26da <TWI_getStatus>
    3cd6:	88 32       	cpi	r24, 0x28	; 40
    3cd8:	11 f0       	breq	.+4      	; 0x3cde <EEPROM_writeByte+0x6a>
        return ERROR;
    3cda:	1c 82       	std	Y+4, r1	; 0x04
    3cdc:	04 c0       	rjmp	.+8      	; 0x3ce6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    3cde:	0e 94 25 13 	call	0x264a	; 0x264a <TWI_stop>

    return SUCCESS;
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	8c 83       	std	Y+4, r24	; 0x04
    3ce6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3ce8:	0f 90       	pop	r0
    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	0f 90       	pop	r0
    3cf0:	cf 91       	pop	r28
    3cf2:	df 91       	pop	r29
    3cf4:	08 95       	ret

00003cf6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    3cf6:	df 93       	push	r29
    3cf8:	cf 93       	push	r28
    3cfa:	00 d0       	rcall	.+0      	; 0x3cfc <EEPROM_readByte+0x6>
    3cfc:	00 d0       	rcall	.+0      	; 0x3cfe <EEPROM_readByte+0x8>
    3cfe:	0f 92       	push	r0
    3d00:	cd b7       	in	r28, 0x3d	; 61
    3d02:	de b7       	in	r29, 0x3e	; 62
    3d04:	9a 83       	std	Y+2, r25	; 0x02
    3d06:	89 83       	std	Y+1, r24	; 0x01
    3d08:	7c 83       	std	Y+4, r23	; 0x04
    3d0a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    3d0c:	0e 94 15 13 	call	0x262a	; 0x262a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    3d10:	0e 94 6d 13 	call	0x26da	; 0x26da <TWI_getStatus>
    3d14:	88 30       	cpi	r24, 0x08	; 8
    3d16:	11 f0       	breq	.+4      	; 0x3d1c <EEPROM_readByte+0x26>
        return ERROR;
    3d18:	1d 82       	std	Y+5, r1	; 0x05
    3d1a:	44 c0       	rjmp	.+136    	; 0x3da4 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    3d1c:	89 81       	ldd	r24, Y+1	; 0x01
    3d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d20:	80 70       	andi	r24, 0x00	; 0
    3d22:	97 70       	andi	r25, 0x07	; 7
    3d24:	88 0f       	add	r24, r24
    3d26:	89 2f       	mov	r24, r25
    3d28:	88 1f       	adc	r24, r24
    3d2a:	99 0b       	sbc	r25, r25
    3d2c:	91 95       	neg	r25
    3d2e:	80 6a       	ori	r24, 0xA0	; 160
    3d30:	0e 94 30 13 	call	0x2660	; 0x2660 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    3d34:	0e 94 6d 13 	call	0x26da	; 0x26da <TWI_getStatus>
    3d38:	88 31       	cpi	r24, 0x18	; 24
    3d3a:	11 f0       	breq	.+4      	; 0x3d40 <EEPROM_readByte+0x4a>
        return ERROR;
    3d3c:	1d 82       	std	Y+5, r1	; 0x05
    3d3e:	32 c0       	rjmp	.+100    	; 0x3da4 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    3d40:	89 81       	ldd	r24, Y+1	; 0x01
    3d42:	0e 94 30 13 	call	0x2660	; 0x2660 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    3d46:	0e 94 6d 13 	call	0x26da	; 0x26da <TWI_getStatus>
    3d4a:	88 32       	cpi	r24, 0x28	; 40
    3d4c:	11 f0       	breq	.+4      	; 0x3d52 <EEPROM_readByte+0x5c>
        return ERROR;
    3d4e:	1d 82       	std	Y+5, r1	; 0x05
    3d50:	29 c0       	rjmp	.+82     	; 0x3da4 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    3d52:	0e 94 15 13 	call	0x262a	; 0x262a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    3d56:	0e 94 6d 13 	call	0x26da	; 0x26da <TWI_getStatus>
    3d5a:	80 31       	cpi	r24, 0x10	; 16
    3d5c:	11 f0       	breq	.+4      	; 0x3d62 <EEPROM_readByte+0x6c>
        return ERROR;
    3d5e:	1d 82       	std	Y+5, r1	; 0x05
    3d60:	21 c0       	rjmp	.+66     	; 0x3da4 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    3d62:	89 81       	ldd	r24, Y+1	; 0x01
    3d64:	9a 81       	ldd	r25, Y+2	; 0x02
    3d66:	80 70       	andi	r24, 0x00	; 0
    3d68:	97 70       	andi	r25, 0x07	; 7
    3d6a:	88 0f       	add	r24, r24
    3d6c:	89 2f       	mov	r24, r25
    3d6e:	88 1f       	adc	r24, r24
    3d70:	99 0b       	sbc	r25, r25
    3d72:	91 95       	neg	r25
    3d74:	81 6a       	ori	r24, 0xA1	; 161
    3d76:	0e 94 30 13 	call	0x2660	; 0x2660 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    3d7a:	0e 94 6d 13 	call	0x26da	; 0x26da <TWI_getStatus>
    3d7e:	80 34       	cpi	r24, 0x40	; 64
    3d80:	11 f0       	breq	.+4      	; 0x3d86 <EEPROM_readByte+0x90>
        return ERROR;
    3d82:	1d 82       	std	Y+5, r1	; 0x05
    3d84:	0f c0       	rjmp	.+30     	; 0x3da4 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    3d86:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <TWI_readByteWithNACK>
    3d8a:	eb 81       	ldd	r30, Y+3	; 0x03
    3d8c:	fc 81       	ldd	r31, Y+4	; 0x04
    3d8e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    3d90:	0e 94 6d 13 	call	0x26da	; 0x26da <TWI_getStatus>
    3d94:	88 35       	cpi	r24, 0x58	; 88
    3d96:	11 f0       	breq	.+4      	; 0x3d9c <EEPROM_readByte+0xa6>
        return ERROR;
    3d98:	1d 82       	std	Y+5, r1	; 0x05
    3d9a:	04 c0       	rjmp	.+8      	; 0x3da4 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    3d9c:	0e 94 25 13 	call	0x264a	; 0x264a <TWI_stop>

    return SUCCESS;
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	8d 83       	std	Y+5, r24	; 0x05
    3da4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3da6:	0f 90       	pop	r0
    3da8:	0f 90       	pop	r0
    3daa:	0f 90       	pop	r0
    3dac:	0f 90       	pop	r0
    3dae:	0f 90       	pop	r0
    3db0:	cf 91       	pop	r28
    3db2:	df 91       	pop	r29
    3db4:	08 95       	ret

00003db6 <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    3db6:	df 93       	push	r29
    3db8:	cf 93       	push	r28
    3dba:	00 d0       	rcall	.+0      	; 0x3dbc <LM35_getTemperature+0x6>
    3dbc:	0f 92       	push	r0
    3dbe:	cd b7       	in	r28, 0x3d	; 61
    3dc0:	de b7       	in	r29, 0x3e	; 62
	uint8 a_temp_value = 0;
    3dc2:	1b 82       	std	Y+3, r1	; 0x03

	uint16 a_adc_value = 0;
    3dc4:	1a 82       	std	Y+2, r1	; 0x02
    3dc6:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	a_adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    3dc8:	80 e0       	ldi	r24, 0x00	; 0
    3dca:	0e 94 ab 07 	call	0xf56	; 0xf56 <ADC_readChannel>
    3dce:	9a 83       	std	Y+2, r25	; 0x02
    3dd0:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	a_temp_value = (uint8)(((uint32)a_adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    3dd2:	89 81       	ldd	r24, Y+1	; 0x01
    3dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd6:	cc 01       	movw	r24, r24
    3dd8:	a0 e0       	ldi	r26, 0x00	; 0
    3dda:	b0 e0       	ldi	r27, 0x00	; 0
    3ddc:	2e ee       	ldi	r18, 0xEE	; 238
    3dde:	32 e0       	ldi	r19, 0x02	; 2
    3de0:	40 e0       	ldi	r20, 0x00	; 0
    3de2:	50 e0       	ldi	r21, 0x00	; 0
    3de4:	bc 01       	movw	r22, r24
    3de6:	cd 01       	movw	r24, r26
    3de8:	0e 94 14 24 	call	0x4828	; 0x4828 <__mulsi3>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	bc 01       	movw	r22, r24
    3df2:	cd 01       	movw	r24, r26
    3df4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3df8:	dc 01       	movw	r26, r24
    3dfa:	cb 01       	movw	r24, r22
    3dfc:	bc 01       	movw	r22, r24
    3dfe:	cd 01       	movw	r24, r26
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	30 ed       	ldi	r19, 0xD0	; 208
    3e04:	4f eb       	ldi	r20, 0xBF	; 191
    3e06:	54 e4       	ldi	r21, 0x44	; 68
    3e08:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	cb 01       	movw	r24, r22
    3e10:	bc 01       	movw	r22, r24
    3e12:	cd 01       	movw	r24, r26
    3e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	8b 83       	std	Y+3, r24	; 0x03

	return a_temp_value;
    3e1e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3e20:	0f 90       	pop	r0
    3e22:	0f 90       	pop	r0
    3e24:	0f 90       	pop	r0
    3e26:	cf 91       	pop	r28
    3e28:	df 91       	pop	r29
    3e2a:	08 95       	ret

00003e2c <Drivers_init>:


/**-------------------------Function Section------------------------**/
/* Initializing all drivers */
void Drivers_init(void)
{
    3e2c:	df 93       	push	r29
    3e2e:	cf 93       	push	r28
    3e30:	cd b7       	in	r28, 0x3d	; 61
    3e32:	de b7       	in	r29, 0x3e	; 62
    3e34:	e6 97       	sbiw	r28, 0x36	; 54
    3e36:	0f b6       	in	r0, 0x3f	; 63
    3e38:	f8 94       	cli
    3e3a:	de bf       	out	0x3e, r29	; 62
    3e3c:	0f be       	out	0x3f, r0	; 63
    3e3e:	cd bf       	out	0x3d, r28	; 61
	/* Initializing ADC */
	/*
	 * ADC_ReferenceVoltage : AVCC
	 * ADC_Prescaler : F_CPU/128
	 */
	ADC_ConfigType ADC_Config = {AVCC, F_ADC128};
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	89 83       	std	Y+1, r24	; 0x01
    3e44:	87 e0       	ldi	r24, 0x07	; 7
    3e46:	8a 83       	std	Y+2, r24	; 0x02
	ADC_init(&ADC_Config);
    3e48:	ce 01       	movw	r24, r28
    3e4a:	01 96       	adiw	r24, 0x01	; 1
    3e4c:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_init>
	/* ---------------------------------------- */

	/* Initializing LCD just for TEST*/
	LCD_init();
    3e50:	0e 94 cb 13 	call	0x2796	; 0x2796 <LCD_init>
	 * UART_STOP_BIT_SELECT : 1-bit
	 * UART_CLOCK_POLARITY : A-sync Rising
	 * baud_rate : 9600
	 *
	 */
	UART_ConfigType UART_Config = {DOUBLE_TR_SPEED,RECEIVE_INT_EN_OFF,TRANSMIT_INT_EN_OFF,EMPTY_INT_EN_OFF,RECEIVER_EN_ON,TRANSMITTER_EN_ON,EIGHT_BIT,UBRRH_REG,ASYNCHRONOUS,PARITY_DISABLE,ONE_BIT,A_Sync_RISING_EDGE,9600};
    3e54:	ce 01       	movw	r24, r28
    3e56:	03 96       	adiw	r24, 0x03	; 3
    3e58:	99 a7       	std	Y+41, r25	; 0x29
    3e5a:	88 a7       	std	Y+40, r24	; 0x28
    3e5c:	e6 e8       	ldi	r30, 0x86	; 134
    3e5e:	f1 e0       	ldi	r31, 0x01	; 1
    3e60:	fb a7       	std	Y+43, r31	; 0x2b
    3e62:	ea a7       	std	Y+42, r30	; 0x2a
    3e64:	f0 e1       	ldi	r31, 0x10	; 16
    3e66:	fc a7       	std	Y+44, r31	; 0x2c
    3e68:	ea a5       	ldd	r30, Y+42	; 0x2a
    3e6a:	fb a5       	ldd	r31, Y+43	; 0x2b
    3e6c:	00 80       	ld	r0, Z
    3e6e:	8a a5       	ldd	r24, Y+42	; 0x2a
    3e70:	9b a5       	ldd	r25, Y+43	; 0x2b
    3e72:	01 96       	adiw	r24, 0x01	; 1
    3e74:	9b a7       	std	Y+43, r25	; 0x2b
    3e76:	8a a7       	std	Y+42, r24	; 0x2a
    3e78:	e8 a5       	ldd	r30, Y+40	; 0x28
    3e7a:	f9 a5       	ldd	r31, Y+41	; 0x29
    3e7c:	00 82       	st	Z, r0
    3e7e:	88 a5       	ldd	r24, Y+40	; 0x28
    3e80:	99 a5       	ldd	r25, Y+41	; 0x29
    3e82:	01 96       	adiw	r24, 0x01	; 1
    3e84:	99 a7       	std	Y+41, r25	; 0x29
    3e86:	88 a7       	std	Y+40, r24	; 0x28
    3e88:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e8a:	91 50       	subi	r25, 0x01	; 1
    3e8c:	9c a7       	std	Y+44, r25	; 0x2c
    3e8e:	ec a5       	ldd	r30, Y+44	; 0x2c
    3e90:	ee 23       	and	r30, r30
    3e92:	51 f7       	brne	.-44     	; 0x3e68 <Drivers_init+0x3c>
	UART_init(&UART_Config);
    3e94:	ce 01       	movw	r24, r28
    3e96:	03 96       	adiw	r24, 0x03	; 3
    3e98:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <UART_init>
	/* ---------------------------------------- */

	/* Initializing Timer0 PWM */
	Timer0_ConfigType Timer0_PWM_Config;
	Timer0_PWM_Config.Timer0_PreScaler = F0_TIMER64; /* F_CPU/64. Assuming F_PWM = 500 Hz */
    3e9c:	83 e0       	ldi	r24, 0x03	; 3
    3e9e:	8b 8b       	std	Y+19, r24	; 0x13
	Timer0_PWM_Init(&Timer0_PWM_Config);
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	43 96       	adiw	r24, 0x13	; 19
    3ea4:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <Timer0_PWM_Init>
	 *  prescalerControl : 1
	 *  callRecControl : No
	 *  address : 0x01
	 *  bit_rate : 400,000 Kbps
	 */
	TWI_ConfigType TWI_Config = {TWI_INT_DISABLED, ACK_OFF, TWI_ENABLED,F_I2C_1, CALL_RECOGNITION_OFF,1,2};
    3ea8:	ce 01       	movw	r24, r28
    3eaa:	4b 96       	adiw	r24, 0x1b	; 27
    3eac:	9e a7       	std	Y+46, r25	; 0x2e
    3eae:	8d a7       	std	Y+45, r24	; 0x2d
    3eb0:	ef e7       	ldi	r30, 0x7F	; 127
    3eb2:	f1 e0       	ldi	r31, 0x01	; 1
    3eb4:	f8 ab       	std	Y+48, r31	; 0x30
    3eb6:	ef a7       	std	Y+47, r30	; 0x2f
    3eb8:	f7 e0       	ldi	r31, 0x07	; 7
    3eba:	f9 ab       	std	Y+49, r31	; 0x31
    3ebc:	ef a5       	ldd	r30, Y+47	; 0x2f
    3ebe:	f8 a9       	ldd	r31, Y+48	; 0x30
    3ec0:	00 80       	ld	r0, Z
    3ec2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ec4:	98 a9       	ldd	r25, Y+48	; 0x30
    3ec6:	01 96       	adiw	r24, 0x01	; 1
    3ec8:	98 ab       	std	Y+48, r25	; 0x30
    3eca:	8f a7       	std	Y+47, r24	; 0x2f
    3ecc:	ed a5       	ldd	r30, Y+45	; 0x2d
    3ece:	fe a5       	ldd	r31, Y+46	; 0x2e
    3ed0:	00 82       	st	Z, r0
    3ed2:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ed4:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ed6:	01 96       	adiw	r24, 0x01	; 1
    3ed8:	9e a7       	std	Y+46, r25	; 0x2e
    3eda:	8d a7       	std	Y+45, r24	; 0x2d
    3edc:	99 a9       	ldd	r25, Y+49	; 0x31
    3ede:	91 50       	subi	r25, 0x01	; 1
    3ee0:	99 ab       	std	Y+49, r25	; 0x31
    3ee2:	e9 a9       	ldd	r30, Y+49	; 0x31
    3ee4:	ee 23       	and	r30, r30
    3ee6:	51 f7       	brne	.-44     	; 0x3ebc <Drivers_init+0x90>
	TWI_init(&TWI_Config);
    3ee8:	ce 01       	movw	r24, r28
    3eea:	4b 96       	adiw	r24, 0x1b	; 27
    3eec:	0e 94 a1 12 	call	0x2542	; 0x2542 <TWI_init>
	 *  TCNT1_Value : 0
	 *  OCR1A_Value : 7813
	 *  OCR1B_Value : ---
	 */
	/* Setting the callback function*/
	Timer1_setCallBackONE(Timer1_Handler);
    3ef0:	85 ef       	ldi	r24, 0xF5	; 245
    3ef2:	9f e1       	ldi	r25, 0x1F	; 31
    3ef4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Timer1_setCallBackONE>
	/* ---------------------------------------- */

	/* Initializing FAN */
	DCMotor_init();
    3ef8:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <DCMotor_init>
	 * controlZero :		Rising
	 * controlOne  :		----
	 * controlTwo  :		----
	 *
	 */
	INT_ConfigType INT0_Config = {INT0_ENABLE, INT1_DISABLE, INT2_DISABLE, RISING_EDGE,0,0};
    3efc:	ce 01       	movw	r24, r28
    3efe:	82 96       	adiw	r24, 0x22	; 34
    3f00:	9b ab       	std	Y+51, r25	; 0x33
    3f02:	8a ab       	std	Y+50, r24	; 0x32
    3f04:	e9 e7       	ldi	r30, 0x79	; 121
    3f06:	f1 e0       	ldi	r31, 0x01	; 1
    3f08:	fd ab       	std	Y+53, r31	; 0x35
    3f0a:	ec ab       	std	Y+52, r30	; 0x34
    3f0c:	f6 e0       	ldi	r31, 0x06	; 6
    3f0e:	fe ab       	std	Y+54, r31	; 0x36
    3f10:	ec a9       	ldd	r30, Y+52	; 0x34
    3f12:	fd a9       	ldd	r31, Y+53	; 0x35
    3f14:	00 80       	ld	r0, Z
    3f16:	8c a9       	ldd	r24, Y+52	; 0x34
    3f18:	9d a9       	ldd	r25, Y+53	; 0x35
    3f1a:	01 96       	adiw	r24, 0x01	; 1
    3f1c:	9d ab       	std	Y+53, r25	; 0x35
    3f1e:	8c ab       	std	Y+52, r24	; 0x34
    3f20:	ea a9       	ldd	r30, Y+50	; 0x32
    3f22:	fb a9       	ldd	r31, Y+51	; 0x33
    3f24:	00 82       	st	Z, r0
    3f26:	8a a9       	ldd	r24, Y+50	; 0x32
    3f28:	9b a9       	ldd	r25, Y+51	; 0x33
    3f2a:	01 96       	adiw	r24, 0x01	; 1
    3f2c:	9b ab       	std	Y+51, r25	; 0x33
    3f2e:	8a ab       	std	Y+50, r24	; 0x32
    3f30:	9e a9       	ldd	r25, Y+54	; 0x36
    3f32:	91 50       	subi	r25, 0x01	; 1
    3f34:	9e ab       	std	Y+54, r25	; 0x36
    3f36:	ee a9       	ldd	r30, Y+54	; 0x36
    3f38:	ee 23       	and	r30, r30
    3f3a:	51 f7       	brne	.-44     	; 0x3f10 <Drivers_init+0xe4>
	INT0_Init(&INT0_Config);
    3f3c:	ce 01       	movw	r24, r28
    3f3e:	82 96       	adiw	r24, 0x22	; 34
    3f40:	0e 94 c3 11 	call	0x2386	; 0x2386 <INT0_Init>
	INT0_setCallBack(INT0_Handler);
    3f44:	81 ee       	ldi	r24, 0xE1	; 225
    3f46:	9f e1       	ldi	r25, 0x1F	; 31
    3f48:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <INT0_setCallBack>
	/* ---------------------------------------- */

	/* Activating Interrupt system */
	SREG |= (1<<7);
    3f4c:	af e5       	ldi	r26, 0x5F	; 95
    3f4e:	b0 e0       	ldi	r27, 0x00	; 0
    3f50:	ef e5       	ldi	r30, 0x5F	; 95
    3f52:	f0 e0       	ldi	r31, 0x00	; 0
    3f54:	80 81       	ld	r24, Z
    3f56:	80 68       	ori	r24, 0x80	; 128
    3f58:	8c 93       	st	X, r24
}
    3f5a:	e6 96       	adiw	r28, 0x36	; 54
    3f5c:	0f b6       	in	r0, 0x3f	; 63
    3f5e:	f8 94       	cli
    3f60:	de bf       	out	0x3e, r29	; 62
    3f62:	0f be       	out	0x3f, r0	; 63
    3f64:	cd bf       	out	0x3d, r28	; 61
    3f66:	cf 91       	pop	r28
    3f68:	df 91       	pop	r29
    3f6a:	08 95       	ret

00003f6c <main>:

/* ------------------------------------------------------------------ */

int main()
{
    3f6c:	df 93       	push	r29
    3f6e:	cf 93       	push	r28
    3f70:	cd b7       	in	r28, 0x3d	; 61
    3f72:	de b7       	in	r29, 0x3e	; 62
	/**-----------------------Local Variables----------------------**/

	/**-----------------------Pre-start Section--------------------**/

	/* Initializing all drivers: UART, DCMotor, Timer0, LCD, Stepper Motor */
	Drivers_init();
    3f74:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <Drivers_init>
	/**-----------------------Main Section-------------------------**/

	while(1)
	{
		/* State Control function */
		State_Control();
    3f78:	0e 94 76 23 	call	0x46ec	; 0x46ec <State_Control>


		if(NORMAL_STATE == g_SystemState)
    3f7c:	80 91 a2 01 	lds	r24, 0x01A2
    3f80:	88 23       	and	r24, r24
    3f82:	51 f4       	brne	.+20     	; 0x3f98 <main+0x2c>
		{
			/* Sync with MCU2 to let it know in which state it should perform */
			while(UART_receiveByte() != CONTROL_READY){}
    3f84:	0e 94 af 10 	call	0x215e	; 0x215e <UART_receiveByte>
    3f88:	80 31       	cpi	r24, 0x10	; 16
    3f8a:	e1 f7       	brne	.-8      	; 0x3f84 <main+0x18>
			UART_sendByte('N'); /* Identifying Normal State */
    3f8c:	8e e4       	ldi	r24, 0x4E	; 78
    3f8e:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_sendByte>

			/* Operate the Normal instructions */
			Normal_State();
    3f92:	0e 94 a7 20 	call	0x414e	; 0x414e <Normal_State>
    3f96:	f0 cf       	rjmp	.-32     	; 0x3f78 <main+0xc>
		}
		else if(EMERGENCY_STATE == g_SystemState)
    3f98:	80 91 a2 01 	lds	r24, 0x01A2
    3f9c:	81 30       	cpi	r24, 0x01	; 1
    3f9e:	51 f4       	brne	.+20     	; 0x3fb4 <main+0x48>
		{
			/* Sync with MCU2 to let it know in which state it should perform */
			while(UART_receiveByte() != CONTROL_READY){}
    3fa0:	0e 94 af 10 	call	0x215e	; 0x215e <UART_receiveByte>
    3fa4:	80 31       	cpi	r24, 0x10	; 16
    3fa6:	e1 f7       	brne	.-8      	; 0x3fa0 <main+0x34>
			UART_sendByte('E'); /* Identifying Emergency State */
    3fa8:	85 e4       	ldi	r24, 0x45	; 69
    3faa:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_sendByte>

			/* Operate the Emergency protocol */
			Emergency_State();
    3fae:	0e 94 1a 22 	call	0x4434	; 0x4434 <Emergency_State>
    3fb2:	e2 cf       	rjmp	.-60     	; 0x3f78 <main+0xc>
		}
		else if(ABNORMAL_STATE == g_SystemState)
    3fb4:	80 91 a2 01 	lds	r24, 0x01A2
    3fb8:	82 30       	cpi	r24, 0x02	; 2
    3fba:	f1 f6       	brne	.-68     	; 0x3f78 <main+0xc>
		{
			/* Just call the Abnormal state function */
			Abnormal_State();
    3fbc:	0e 94 c3 22 	call	0x4586	; 0x4586 <Abnormal_State>
    3fc0:	db cf       	rjmp	.-74     	; 0x3f78 <main+0xc>

00003fc2 <INT0_Handler>:
/*
 * Description:
 * Will be called when the push button is used (Interrupt)
 */
void INT0_Handler(void)
{
    3fc2:	df 93       	push	r29
    3fc4:	cf 93       	push	r28
    3fc6:	cd b7       	in	r28, 0x3d	; 61
    3fc8:	de b7       	in	r29, 0x3e	; 62
	if(g_PushButtonEN)
    3fca:	80 91 a3 01 	lds	r24, 0x01A3
    3fce:	88 23       	and	r24, r24
    3fd0:	49 f0       	breq	.+18     	; 0x3fe4 <INT0_Handler+0x22>
	{
		/* Shutdown the Machine at MCU2 */
		while(UART_receiveByte() != CONTROL_READY){}
    3fd2:	0e 94 af 10 	call	0x215e	; 0x215e <UART_receiveByte>
    3fd6:	80 31       	cpi	r24, 0x10	; 16
    3fd8:	e1 f7       	brne	.-8      	; 0x3fd2 <INT0_Handler+0x10>
		UART_sendByte('S');
    3fda:	83 e5       	ldi	r24, 0x53	; 83
    3fdc:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_sendByte>

		/* Disable the Push Button */
		g_PushButtonEN = 0;
    3fe0:	10 92 a3 01 	sts	0x01A3, r1
	{
		/* Do nothing */
	}

	return;
}
    3fe4:	cf 91       	pop	r28
    3fe6:	df 91       	pop	r29
    3fe8:	08 95       	ret

00003fea <Timer1_Handler>:
/*
 * Description:
 * Will be called when Timer1 interrupts
 */
void Timer1_Handler(void)
{
    3fea:	df 93       	push	r29
    3fec:	cf 93       	push	r28
    3fee:	cd b7       	in	r28, 0x3d	; 61
    3ff0:	de b7       	in	r29, 0x3e	; 62
    3ff2:	2f 97       	sbiw	r28, 0x0f	; 15
    3ff4:	0f b6       	in	r0, 0x3f	; 63
    3ff6:	f8 94       	cli
    3ff8:	de bf       	out	0x3e, r29	; 62
    3ffa:	0f be       	out	0x3f, r0	; 63
    3ffc:	cd bf       	out	0x3d, r28	; 61
	/**-----------------------Local Variables----------------------**/
	uint8 a_TempVal = 0;
    3ffe:	1f 86       	std	Y+15, r1	; 0x0f
	/**-----------------------Main Section-------------------------**/
	/* De-init Timer1 and Clear Time1_En */
	Timer1_deInit();
    4000:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Timer1_deInit>
	g_Timer1_EN = 0;
    4004:	10 92 a6 01 	sts	0x01A6, r1
	/* Increment the Counter */
	g_Counter++;
    4008:	80 91 a5 01 	lds	r24, 0x01A5
    400c:	8f 5f       	subi	r24, 0xFF	; 255
    400e:	80 93 a5 01 	sts	0x01A5, r24

	/* Check 14 times on the temperature which is equivalent to 7 seconds */
	if(14 > g_Counter)
    4012:	80 91 a5 01 	lds	r24, 0x01A5
    4016:	8e 30       	cpi	r24, 0x0E	; 14
    4018:	08 f0       	brcs	.+2      	; 0x401c <Timer1_Handler+0x32>
    401a:	8b c0       	rjmp	.+278    	; 0x4132 <Timer1_Handler+0x148>
	{

		LCD_moveCursor(0, 0);
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	60 e0       	ldi	r22, 0x00	; 0
    4020:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LCD_moveCursor>
		LCD_intgerToString(g_Counter);
    4024:	80 91 a5 01 	lds	r24, 0x01A5
    4028:	88 2f       	mov	r24, r24
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <LCD_intgerToString>

		/* Read Temperature */
		a_TempVal = LM35_getTemperature();
    4030:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <LM35_getTemperature>
    4034:	8f 87       	std	Y+15, r24	; 0x0f

		if(50 < a_TempVal)
    4036:	8f 85       	ldd	r24, Y+15	; 0x0f
    4038:	83 33       	cpi	r24, 0x33	; 51
    403a:	08 f0       	brcs	.+2      	; 0x403e <Timer1_Handler+0x54>
    403c:	7f c0       	rjmp	.+254    	; 0x413c <Timer1_Handler+0x152>
		}
		else
		{
			/* If it was less than 50 then go back to Normal state */
			/* Write to E2PROM */
			EEPROM_writeByte(E2PROM_STATE_ADD, NORMAL_STATE);
    403e:	80 e1       	ldi	r24, 0x10	; 16
    4040:	91 e0       	ldi	r25, 0x01	; 1
    4042:	60 e0       	ldi	r22, 0x00	; 0
    4044:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <EEPROM_writeByte>
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	a0 e2       	ldi	r26, 0x20	; 32
    404e:	b1 e4       	ldi	r27, 0x41	; 65
    4050:	8b 87       	std	Y+11, r24	; 0x0b
    4052:	9c 87       	std	Y+12, r25	; 0x0c
    4054:	ad 87       	std	Y+13, r26	; 0x0d
    4056:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4058:	6b 85       	ldd	r22, Y+11	; 0x0b
    405a:	7c 85       	ldd	r23, Y+12	; 0x0c
    405c:	8d 85       	ldd	r24, Y+13	; 0x0d
    405e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	30 e0       	ldi	r19, 0x00	; 0
    4064:	4a ef       	ldi	r20, 0xFA	; 250
    4066:	54 e4       	ldi	r21, 0x44	; 68
    4068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	8f 83       	std	Y+7, r24	; 0x07
    4072:	98 87       	std	Y+8, r25	; 0x08
    4074:	a9 87       	std	Y+9, r26	; 0x09
    4076:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4078:	6f 81       	ldd	r22, Y+7	; 0x07
    407a:	78 85       	ldd	r23, Y+8	; 0x08
    407c:	89 85       	ldd	r24, Y+9	; 0x09
    407e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4080:	20 e0       	ldi	r18, 0x00	; 0
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	40 e8       	ldi	r20, 0x80	; 128
    4086:	5f e3       	ldi	r21, 0x3F	; 63
    4088:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    408c:	88 23       	and	r24, r24
    408e:	2c f4       	brge	.+10     	; 0x409a <Timer1_Handler+0xb0>
		__ticks = 1;
    4090:	81 e0       	ldi	r24, 0x01	; 1
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	9e 83       	std	Y+6, r25	; 0x06
    4096:	8d 83       	std	Y+5, r24	; 0x05
    4098:	3f c0       	rjmp	.+126    	; 0x4118 <Timer1_Handler+0x12e>
	else if (__tmp > 65535)
    409a:	6f 81       	ldd	r22, Y+7	; 0x07
    409c:	78 85       	ldd	r23, Y+8	; 0x08
    409e:	89 85       	ldd	r24, Y+9	; 0x09
    40a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40a2:	20 e0       	ldi	r18, 0x00	; 0
    40a4:	3f ef       	ldi	r19, 0xFF	; 255
    40a6:	4f e7       	ldi	r20, 0x7F	; 127
    40a8:	57 e4       	ldi	r21, 0x47	; 71
    40aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40ae:	18 16       	cp	r1, r24
    40b0:	4c f5       	brge	.+82     	; 0x4104 <Timer1_Handler+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    40b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    40b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    40b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	40 e2       	ldi	r20, 0x20	; 32
    40c0:	51 e4       	ldi	r21, 0x41	; 65
    40c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c6:	dc 01       	movw	r26, r24
    40c8:	cb 01       	movw	r24, r22
    40ca:	bc 01       	movw	r22, r24
    40cc:	cd 01       	movw	r24, r26
    40ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	9e 83       	std	Y+6, r25	; 0x06
    40d8:	8d 83       	std	Y+5, r24	; 0x05
    40da:	0f c0       	rjmp	.+30     	; 0x40fa <Timer1_Handler+0x110>
    40dc:	88 ec       	ldi	r24, 0xC8	; 200
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	9c 83       	std	Y+4, r25	; 0x04
    40e2:	8b 83       	std	Y+3, r24	; 0x03
    40e4:	8b 81       	ldd	r24, Y+3	; 0x03
    40e6:	9c 81       	ldd	r25, Y+4	; 0x04
    40e8:	01 97       	sbiw	r24, 0x01	; 1
    40ea:	f1 f7       	brne	.-4      	; 0x40e8 <Timer1_Handler+0xfe>
    40ec:	9c 83       	std	Y+4, r25	; 0x04
    40ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40f0:	8d 81       	ldd	r24, Y+5	; 0x05
    40f2:	9e 81       	ldd	r25, Y+6	; 0x06
    40f4:	01 97       	sbiw	r24, 0x01	; 1
    40f6:	9e 83       	std	Y+6, r25	; 0x06
    40f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40fa:	8d 81       	ldd	r24, Y+5	; 0x05
    40fc:	9e 81       	ldd	r25, Y+6	; 0x06
    40fe:	00 97       	sbiw	r24, 0x00	; 0
    4100:	69 f7       	brne	.-38     	; 0x40dc <Timer1_Handler+0xf2>
    4102:	14 c0       	rjmp	.+40     	; 0x412c <Timer1_Handler+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4104:	6f 81       	ldd	r22, Y+7	; 0x07
    4106:	78 85       	ldd	r23, Y+8	; 0x08
    4108:	89 85       	ldd	r24, Y+9	; 0x09
    410a:	9a 85       	ldd	r25, Y+10	; 0x0a
    410c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4110:	dc 01       	movw	r26, r24
    4112:	cb 01       	movw	r24, r22
    4114:	9e 83       	std	Y+6, r25	; 0x06
    4116:	8d 83       	std	Y+5, r24	; 0x05
    4118:	8d 81       	ldd	r24, Y+5	; 0x05
    411a:	9e 81       	ldd	r25, Y+6	; 0x06
    411c:	9a 83       	std	Y+2, r25	; 0x02
    411e:	89 83       	std	Y+1, r24	; 0x01
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	9a 81       	ldd	r25, Y+2	; 0x02
    4124:	01 97       	sbiw	r24, 0x01	; 1
    4126:	f1 f7       	brne	.-4      	; 0x4124 <Timer1_Handler+0x13a>
    4128:	9a 83       	std	Y+2, r25	; 0x02
    412a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);

			/* Clear Counter */
			g_Counter = 0;
    412c:	10 92 a5 01 	sts	0x01A5, r1
    4130:	05 c0       	rjmp	.+10     	; 0x413c <Timer1_Handler+0x152>
		}
	}
	else
	{
		/* Clear Counter */
		g_Counter = 0;
    4132:	10 92 a5 01 	sts	0x01A5, r1

		/* Enable the Reset */
		g_ResetEnable = 1;
    4136:	81 e0       	ldi	r24, 0x01	; 1
    4138:	80 93 a4 01 	sts	0x01A4, r24
	}

	return;
}
    413c:	2f 96       	adiw	r28, 0x0f	; 15
    413e:	0f b6       	in	r0, 0x3f	; 63
    4140:	f8 94       	cli
    4142:	de bf       	out	0x3e, r29	; 62
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	cd bf       	out	0x3d, r28	; 61
    4148:	cf 91       	pop	r28
    414a:	df 91       	pop	r29
    414c:	08 95       	ret

0000414e <Normal_State>:
/*
 * Description:
 * Controlling Normal state
 */
void Normal_State(void)
{
    414e:	df 93       	push	r29
    4150:	cf 93       	push	r28
    4152:	cd b7       	in	r28, 0x3d	; 61
    4154:	de b7       	in	r29, 0x3e	; 62
    4156:	6d 97       	sbiw	r28, 0x1d	; 29
    4158:	0f b6       	in	r0, 0x3f	; 63
    415a:	f8 94       	cli
    415c:	de bf       	out	0x3e, r29	; 62
    415e:	0f be       	out	0x3f, r0	; 63
    4160:	cd bf       	out	0x3d, r28	; 61
	/**-----------------------Local Variables----------------------**/
	uint8 a_TempVal = 0;
    4162:	1d 8e       	std	Y+29, r1	; 0x1d
	/**-----------------------Main Section-------------------------**/
	/* Write Normal state to E2PROM */
	EEPROM_writeByte(E2PROM_STATE_ADD, NORMAL_STATE);
    4164:	80 e1       	ldi	r24, 0x10	; 16
    4166:	91 e0       	ldi	r25, 0x01	; 1
    4168:	60 e0       	ldi	r22, 0x00	; 0
    416a:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <EEPROM_writeByte>
    416e:	80 e0       	ldi	r24, 0x00	; 0
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	a0 e2       	ldi	r26, 0x20	; 32
    4174:	b1 e4       	ldi	r27, 0x41	; 65
    4176:	89 8f       	std	Y+25, r24	; 0x19
    4178:	9a 8f       	std	Y+26, r25	; 0x1a
    417a:	ab 8f       	std	Y+27, r26	; 0x1b
    417c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    417e:	69 8d       	ldd	r22, Y+25	; 0x19
    4180:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	4a ef       	ldi	r20, 0xFA	; 250
    418c:	54 e4       	ldi	r21, 0x44	; 68
    418e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	8d 8b       	std	Y+21, r24	; 0x15
    4198:	9e 8b       	std	Y+22, r25	; 0x16
    419a:	af 8b       	std	Y+23, r26	; 0x17
    419c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    419e:	6d 89       	ldd	r22, Y+21	; 0x15
    41a0:	7e 89       	ldd	r23, Y+22	; 0x16
    41a2:	8f 89       	ldd	r24, Y+23	; 0x17
    41a4:	98 8d       	ldd	r25, Y+24	; 0x18
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	40 e8       	ldi	r20, 0x80	; 128
    41ac:	5f e3       	ldi	r21, 0x3F	; 63
    41ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41b2:	88 23       	and	r24, r24
    41b4:	2c f4       	brge	.+10     	; 0x41c0 <Normal_State+0x72>
		__ticks = 1;
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	9c 8b       	std	Y+20, r25	; 0x14
    41bc:	8b 8b       	std	Y+19, r24	; 0x13
    41be:	3f c0       	rjmp	.+126    	; 0x423e <Normal_State+0xf0>
	else if (__tmp > 65535)
    41c0:	6d 89       	ldd	r22, Y+21	; 0x15
    41c2:	7e 89       	ldd	r23, Y+22	; 0x16
    41c4:	8f 89       	ldd	r24, Y+23	; 0x17
    41c6:	98 8d       	ldd	r25, Y+24	; 0x18
    41c8:	20 e0       	ldi	r18, 0x00	; 0
    41ca:	3f ef       	ldi	r19, 0xFF	; 255
    41cc:	4f e7       	ldi	r20, 0x7F	; 127
    41ce:	57 e4       	ldi	r21, 0x47	; 71
    41d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41d4:	18 16       	cp	r1, r24
    41d6:	4c f5       	brge	.+82     	; 0x422a <Normal_State+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41d8:	69 8d       	ldd	r22, Y+25	; 0x19
    41da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	40 e2       	ldi	r20, 0x20	; 32
    41e6:	51 e4       	ldi	r21, 0x41	; 65
    41e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ec:	dc 01       	movw	r26, r24
    41ee:	cb 01       	movw	r24, r22
    41f0:	bc 01       	movw	r22, r24
    41f2:	cd 01       	movw	r24, r26
    41f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41f8:	dc 01       	movw	r26, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	9c 8b       	std	Y+20, r25	; 0x14
    41fe:	8b 8b       	std	Y+19, r24	; 0x13
    4200:	0f c0       	rjmp	.+30     	; 0x4220 <Normal_State+0xd2>
    4202:	88 ec       	ldi	r24, 0xC8	; 200
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	9a 8b       	std	Y+18, r25	; 0x12
    4208:	89 8b       	std	Y+17, r24	; 0x11
    420a:	89 89       	ldd	r24, Y+17	; 0x11
    420c:	9a 89       	ldd	r25, Y+18	; 0x12
    420e:	01 97       	sbiw	r24, 0x01	; 1
    4210:	f1 f7       	brne	.-4      	; 0x420e <Normal_State+0xc0>
    4212:	9a 8b       	std	Y+18, r25	; 0x12
    4214:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4216:	8b 89       	ldd	r24, Y+19	; 0x13
    4218:	9c 89       	ldd	r25, Y+20	; 0x14
    421a:	01 97       	sbiw	r24, 0x01	; 1
    421c:	9c 8b       	std	Y+20, r25	; 0x14
    421e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4220:	8b 89       	ldd	r24, Y+19	; 0x13
    4222:	9c 89       	ldd	r25, Y+20	; 0x14
    4224:	00 97       	sbiw	r24, 0x00	; 0
    4226:	69 f7       	brne	.-38     	; 0x4202 <Normal_State+0xb4>
    4228:	14 c0       	rjmp	.+40     	; 0x4252 <Normal_State+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    422a:	6d 89       	ldd	r22, Y+21	; 0x15
    422c:	7e 89       	ldd	r23, Y+22	; 0x16
    422e:	8f 89       	ldd	r24, Y+23	; 0x17
    4230:	98 8d       	ldd	r25, Y+24	; 0x18
    4232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4236:	dc 01       	movw	r26, r24
    4238:	cb 01       	movw	r24, r22
    423a:	9c 8b       	std	Y+20, r25	; 0x14
    423c:	8b 8b       	std	Y+19, r24	; 0x13
    423e:	8b 89       	ldd	r24, Y+19	; 0x13
    4240:	9c 89       	ldd	r25, Y+20	; 0x14
    4242:	98 8b       	std	Y+16, r25	; 0x10
    4244:	8f 87       	std	Y+15, r24	; 0x0f
    4246:	8f 85       	ldd	r24, Y+15	; 0x0f
    4248:	98 89       	ldd	r25, Y+16	; 0x10
    424a:	01 97       	sbiw	r24, 0x01	; 1
    424c:	f1 f7       	brne	.-4      	; 0x424a <Normal_State+0xfc>
    424e:	98 8b       	std	Y+16, r25	; 0x10
    4250:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	/* Read Temperature Sensor */
	a_TempVal = LM35_getTemperature();
    4252:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <LM35_getTemperature>
    4256:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Based on the temperature apply the next steps */
	if(20 > a_TempVal)
    4258:	8d 8d       	ldd	r24, Y+29	; 0x1d
    425a:	84 31       	cpi	r24, 0x14	; 20
    425c:	60 f4       	brcc	.+24     	; 0x4276 <Normal_State+0x128>
	{
		/* Disable the PushButton */
		g_PushButtonEN = 0;
    425e:	10 92 a3 01 	sts	0x01A3, r1

		/* Fan stops */
		DCMotor_stop();
    4262:	0e 94 bd 13 	call	0x277a	; 0x277a <DCMotor_stop>

		/* Enable Green LED at MCU2 */
		while(UART_receiveByte() != CONTROL_READY){}
    4266:	0e 94 af 10 	call	0x215e	; 0x215e <UART_receiveByte>
    426a:	80 31       	cpi	r24, 0x10	; 16
    426c:	e1 f7       	brne	.-8      	; 0x4266 <Normal_State+0x118>
		UART_sendByte('G');
    426e:	87 e4       	ldi	r24, 0x47	; 71
    4270:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_sendByte>
    4274:	d6 c0       	rjmp	.+428    	; 0x4422 <Normal_State+0x2d4>
	}
	else if(20 <= a_TempVal && 40 > a_TempVal)
    4276:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4278:	84 31       	cpi	r24, 0x14	; 20
    427a:	d0 f1       	brcs	.+116    	; 0x42f0 <Normal_State+0x1a2>
    427c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    427e:	88 32       	cpi	r24, 0x28	; 40
    4280:	b8 f5       	brcc	.+110    	; 0x42f0 <Normal_State+0x1a2>
	{
		/* Disable the PushButton */
		g_PushButtonEN = 0;
    4282:	10 92 a3 01 	sts	0x01A3, r1

		/* Enable FAN with PWM depends on Temperature value */
		DcMotor_Rotate(ClockWise, 255*((a_TempVal-20)/20.0));
    4286:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4288:	88 2f       	mov	r24, r24
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	44 97       	sbiw	r24, 0x14	; 20
    428e:	aa 27       	eor	r26, r26
    4290:	97 fd       	sbrc	r25, 7
    4292:	a0 95       	com	r26
    4294:	ba 2f       	mov	r27, r26
    4296:	bc 01       	movw	r22, r24
    4298:	cd 01       	movw	r24, r26
    429a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    429e:	dc 01       	movw	r26, r24
    42a0:	cb 01       	movw	r24, r22
    42a2:	bc 01       	movw	r22, r24
    42a4:	cd 01       	movw	r24, r26
    42a6:	20 e0       	ldi	r18, 0x00	; 0
    42a8:	30 e0       	ldi	r19, 0x00	; 0
    42aa:	40 ea       	ldi	r20, 0xA0	; 160
    42ac:	51 e4       	ldi	r21, 0x41	; 65
    42ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    42b2:	dc 01       	movw	r26, r24
    42b4:	cb 01       	movw	r24, r22
    42b6:	bc 01       	movw	r22, r24
    42b8:	cd 01       	movw	r24, r26
    42ba:	20 e0       	ldi	r18, 0x00	; 0
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	4f e7       	ldi	r20, 0x7F	; 127
    42c0:	53 e4       	ldi	r21, 0x43	; 67
    42c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	bc 01       	movw	r22, r24
    42cc:	cd 01       	movw	r24, r26
    42ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42d2:	dc 01       	movw	r26, r24
    42d4:	cb 01       	movw	r24, r22
    42d6:	98 2f       	mov	r25, r24
    42d8:	80 e0       	ldi	r24, 0x00	; 0
    42da:	69 2f       	mov	r22, r25
    42dc:	0e 94 92 13 	call	0x2724	; 0x2724 <DcMotor_Rotate>

		/* Enable Yellow LED at MCU2 */
		while(UART_receiveByte() != CONTROL_READY){}
    42e0:	0e 94 af 10 	call	0x215e	; 0x215e <UART_receiveByte>
    42e4:	80 31       	cpi	r24, 0x10	; 16
    42e6:	e1 f7       	brne	.-8      	; 0x42e0 <Normal_State+0x192>
		UART_sendByte('Y');
    42e8:	89 e5       	ldi	r24, 0x59	; 89
    42ea:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_sendByte>
    42ee:	99 c0       	rjmp	.+306    	; 0x4422 <Normal_State+0x2d4>
	}
	else if(40 <= a_TempVal && 50 >= a_TempVal)
    42f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42f2:	88 32       	cpi	r24, 0x28	; 40
    42f4:	90 f0       	brcs	.+36     	; 0x431a <Normal_State+0x1cc>
    42f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42f8:	83 33       	cpi	r24, 0x33	; 51
    42fa:	78 f4       	brcc	.+30     	; 0x431a <Normal_State+0x1cc>
	{
		/* Fan Max speed */
		DcMotor_Rotate(ClockWise, 255);
    42fc:	80 e0       	ldi	r24, 0x00	; 0
    42fe:	6f ef       	ldi	r22, 0xFF	; 255
    4300:	0e 94 92 13 	call	0x2724	; 0x2724 <DcMotor_Rotate>

		/* Enable Red LED at MCU2 */
		while(UART_receiveByte() != CONTROL_READY){}
    4304:	0e 94 af 10 	call	0x215e	; 0x215e <UART_receiveByte>
    4308:	80 31       	cpi	r24, 0x10	; 16
    430a:	e1 f7       	brne	.-8      	; 0x4304 <Normal_State+0x1b6>
		UART_sendByte('R');
    430c:	82 e5       	ldi	r24, 0x52	; 82
    430e:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_sendByte>

		/* Enable the Push Button */
		g_PushButtonEN = 1;
    4312:	81 e0       	ldi	r24, 0x01	; 1
    4314:	80 93 a3 01 	sts	0x01A3, r24
    4318:	84 c0       	rjmp	.+264    	; 0x4422 <Normal_State+0x2d4>


	}
	else if(50 < a_TempVal)
    431a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    431c:	83 33       	cpi	r24, 0x33	; 51
    431e:	08 f4       	brcc	.+2      	; 0x4322 <Normal_State+0x1d4>
    4320:	80 c0       	rjmp	.+256    	; 0x4422 <Normal_State+0x2d4>
	{
		/* Disable the PushButton */
		g_PushButtonEN = 0;
    4322:	10 92 a3 01 	sts	0x01A3, r1

		/* If (Temperature > 50) move to Emergency state */
		/* Write to the E2PROM the new state */
		EEPROM_writeByte(E2PROM_STATE_ADD, EMERGENCY_STATE);
    4326:	80 e1       	ldi	r24, 0x10	; 16
    4328:	91 e0       	ldi	r25, 0x01	; 1
    432a:	61 e0       	ldi	r22, 0x01	; 1
    432c:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <EEPROM_writeByte>
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	a0 e2       	ldi	r26, 0x20	; 32
    4336:	b1 e4       	ldi	r27, 0x41	; 65
    4338:	8b 87       	std	Y+11, r24	; 0x0b
    433a:	9c 87       	std	Y+12, r25	; 0x0c
    433c:	ad 87       	std	Y+13, r26	; 0x0d
    433e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4340:	6b 85       	ldd	r22, Y+11	; 0x0b
    4342:	7c 85       	ldd	r23, Y+12	; 0x0c
    4344:	8d 85       	ldd	r24, Y+13	; 0x0d
    4346:	9e 85       	ldd	r25, Y+14	; 0x0e
    4348:	20 e0       	ldi	r18, 0x00	; 0
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	4a ef       	ldi	r20, 0xFA	; 250
    434e:	54 e4       	ldi	r21, 0x44	; 68
    4350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	8f 83       	std	Y+7, r24	; 0x07
    435a:	98 87       	std	Y+8, r25	; 0x08
    435c:	a9 87       	std	Y+9, r26	; 0x09
    435e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4360:	6f 81       	ldd	r22, Y+7	; 0x07
    4362:	78 85       	ldd	r23, Y+8	; 0x08
    4364:	89 85       	ldd	r24, Y+9	; 0x09
    4366:	9a 85       	ldd	r25, Y+10	; 0x0a
    4368:	20 e0       	ldi	r18, 0x00	; 0
    436a:	30 e0       	ldi	r19, 0x00	; 0
    436c:	40 e8       	ldi	r20, 0x80	; 128
    436e:	5f e3       	ldi	r21, 0x3F	; 63
    4370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4374:	88 23       	and	r24, r24
    4376:	2c f4       	brge	.+10     	; 0x4382 <Normal_State+0x234>
		__ticks = 1;
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	9e 83       	std	Y+6, r25	; 0x06
    437e:	8d 83       	std	Y+5, r24	; 0x05
    4380:	3f c0       	rjmp	.+126    	; 0x4400 <Normal_State+0x2b2>
	else if (__tmp > 65535)
    4382:	6f 81       	ldd	r22, Y+7	; 0x07
    4384:	78 85       	ldd	r23, Y+8	; 0x08
    4386:	89 85       	ldd	r24, Y+9	; 0x09
    4388:	9a 85       	ldd	r25, Y+10	; 0x0a
    438a:	20 e0       	ldi	r18, 0x00	; 0
    438c:	3f ef       	ldi	r19, 0xFF	; 255
    438e:	4f e7       	ldi	r20, 0x7F	; 127
    4390:	57 e4       	ldi	r21, 0x47	; 71
    4392:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4396:	18 16       	cp	r1, r24
    4398:	4c f5       	brge	.+82     	; 0x43ec <Normal_State+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    439a:	6b 85       	ldd	r22, Y+11	; 0x0b
    439c:	7c 85       	ldd	r23, Y+12	; 0x0c
    439e:	8d 85       	ldd	r24, Y+13	; 0x0d
    43a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	40 e2       	ldi	r20, 0x20	; 32
    43a8:	51 e4       	ldi	r21, 0x41	; 65
    43aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	bc 01       	movw	r22, r24
    43b4:	cd 01       	movw	r24, r26
    43b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ba:	dc 01       	movw	r26, r24
    43bc:	cb 01       	movw	r24, r22
    43be:	9e 83       	std	Y+6, r25	; 0x06
    43c0:	8d 83       	std	Y+5, r24	; 0x05
    43c2:	0f c0       	rjmp	.+30     	; 0x43e2 <Normal_State+0x294>
    43c4:	88 ec       	ldi	r24, 0xC8	; 200
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	9c 83       	std	Y+4, r25	; 0x04
    43ca:	8b 83       	std	Y+3, r24	; 0x03
    43cc:	8b 81       	ldd	r24, Y+3	; 0x03
    43ce:	9c 81       	ldd	r25, Y+4	; 0x04
    43d0:	01 97       	sbiw	r24, 0x01	; 1
    43d2:	f1 f7       	brne	.-4      	; 0x43d0 <Normal_State+0x282>
    43d4:	9c 83       	std	Y+4, r25	; 0x04
    43d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d8:	8d 81       	ldd	r24, Y+5	; 0x05
    43da:	9e 81       	ldd	r25, Y+6	; 0x06
    43dc:	01 97       	sbiw	r24, 0x01	; 1
    43de:	9e 83       	std	Y+6, r25	; 0x06
    43e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43e2:	8d 81       	ldd	r24, Y+5	; 0x05
    43e4:	9e 81       	ldd	r25, Y+6	; 0x06
    43e6:	00 97       	sbiw	r24, 0x00	; 0
    43e8:	69 f7       	brne	.-38     	; 0x43c4 <Normal_State+0x276>
    43ea:	14 c0       	rjmp	.+40     	; 0x4414 <Normal_State+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ec:	6f 81       	ldd	r22, Y+7	; 0x07
    43ee:	78 85       	ldd	r23, Y+8	; 0x08
    43f0:	89 85       	ldd	r24, Y+9	; 0x09
    43f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f8:	dc 01       	movw	r26, r24
    43fa:	cb 01       	movw	r24, r22
    43fc:	9e 83       	std	Y+6, r25	; 0x06
    43fe:	8d 83       	std	Y+5, r24	; 0x05
    4400:	8d 81       	ldd	r24, Y+5	; 0x05
    4402:	9e 81       	ldd	r25, Y+6	; 0x06
    4404:	9a 83       	std	Y+2, r25	; 0x02
    4406:	89 83       	std	Y+1, r24	; 0x01
    4408:	89 81       	ldd	r24, Y+1	; 0x01
    440a:	9a 81       	ldd	r25, Y+2	; 0x02
    440c:	01 97       	sbiw	r24, 0x01	; 1
    440e:	f1 f7       	brne	.-4      	; 0x440c <Normal_State+0x2be>
    4410:	9a 83       	std	Y+2, r25	; 0x02
    4412:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);

		/* Tell the MCU2 to HOLD till the next update */
		while(UART_receiveByte() != CONTROL_READY){}
    4414:	0e 94 af 10 	call	0x215e	; 0x215e <UART_receiveByte>
    4418:	80 31       	cpi	r24, 0x10	; 16
    441a:	e1 f7       	brne	.-8      	; 0x4414 <Normal_State+0x2c6>
		UART_sendByte('H');
    441c:	88 e4       	ldi	r24, 0x48	; 72
    441e:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_sendByte>

	}

	return;
}
    4422:	6d 96       	adiw	r28, 0x1d	; 29
    4424:	0f b6       	in	r0, 0x3f	; 63
    4426:	f8 94       	cli
    4428:	de bf       	out	0x3e, r29	; 62
    442a:	0f be       	out	0x3f, r0	; 63
    442c:	cd bf       	out	0x3d, r28	; 61
    442e:	cf 91       	pop	r28
    4430:	df 91       	pop	r29
    4432:	08 95       	ret

00004434 <Emergency_State>:
/*
 * Description:
 * Controlling Emergency state
 */
void Emergency_State(void)
{
    4434:	df 93       	push	r29
    4436:	cf 93       	push	r28
    4438:	cd b7       	in	r28, 0x3d	; 61
    443a:	de b7       	in	r29, 0x3e	; 62
    443c:	2e 97       	sbiw	r28, 0x0e	; 14
    443e:	0f b6       	in	r0, 0x3f	; 63
    4440:	f8 94       	cli
    4442:	de bf       	out	0x3e, r29	; 62
    4444:	0f be       	out	0x3f, r0	; 63
    4446:	cd bf       	out	0x3d, r28	; 61
	/**-----------------------Local Variables----------------------**/

	/**-----------------------Main Section-------------------------**/
	if(0 == g_Timer1_EN)
    4448:	80 91 a6 01 	lds	r24, 0x01A6
    444c:	88 23       	and	r24, r24
    444e:	39 f4       	brne	.+14     	; 0x445e <Emergency_State+0x2a>
	{
		/* Start the timer to count 7 seconds (Interrupt every 500ms) */
		Timer1_Init(&TIMER1_Config);
    4450:	88 e6       	ldi	r24, 0x68	; 104
    4452:	91 e0       	ldi	r25, 0x01	; 1
    4454:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <Timer1_Init>
		g_Timer1_EN = 1;
    4458:	81 e0       	ldi	r24, 0x01	; 1
    445a:	80 93 a6 01 	sts	0x01A6, r24
	{
		/* Skip the timer init */
	}

	/* Fan Max speed */
	DcMotor_Rotate(ClockWise, (255));
    445e:	80 e0       	ldi	r24, 0x00	; 0
    4460:	6f ef       	ldi	r22, 0xFF	; 255
    4462:	0e 94 92 13 	call	0x2724	; 0x2724 <DcMotor_Rotate>
	 * If Reset was enabled
	 * Write abnormal state in the E2PROM
	 * Reset MCU1
	 * MCU2> Abnormal state
	 */
	if(g_ResetEnable)
    4466:	80 91 a4 01 	lds	r24, 0x01A4
    446a:	88 23       	and	r24, r24
    446c:	09 f4       	brne	.+2      	; 0x4470 <Emergency_State+0x3c>
    446e:	82 c0       	rjmp	.+260    	; 0x4574 <Emergency_State+0x140>
	{
		g_ResetEnable = 0;
    4470:	10 92 a4 01 	sts	0x01A4, r1

		/* Write Abnormal state at E2PROM */
		EEPROM_writeByte(E2PROM_STATE_ADD, ABNORMAL_STATE);
    4474:	80 e1       	ldi	r24, 0x10	; 16
    4476:	91 e0       	ldi	r25, 0x01	; 1
    4478:	62 e0       	ldi	r22, 0x02	; 2
    447a:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <EEPROM_writeByte>
    447e:	80 e0       	ldi	r24, 0x00	; 0
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	a0 e2       	ldi	r26, 0x20	; 32
    4484:	b1 e4       	ldi	r27, 0x41	; 65
    4486:	8b 87       	std	Y+11, r24	; 0x0b
    4488:	9c 87       	std	Y+12, r25	; 0x0c
    448a:	ad 87       	std	Y+13, r26	; 0x0d
    448c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    448e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4490:	7c 85       	ldd	r23, Y+12	; 0x0c
    4492:	8d 85       	ldd	r24, Y+13	; 0x0d
    4494:	9e 85       	ldd	r25, Y+14	; 0x0e
    4496:	20 e0       	ldi	r18, 0x00	; 0
    4498:	30 e0       	ldi	r19, 0x00	; 0
    449a:	4a ef       	ldi	r20, 0xFA	; 250
    449c:	54 e4       	ldi	r21, 0x44	; 68
    449e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a2:	dc 01       	movw	r26, r24
    44a4:	cb 01       	movw	r24, r22
    44a6:	8f 83       	std	Y+7, r24	; 0x07
    44a8:	98 87       	std	Y+8, r25	; 0x08
    44aa:	a9 87       	std	Y+9, r26	; 0x09
    44ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44ae:	6f 81       	ldd	r22, Y+7	; 0x07
    44b0:	78 85       	ldd	r23, Y+8	; 0x08
    44b2:	89 85       	ldd	r24, Y+9	; 0x09
    44b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    44b6:	20 e0       	ldi	r18, 0x00	; 0
    44b8:	30 e0       	ldi	r19, 0x00	; 0
    44ba:	40 e8       	ldi	r20, 0x80	; 128
    44bc:	5f e3       	ldi	r21, 0x3F	; 63
    44be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44c2:	88 23       	and	r24, r24
    44c4:	2c f4       	brge	.+10     	; 0x44d0 <Emergency_State+0x9c>
		__ticks = 1;
    44c6:	81 e0       	ldi	r24, 0x01	; 1
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	9e 83       	std	Y+6, r25	; 0x06
    44cc:	8d 83       	std	Y+5, r24	; 0x05
    44ce:	3f c0       	rjmp	.+126    	; 0x454e <Emergency_State+0x11a>
	else if (__tmp > 65535)
    44d0:	6f 81       	ldd	r22, Y+7	; 0x07
    44d2:	78 85       	ldd	r23, Y+8	; 0x08
    44d4:	89 85       	ldd	r24, Y+9	; 0x09
    44d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    44d8:	20 e0       	ldi	r18, 0x00	; 0
    44da:	3f ef       	ldi	r19, 0xFF	; 255
    44dc:	4f e7       	ldi	r20, 0x7F	; 127
    44de:	57 e4       	ldi	r21, 0x47	; 71
    44e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44e4:	18 16       	cp	r1, r24
    44e6:	4c f5       	brge	.+82     	; 0x453a <Emergency_State+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    44ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    44ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    44ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    44f0:	20 e0       	ldi	r18, 0x00	; 0
    44f2:	30 e0       	ldi	r19, 0x00	; 0
    44f4:	40 e2       	ldi	r20, 0x20	; 32
    44f6:	51 e4       	ldi	r21, 0x41	; 65
    44f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44fc:	dc 01       	movw	r26, r24
    44fe:	cb 01       	movw	r24, r22
    4500:	bc 01       	movw	r22, r24
    4502:	cd 01       	movw	r24, r26
    4504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4508:	dc 01       	movw	r26, r24
    450a:	cb 01       	movw	r24, r22
    450c:	9e 83       	std	Y+6, r25	; 0x06
    450e:	8d 83       	std	Y+5, r24	; 0x05
    4510:	0f c0       	rjmp	.+30     	; 0x4530 <Emergency_State+0xfc>
    4512:	88 ec       	ldi	r24, 0xC8	; 200
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	9c 83       	std	Y+4, r25	; 0x04
    4518:	8b 83       	std	Y+3, r24	; 0x03
    451a:	8b 81       	ldd	r24, Y+3	; 0x03
    451c:	9c 81       	ldd	r25, Y+4	; 0x04
    451e:	01 97       	sbiw	r24, 0x01	; 1
    4520:	f1 f7       	brne	.-4      	; 0x451e <Emergency_State+0xea>
    4522:	9c 83       	std	Y+4, r25	; 0x04
    4524:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4526:	8d 81       	ldd	r24, Y+5	; 0x05
    4528:	9e 81       	ldd	r25, Y+6	; 0x06
    452a:	01 97       	sbiw	r24, 0x01	; 1
    452c:	9e 83       	std	Y+6, r25	; 0x06
    452e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4530:	8d 81       	ldd	r24, Y+5	; 0x05
    4532:	9e 81       	ldd	r25, Y+6	; 0x06
    4534:	00 97       	sbiw	r24, 0x00	; 0
    4536:	69 f7       	brne	.-38     	; 0x4512 <Emergency_State+0xde>
    4538:	14 c0       	rjmp	.+40     	; 0x4562 <Emergency_State+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    453a:	6f 81       	ldd	r22, Y+7	; 0x07
    453c:	78 85       	ldd	r23, Y+8	; 0x08
    453e:	89 85       	ldd	r24, Y+9	; 0x09
    4540:	9a 85       	ldd	r25, Y+10	; 0x0a
    4542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4546:	dc 01       	movw	r26, r24
    4548:	cb 01       	movw	r24, r22
    454a:	9e 83       	std	Y+6, r25	; 0x06
    454c:	8d 83       	std	Y+5, r24	; 0x05
    454e:	8d 81       	ldd	r24, Y+5	; 0x05
    4550:	9e 81       	ldd	r25, Y+6	; 0x06
    4552:	9a 83       	std	Y+2, r25	; 0x02
    4554:	89 83       	std	Y+1, r24	; 0x01
    4556:	89 81       	ldd	r24, Y+1	; 0x01
    4558:	9a 81       	ldd	r25, Y+2	; 0x02
    455a:	01 97       	sbiw	r24, 0x01	; 1
    455c:	f1 f7       	brne	.-4      	; 0x455a <Emergency_State+0x126>
    455e:	9a 83       	std	Y+2, r25	; 0x02
    4560:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
;

		/* Activate Abnormal protocols at MCU2 */
		while(UART_receiveByte() != CONTROL_READY){}
    4562:	0e 94 af 10 	call	0x215e	; 0x215e <UART_receiveByte>
    4566:	80 31       	cpi	r24, 0x10	; 16
    4568:	e1 f7       	brne	.-8      	; 0x4562 <Emergency_State+0x12e>
		UART_sendByte('A');
    456a:	81 e4       	ldi	r24, 0x41	; 65
    456c:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_sendByte>

		/*Reset MCU1*/
		Reset_Protocol();
    4570:	0e 94 60 23 	call	0x46c0	; 0x46c0 <Reset_Protocol>
	{
		/* Do nothing, Timer1 Interrupt should deal with the state for now */
	}

	return;
}
    4574:	2e 96       	adiw	r28, 0x0e	; 14
    4576:	0f b6       	in	r0, 0x3f	; 63
    4578:	f8 94       	cli
    457a:	de bf       	out	0x3e, r29	; 62
    457c:	0f be       	out	0x3f, r0	; 63
    457e:	cd bf       	out	0x3d, r28	; 61
    4580:	cf 91       	pop	r28
    4582:	df 91       	pop	r29
    4584:	08 95       	ret

00004586 <Abnormal_State>:
/*
 * Description:
 * Controlling Abnormal state
 */
void Abnormal_State(void)
{
    4586:	df 93       	push	r29
    4588:	cf 93       	push	r28
    458a:	cd b7       	in	r28, 0x3d	; 61
    458c:	de b7       	in	r29, 0x3e	; 62
    458e:	2f 97       	sbiw	r28, 0x0f	; 15
    4590:	0f b6       	in	r0, 0x3f	; 63
    4592:	f8 94       	cli
    4594:	de bf       	out	0x3e, r29	; 62
    4596:	0f be       	out	0x3f, r0	; 63
    4598:	cd bf       	out	0x3d, r28	; 61
	/**-----------------------Local Variables----------------------**/
	uint8 a_TempVal = 0;
    459a:	1f 86       	std	Y+15, r1	; 0x0f
	/*
	 * Check on the temperature at first
	 * Because if it was changed then change the state and return from the function
	 */
	/* Read Temperature */
	a_TempVal = LM35_getTemperature();
    459c:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <LM35_getTemperature>
    45a0:	8f 87       	std	Y+15, r24	; 0x0f

	/* Check on temperature */
	if(50 < a_TempVal)
    45a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    45a4:	83 33       	cpi	r24, 0x33	; 51
    45a6:	60 f0       	brcs	.+24     	; 0x45c0 <Abnormal_State+0x3a>
		 * If System was still in Abnormal state
		 * MCU1 > FAN MAX
		 * MCU2 > Red LED, Buzzer on, Stop the machine, Servo 90'C
		 */
		/* FAN MAX */
		DcMotor_Rotate(ClockWise, 255);
    45a8:	80 e0       	ldi	r24, 0x00	; 0
    45aa:	6f ef       	ldi	r22, 0xFF	; 255
    45ac:	0e 94 92 13 	call	0x2724	; 0x2724 <DcMotor_Rotate>

		/* MCU2 > Abnormal state */
		/* Activate Abnormal protocols at MCU2 */
		while(UART_receiveByte() != CONTROL_READY){}
    45b0:	0e 94 af 10 	call	0x215e	; 0x215e <UART_receiveByte>
    45b4:	80 31       	cpi	r24, 0x10	; 16
    45b6:	e1 f7       	brne	.-8      	; 0x45b0 <Abnormal_State+0x2a>
		UART_sendByte('A');
    45b8:	81 e4       	ldi	r24, 0x41	; 65
    45ba:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_sendByte>
    45be:	77 c0       	rjmp	.+238    	; 0x46ae <Abnormal_State+0x128>

	}
	else
	{
		/* Change to normal state */
		EEPROM_writeByte(E2PROM_STATE_ADD, NORMAL_STATE);
    45c0:	80 e1       	ldi	r24, 0x10	; 16
    45c2:	91 e0       	ldi	r25, 0x01	; 1
    45c4:	60 e0       	ldi	r22, 0x00	; 0
    45c6:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <EEPROM_writeByte>
    45ca:	80 e0       	ldi	r24, 0x00	; 0
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	a0 e2       	ldi	r26, 0x20	; 32
    45d0:	b1 e4       	ldi	r27, 0x41	; 65
    45d2:	8b 87       	std	Y+11, r24	; 0x0b
    45d4:	9c 87       	std	Y+12, r25	; 0x0c
    45d6:	ad 87       	std	Y+13, r26	; 0x0d
    45d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45da:	6b 85       	ldd	r22, Y+11	; 0x0b
    45dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    45de:	8d 85       	ldd	r24, Y+13	; 0x0d
    45e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    45e2:	20 e0       	ldi	r18, 0x00	; 0
    45e4:	30 e0       	ldi	r19, 0x00	; 0
    45e6:	4a ef       	ldi	r20, 0xFA	; 250
    45e8:	54 e4       	ldi	r21, 0x44	; 68
    45ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ee:	dc 01       	movw	r26, r24
    45f0:	cb 01       	movw	r24, r22
    45f2:	8f 83       	std	Y+7, r24	; 0x07
    45f4:	98 87       	std	Y+8, r25	; 0x08
    45f6:	a9 87       	std	Y+9, r26	; 0x09
    45f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45fa:	6f 81       	ldd	r22, Y+7	; 0x07
    45fc:	78 85       	ldd	r23, Y+8	; 0x08
    45fe:	89 85       	ldd	r24, Y+9	; 0x09
    4600:	9a 85       	ldd	r25, Y+10	; 0x0a
    4602:	20 e0       	ldi	r18, 0x00	; 0
    4604:	30 e0       	ldi	r19, 0x00	; 0
    4606:	40 e8       	ldi	r20, 0x80	; 128
    4608:	5f e3       	ldi	r21, 0x3F	; 63
    460a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    460e:	88 23       	and	r24, r24
    4610:	2c f4       	brge	.+10     	; 0x461c <Abnormal_State+0x96>
		__ticks = 1;
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	9e 83       	std	Y+6, r25	; 0x06
    4618:	8d 83       	std	Y+5, r24	; 0x05
    461a:	3f c0       	rjmp	.+126    	; 0x469a <Abnormal_State+0x114>
	else if (__tmp > 65535)
    461c:	6f 81       	ldd	r22, Y+7	; 0x07
    461e:	78 85       	ldd	r23, Y+8	; 0x08
    4620:	89 85       	ldd	r24, Y+9	; 0x09
    4622:	9a 85       	ldd	r25, Y+10	; 0x0a
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	3f ef       	ldi	r19, 0xFF	; 255
    4628:	4f e7       	ldi	r20, 0x7F	; 127
    462a:	57 e4       	ldi	r21, 0x47	; 71
    462c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4630:	18 16       	cp	r1, r24
    4632:	4c f5       	brge	.+82     	; 0x4686 <Abnormal_State+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4634:	6b 85       	ldd	r22, Y+11	; 0x0b
    4636:	7c 85       	ldd	r23, Y+12	; 0x0c
    4638:	8d 85       	ldd	r24, Y+13	; 0x0d
    463a:	9e 85       	ldd	r25, Y+14	; 0x0e
    463c:	20 e0       	ldi	r18, 0x00	; 0
    463e:	30 e0       	ldi	r19, 0x00	; 0
    4640:	40 e2       	ldi	r20, 0x20	; 32
    4642:	51 e4       	ldi	r21, 0x41	; 65
    4644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4648:	dc 01       	movw	r26, r24
    464a:	cb 01       	movw	r24, r22
    464c:	bc 01       	movw	r22, r24
    464e:	cd 01       	movw	r24, r26
    4650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4654:	dc 01       	movw	r26, r24
    4656:	cb 01       	movw	r24, r22
    4658:	9e 83       	std	Y+6, r25	; 0x06
    465a:	8d 83       	std	Y+5, r24	; 0x05
    465c:	0f c0       	rjmp	.+30     	; 0x467c <Abnormal_State+0xf6>
    465e:	88 ec       	ldi	r24, 0xC8	; 200
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	9c 83       	std	Y+4, r25	; 0x04
    4664:	8b 83       	std	Y+3, r24	; 0x03
    4666:	8b 81       	ldd	r24, Y+3	; 0x03
    4668:	9c 81       	ldd	r25, Y+4	; 0x04
    466a:	01 97       	sbiw	r24, 0x01	; 1
    466c:	f1 f7       	brne	.-4      	; 0x466a <Abnormal_State+0xe4>
    466e:	9c 83       	std	Y+4, r25	; 0x04
    4670:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4672:	8d 81       	ldd	r24, Y+5	; 0x05
    4674:	9e 81       	ldd	r25, Y+6	; 0x06
    4676:	01 97       	sbiw	r24, 0x01	; 1
    4678:	9e 83       	std	Y+6, r25	; 0x06
    467a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    467c:	8d 81       	ldd	r24, Y+5	; 0x05
    467e:	9e 81       	ldd	r25, Y+6	; 0x06
    4680:	00 97       	sbiw	r24, 0x00	; 0
    4682:	69 f7       	brne	.-38     	; 0x465e <Abnormal_State+0xd8>
    4684:	14 c0       	rjmp	.+40     	; 0x46ae <Abnormal_State+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4686:	6f 81       	ldd	r22, Y+7	; 0x07
    4688:	78 85       	ldd	r23, Y+8	; 0x08
    468a:	89 85       	ldd	r24, Y+9	; 0x09
    468c:	9a 85       	ldd	r25, Y+10	; 0x0a
    468e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4692:	dc 01       	movw	r26, r24
    4694:	cb 01       	movw	r24, r22
    4696:	9e 83       	std	Y+6, r25	; 0x06
    4698:	8d 83       	std	Y+5, r24	; 0x05
    469a:	8d 81       	ldd	r24, Y+5	; 0x05
    469c:	9e 81       	ldd	r25, Y+6	; 0x06
    469e:	9a 83       	std	Y+2, r25	; 0x02
    46a0:	89 83       	std	Y+1, r24	; 0x01
    46a2:	89 81       	ldd	r24, Y+1	; 0x01
    46a4:	9a 81       	ldd	r25, Y+2	; 0x02
    46a6:	01 97       	sbiw	r24, 0x01	; 1
    46a8:	f1 f7       	brne	.-4      	; 0x46a6 <Abnormal_State+0x120>
    46aa:	9a 83       	std	Y+2, r25	; 0x02
    46ac:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	}

	return;
}
    46ae:	2f 96       	adiw	r28, 0x0f	; 15
    46b0:	0f b6       	in	r0, 0x3f	; 63
    46b2:	f8 94       	cli
    46b4:	de bf       	out	0x3e, r29	; 62
    46b6:	0f be       	out	0x3f, r0	; 63
    46b8:	cd bf       	out	0x3d, r28	; 61
    46ba:	cf 91       	pop	r28
    46bc:	df 91       	pop	r29
    46be:	08 95       	ret

000046c0 <Reset_Protocol>:
/*
 * Description:
 * Runs the Reset protocol
 */
void Reset_Protocol(void)
{
    46c0:	df 93       	push	r29
    46c2:	cf 93       	push	r28
    46c4:	cd b7       	in	r28, 0x3d	; 61
    46c6:	de b7       	in	r29, 0x3e	; 62
	cli(); /* Disable interrupts to avoid accidental reset during WDRF clearing */
    46c8:	f8 94       	cli
	MCUCSR |= (1 << WDRF); /* Set the watchdog Reset Flag to trigger a reset */
    46ca:	a4 e5       	ldi	r26, 0x54	; 84
    46cc:	b0 e0       	ldi	r27, 0x00	; 0
    46ce:	e4 e5       	ldi	r30, 0x54	; 84
    46d0:	f0 e0       	ldi	r31, 0x00	; 0
    46d2:	80 81       	ld	r24, Z
    46d4:	88 60       	ori	r24, 0x08	; 8
    46d6:	8c 93       	st	X, r24
	wdt_enable(WDTO_15MS); /* Enable the watchdog timer with the shortest timeout */
    46d8:	88 e1       	ldi	r24, 0x18	; 24
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	28 e0       	ldi	r18, 0x08	; 8
    46de:	0f b6       	in	r0, 0x3f	; 63
    46e0:	f8 94       	cli
    46e2:	a8 95       	wdr
    46e4:	81 bd       	out	0x21, r24	; 33
    46e6:	0f be       	out	0x3f, r0	; 63
    46e8:	21 bd       	out	0x21, r18	; 33
    46ea:	ff cf       	rjmp	.-2      	; 0x46ea <Reset_Protocol+0x2a>

000046ec <State_Control>:
/*
 * Description:
 * Controlling states
 */
void State_Control(void)
{
    46ec:	df 93       	push	r29
    46ee:	cf 93       	push	r28
    46f0:	cd b7       	in	r28, 0x3d	; 61
    46f2:	de b7       	in	r29, 0x3e	; 62
    46f4:	2f 97       	sbiw	r28, 0x0f	; 15
    46f6:	0f b6       	in	r0, 0x3f	; 63
    46f8:	f8 94       	cli
    46fa:	de bf       	out	0x3e, r29	; 62
    46fc:	0f be       	out	0x3f, r0	; 63
    46fe:	cd bf       	out	0x3d, r28	; 61
	/**-----------------------Local Variables----------------------**/
	uint8 a_E2PROM_VAL = 0;
    4700:	1f 86       	std	Y+15, r1	; 0x0f
	/**-----------------------Main Section-------------------------**/
	/* Read the E2PROM at first */
	EEPROM_readByte(E2PROM_STATE_ADD, &a_E2PROM_VAL);
    4702:	9e 01       	movw	r18, r28
    4704:	21 5f       	subi	r18, 0xF1	; 241
    4706:	3f 4f       	sbci	r19, 0xFF	; 255
    4708:	80 e1       	ldi	r24, 0x10	; 16
    470a:	91 e0       	ldi	r25, 0x01	; 1
    470c:	b9 01       	movw	r22, r18
    470e:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <EEPROM_readByte>
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	a0 e2       	ldi	r26, 0x20	; 32
    4718:	b1 e4       	ldi	r27, 0x41	; 65
    471a:	8b 87       	std	Y+11, r24	; 0x0b
    471c:	9c 87       	std	Y+12, r25	; 0x0c
    471e:	ad 87       	std	Y+13, r26	; 0x0d
    4720:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4722:	6b 85       	ldd	r22, Y+11	; 0x0b
    4724:	7c 85       	ldd	r23, Y+12	; 0x0c
    4726:	8d 85       	ldd	r24, Y+13	; 0x0d
    4728:	9e 85       	ldd	r25, Y+14	; 0x0e
    472a:	20 e0       	ldi	r18, 0x00	; 0
    472c:	30 e0       	ldi	r19, 0x00	; 0
    472e:	4a ef       	ldi	r20, 0xFA	; 250
    4730:	54 e4       	ldi	r21, 0x44	; 68
    4732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4736:	dc 01       	movw	r26, r24
    4738:	cb 01       	movw	r24, r22
    473a:	8f 83       	std	Y+7, r24	; 0x07
    473c:	98 87       	std	Y+8, r25	; 0x08
    473e:	a9 87       	std	Y+9, r26	; 0x09
    4740:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4742:	6f 81       	ldd	r22, Y+7	; 0x07
    4744:	78 85       	ldd	r23, Y+8	; 0x08
    4746:	89 85       	ldd	r24, Y+9	; 0x09
    4748:	9a 85       	ldd	r25, Y+10	; 0x0a
    474a:	20 e0       	ldi	r18, 0x00	; 0
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	40 e8       	ldi	r20, 0x80	; 128
    4750:	5f e3       	ldi	r21, 0x3F	; 63
    4752:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4756:	88 23       	and	r24, r24
    4758:	2c f4       	brge	.+10     	; 0x4764 <State_Control+0x78>
		__ticks = 1;
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	9e 83       	std	Y+6, r25	; 0x06
    4760:	8d 83       	std	Y+5, r24	; 0x05
    4762:	3f c0       	rjmp	.+126    	; 0x47e2 <State_Control+0xf6>
	else if (__tmp > 65535)
    4764:	6f 81       	ldd	r22, Y+7	; 0x07
    4766:	78 85       	ldd	r23, Y+8	; 0x08
    4768:	89 85       	ldd	r24, Y+9	; 0x09
    476a:	9a 85       	ldd	r25, Y+10	; 0x0a
    476c:	20 e0       	ldi	r18, 0x00	; 0
    476e:	3f ef       	ldi	r19, 0xFF	; 255
    4770:	4f e7       	ldi	r20, 0x7F	; 127
    4772:	57 e4       	ldi	r21, 0x47	; 71
    4774:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4778:	18 16       	cp	r1, r24
    477a:	4c f5       	brge	.+82     	; 0x47ce <State_Control+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    477c:	6b 85       	ldd	r22, Y+11	; 0x0b
    477e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4780:	8d 85       	ldd	r24, Y+13	; 0x0d
    4782:	9e 85       	ldd	r25, Y+14	; 0x0e
    4784:	20 e0       	ldi	r18, 0x00	; 0
    4786:	30 e0       	ldi	r19, 0x00	; 0
    4788:	40 e2       	ldi	r20, 0x20	; 32
    478a:	51 e4       	ldi	r21, 0x41	; 65
    478c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4790:	dc 01       	movw	r26, r24
    4792:	cb 01       	movw	r24, r22
    4794:	bc 01       	movw	r22, r24
    4796:	cd 01       	movw	r24, r26
    4798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    479c:	dc 01       	movw	r26, r24
    479e:	cb 01       	movw	r24, r22
    47a0:	9e 83       	std	Y+6, r25	; 0x06
    47a2:	8d 83       	std	Y+5, r24	; 0x05
    47a4:	0f c0       	rjmp	.+30     	; 0x47c4 <State_Control+0xd8>
    47a6:	88 ec       	ldi	r24, 0xC8	; 200
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	9c 83       	std	Y+4, r25	; 0x04
    47ac:	8b 83       	std	Y+3, r24	; 0x03
    47ae:	8b 81       	ldd	r24, Y+3	; 0x03
    47b0:	9c 81       	ldd	r25, Y+4	; 0x04
    47b2:	01 97       	sbiw	r24, 0x01	; 1
    47b4:	f1 f7       	brne	.-4      	; 0x47b2 <State_Control+0xc6>
    47b6:	9c 83       	std	Y+4, r25	; 0x04
    47b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ba:	8d 81       	ldd	r24, Y+5	; 0x05
    47bc:	9e 81       	ldd	r25, Y+6	; 0x06
    47be:	01 97       	sbiw	r24, 0x01	; 1
    47c0:	9e 83       	std	Y+6, r25	; 0x06
    47c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c4:	8d 81       	ldd	r24, Y+5	; 0x05
    47c6:	9e 81       	ldd	r25, Y+6	; 0x06
    47c8:	00 97       	sbiw	r24, 0x00	; 0
    47ca:	69 f7       	brne	.-38     	; 0x47a6 <State_Control+0xba>
    47cc:	14 c0       	rjmp	.+40     	; 0x47f6 <State_Control+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ce:	6f 81       	ldd	r22, Y+7	; 0x07
    47d0:	78 85       	ldd	r23, Y+8	; 0x08
    47d2:	89 85       	ldd	r24, Y+9	; 0x09
    47d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    47d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47da:	dc 01       	movw	r26, r24
    47dc:	cb 01       	movw	r24, r22
    47de:	9e 83       	std	Y+6, r25	; 0x06
    47e0:	8d 83       	std	Y+5, r24	; 0x05
    47e2:	8d 81       	ldd	r24, Y+5	; 0x05
    47e4:	9e 81       	ldd	r25, Y+6	; 0x06
    47e6:	9a 83       	std	Y+2, r25	; 0x02
    47e8:	89 83       	std	Y+1, r24	; 0x01
    47ea:	89 81       	ldd	r24, Y+1	; 0x01
    47ec:	9a 81       	ldd	r25, Y+2	; 0x02
    47ee:	01 97       	sbiw	r24, 0x01	; 1
    47f0:	f1 f7       	brne	.-4      	; 0x47ee <State_Control+0x102>
    47f2:	9a 83       	std	Y+2, r25	; 0x02
    47f4:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * Apply the next step based on E2PROM value
	 * Also, if the mode was Normal or not defined at first use move to else
	 */
	if(ABNORMAL_STATE == a_E2PROM_VAL)
    47f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    47f8:	82 30       	cpi	r24, 0x02	; 2
    47fa:	21 f4       	brne	.+8      	; 0x4804 <State_Control+0x118>
	{
		g_SystemState = ABNORMAL_STATE;
    47fc:	82 e0       	ldi	r24, 0x02	; 2
    47fe:	80 93 a2 01 	sts	0x01A2, r24
    4802:	09 c0       	rjmp	.+18     	; 0x4816 <State_Control+0x12a>
	}
	else if(EMERGENCY_STATE == a_E2PROM_VAL)
    4804:	8f 85       	ldd	r24, Y+15	; 0x0f
    4806:	81 30       	cpi	r24, 0x01	; 1
    4808:	21 f4       	brne	.+8      	; 0x4812 <State_Control+0x126>
	{
		g_SystemState = EMERGENCY_STATE;
    480a:	81 e0       	ldi	r24, 0x01	; 1
    480c:	80 93 a2 01 	sts	0x01A2, r24
    4810:	02 c0       	rjmp	.+4      	; 0x4816 <State_Control+0x12a>

	}
	else
	{
		g_SystemState = NORMAL_STATE;
    4812:	10 92 a2 01 	sts	0x01A2, r1

	}

	return;
}
    4816:	2f 96       	adiw	r28, 0x0f	; 15
    4818:	0f b6       	in	r0, 0x3f	; 63
    481a:	f8 94       	cli
    481c:	de bf       	out	0x3e, r29	; 62
    481e:	0f be       	out	0x3f, r0	; 63
    4820:	cd bf       	out	0x3d, r28	; 61
    4822:	cf 91       	pop	r28
    4824:	df 91       	pop	r29
    4826:	08 95       	ret

00004828 <__mulsi3>:
    4828:	62 9f       	mul	r22, r18
    482a:	d0 01       	movw	r26, r0
    482c:	73 9f       	mul	r23, r19
    482e:	f0 01       	movw	r30, r0
    4830:	82 9f       	mul	r24, r18
    4832:	e0 0d       	add	r30, r0
    4834:	f1 1d       	adc	r31, r1
    4836:	64 9f       	mul	r22, r20
    4838:	e0 0d       	add	r30, r0
    483a:	f1 1d       	adc	r31, r1
    483c:	92 9f       	mul	r25, r18
    483e:	f0 0d       	add	r31, r0
    4840:	83 9f       	mul	r24, r19
    4842:	f0 0d       	add	r31, r0
    4844:	74 9f       	mul	r23, r20
    4846:	f0 0d       	add	r31, r0
    4848:	65 9f       	mul	r22, r21
    484a:	f0 0d       	add	r31, r0
    484c:	99 27       	eor	r25, r25
    484e:	72 9f       	mul	r23, r18
    4850:	b0 0d       	add	r27, r0
    4852:	e1 1d       	adc	r30, r1
    4854:	f9 1f       	adc	r31, r25
    4856:	63 9f       	mul	r22, r19
    4858:	b0 0d       	add	r27, r0
    485a:	e1 1d       	adc	r30, r1
    485c:	f9 1f       	adc	r31, r25
    485e:	bd 01       	movw	r22, r26
    4860:	cf 01       	movw	r24, r30
    4862:	11 24       	eor	r1, r1
    4864:	08 95       	ret

00004866 <__udivmodsi4>:
    4866:	a1 e2       	ldi	r26, 0x21	; 33
    4868:	1a 2e       	mov	r1, r26
    486a:	aa 1b       	sub	r26, r26
    486c:	bb 1b       	sub	r27, r27
    486e:	fd 01       	movw	r30, r26
    4870:	0d c0       	rjmp	.+26     	; 0x488c <__udivmodsi4_ep>

00004872 <__udivmodsi4_loop>:
    4872:	aa 1f       	adc	r26, r26
    4874:	bb 1f       	adc	r27, r27
    4876:	ee 1f       	adc	r30, r30
    4878:	ff 1f       	adc	r31, r31
    487a:	a2 17       	cp	r26, r18
    487c:	b3 07       	cpc	r27, r19
    487e:	e4 07       	cpc	r30, r20
    4880:	f5 07       	cpc	r31, r21
    4882:	20 f0       	brcs	.+8      	; 0x488c <__udivmodsi4_ep>
    4884:	a2 1b       	sub	r26, r18
    4886:	b3 0b       	sbc	r27, r19
    4888:	e4 0b       	sbc	r30, r20
    488a:	f5 0b       	sbc	r31, r21

0000488c <__udivmodsi4_ep>:
    488c:	66 1f       	adc	r22, r22
    488e:	77 1f       	adc	r23, r23
    4890:	88 1f       	adc	r24, r24
    4892:	99 1f       	adc	r25, r25
    4894:	1a 94       	dec	r1
    4896:	69 f7       	brne	.-38     	; 0x4872 <__udivmodsi4_loop>
    4898:	60 95       	com	r22
    489a:	70 95       	com	r23
    489c:	80 95       	com	r24
    489e:	90 95       	com	r25
    48a0:	9b 01       	movw	r18, r22
    48a2:	ac 01       	movw	r20, r24
    48a4:	bd 01       	movw	r22, r26
    48a6:	cf 01       	movw	r24, r30
    48a8:	08 95       	ret

000048aa <__prologue_saves__>:
    48aa:	2f 92       	push	r2
    48ac:	3f 92       	push	r3
    48ae:	4f 92       	push	r4
    48b0:	5f 92       	push	r5
    48b2:	6f 92       	push	r6
    48b4:	7f 92       	push	r7
    48b6:	8f 92       	push	r8
    48b8:	9f 92       	push	r9
    48ba:	af 92       	push	r10
    48bc:	bf 92       	push	r11
    48be:	cf 92       	push	r12
    48c0:	df 92       	push	r13
    48c2:	ef 92       	push	r14
    48c4:	ff 92       	push	r15
    48c6:	0f 93       	push	r16
    48c8:	1f 93       	push	r17
    48ca:	cf 93       	push	r28
    48cc:	df 93       	push	r29
    48ce:	cd b7       	in	r28, 0x3d	; 61
    48d0:	de b7       	in	r29, 0x3e	; 62
    48d2:	ca 1b       	sub	r28, r26
    48d4:	db 0b       	sbc	r29, r27
    48d6:	0f b6       	in	r0, 0x3f	; 63
    48d8:	f8 94       	cli
    48da:	de bf       	out	0x3e, r29	; 62
    48dc:	0f be       	out	0x3f, r0	; 63
    48de:	cd bf       	out	0x3d, r28	; 61
    48e0:	09 94       	ijmp

000048e2 <__epilogue_restores__>:
    48e2:	2a 88       	ldd	r2, Y+18	; 0x12
    48e4:	39 88       	ldd	r3, Y+17	; 0x11
    48e6:	48 88       	ldd	r4, Y+16	; 0x10
    48e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    48ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    48ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    48ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    48f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    48f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    48f4:	b9 84       	ldd	r11, Y+9	; 0x09
    48f6:	c8 84       	ldd	r12, Y+8	; 0x08
    48f8:	df 80       	ldd	r13, Y+7	; 0x07
    48fa:	ee 80       	ldd	r14, Y+6	; 0x06
    48fc:	fd 80       	ldd	r15, Y+5	; 0x05
    48fe:	0c 81       	ldd	r16, Y+4	; 0x04
    4900:	1b 81       	ldd	r17, Y+3	; 0x03
    4902:	aa 81       	ldd	r26, Y+2	; 0x02
    4904:	b9 81       	ldd	r27, Y+1	; 0x01
    4906:	ce 0f       	add	r28, r30
    4908:	d1 1d       	adc	r29, r1
    490a:	0f b6       	in	r0, 0x3f	; 63
    490c:	f8 94       	cli
    490e:	de bf       	out	0x3e, r29	; 62
    4910:	0f be       	out	0x3f, r0	; 63
    4912:	cd bf       	out	0x3d, r28	; 61
    4914:	ed 01       	movw	r28, r26
    4916:	08 95       	ret

00004918 <itoa>:
    4918:	fb 01       	movw	r30, r22
    491a:	9f 01       	movw	r18, r30
    491c:	e8 94       	clt
    491e:	42 30       	cpi	r20, 0x02	; 2
    4920:	c4 f0       	brlt	.+48     	; 0x4952 <itoa+0x3a>
    4922:	45 32       	cpi	r20, 0x25	; 37
    4924:	b4 f4       	brge	.+44     	; 0x4952 <itoa+0x3a>
    4926:	4a 30       	cpi	r20, 0x0A	; 10
    4928:	29 f4       	brne	.+10     	; 0x4934 <itoa+0x1c>
    492a:	97 fb       	bst	r25, 7
    492c:	1e f4       	brtc	.+6      	; 0x4934 <itoa+0x1c>
    492e:	90 95       	com	r25
    4930:	81 95       	neg	r24
    4932:	9f 4f       	sbci	r25, 0xFF	; 255
    4934:	64 2f       	mov	r22, r20
    4936:	77 27       	eor	r23, r23
    4938:	0e 94 bd 24 	call	0x497a	; 0x497a <__udivmodhi4>
    493c:	80 5d       	subi	r24, 0xD0	; 208
    493e:	8a 33       	cpi	r24, 0x3A	; 58
    4940:	0c f0       	brlt	.+2      	; 0x4944 <itoa+0x2c>
    4942:	89 5d       	subi	r24, 0xD9	; 217
    4944:	81 93       	st	Z+, r24
    4946:	cb 01       	movw	r24, r22
    4948:	00 97       	sbiw	r24, 0x00	; 0
    494a:	a1 f7       	brne	.-24     	; 0x4934 <itoa+0x1c>
    494c:	16 f4       	brtc	.+4      	; 0x4952 <itoa+0x3a>
    494e:	5d e2       	ldi	r21, 0x2D	; 45
    4950:	51 93       	st	Z+, r21
    4952:	10 82       	st	Z, r1
    4954:	c9 01       	movw	r24, r18
    4956:	0c 94 ad 24 	jmp	0x495a	; 0x495a <strrev>

0000495a <strrev>:
    495a:	dc 01       	movw	r26, r24
    495c:	fc 01       	movw	r30, r24
    495e:	67 2f       	mov	r22, r23
    4960:	71 91       	ld	r23, Z+
    4962:	77 23       	and	r23, r23
    4964:	e1 f7       	brne	.-8      	; 0x495e <strrev+0x4>
    4966:	32 97       	sbiw	r30, 0x02	; 2
    4968:	04 c0       	rjmp	.+8      	; 0x4972 <strrev+0x18>
    496a:	7c 91       	ld	r23, X
    496c:	6d 93       	st	X+, r22
    496e:	70 83       	st	Z, r23
    4970:	62 91       	ld	r22, -Z
    4972:	ae 17       	cp	r26, r30
    4974:	bf 07       	cpc	r27, r31
    4976:	c8 f3       	brcs	.-14     	; 0x496a <strrev+0x10>
    4978:	08 95       	ret

0000497a <__udivmodhi4>:
    497a:	aa 1b       	sub	r26, r26
    497c:	bb 1b       	sub	r27, r27
    497e:	51 e1       	ldi	r21, 0x11	; 17
    4980:	07 c0       	rjmp	.+14     	; 0x4990 <__udivmodhi4_ep>

00004982 <__udivmodhi4_loop>:
    4982:	aa 1f       	adc	r26, r26
    4984:	bb 1f       	adc	r27, r27
    4986:	a6 17       	cp	r26, r22
    4988:	b7 07       	cpc	r27, r23
    498a:	10 f0       	brcs	.+4      	; 0x4990 <__udivmodhi4_ep>
    498c:	a6 1b       	sub	r26, r22
    498e:	b7 0b       	sbc	r27, r23

00004990 <__udivmodhi4_ep>:
    4990:	88 1f       	adc	r24, r24
    4992:	99 1f       	adc	r25, r25
    4994:	5a 95       	dec	r21
    4996:	a9 f7       	brne	.-22     	; 0x4982 <__udivmodhi4_loop>
    4998:	80 95       	com	r24
    499a:	90 95       	com	r25
    499c:	bc 01       	movw	r22, r24
    499e:	cd 01       	movw	r24, r26
    49a0:	08 95       	ret

000049a2 <_exit>:
    49a2:	f8 94       	cli

000049a4 <__stop_program>:
    49a4:	ff cf       	rjmp	.-2      	; 0x49a4 <__stop_program>
