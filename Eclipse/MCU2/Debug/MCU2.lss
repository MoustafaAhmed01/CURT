
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000271a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  0000271a  000027ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080018a  0080018a  000028d8  2**0
                  ALLOC
  3 .stab         000033c0  00000000  00000000  000028d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004e27  00000000  00000000  00005c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000aabf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  0000ac1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  0000add5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  0000cce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  0000ddb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ede4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000ef64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000f24a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fb40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__vector_4>
      14:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__vector_9>
      28:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__vector_10>
      2c:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 15 12 	call	0x242a	; 0x242a <main>
      8a:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <ADC_init>:
/*
 * Description :
 * Function responsible for initialize the ADC driver.
 */
void ADC_init(const ADC_ConfigType *Config_Ptr)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <ADC_init+0x6>
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	9a 83       	std	Y+2, r25	; 0x02
     d7a:	89 83       	std	Y+1, r24	; 0x01
	/* Choosing the Reference voltage */
	ADMUX = (ADMUX & 0x3F) |(Config_Ptr->ref_volt<<6);
     d7c:	a7 e2       	ldi	r26, 0x27	; 39
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e7 e2       	ldi	r30, 0x27	; 39
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	28 2f       	mov	r18, r24
     d88:	2f 73       	andi	r18, 0x3F	; 63
     d8a:	e9 81       	ldd	r30, Y+1	; 0x01
     d8c:	fa 81       	ldd	r31, Y+2	; 0x02
     d8e:	80 81       	ld	r24, Z
     d90:	88 2f       	mov	r24, r24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	00 24       	eor	r0, r0
     d96:	96 95       	lsr	r25
     d98:	87 95       	ror	r24
     d9a:	07 94       	ror	r0
     d9c:	96 95       	lsr	r25
     d9e:	87 95       	ror	r24
     da0:	07 94       	ror	r0
     da2:	98 2f       	mov	r25, r24
     da4:	80 2d       	mov	r24, r0
     da6:	82 2b       	or	r24, r18
     da8:	8c 93       	st	X, r24

	/* Activating the ADC */
	SET_BIT(ADCSRA,ADEN);
     daa:	a6 e2       	ldi	r26, 0x26	; 38
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e6 e2       	ldi	r30, 0x26	; 38
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	80 68       	ori	r24, 0x80	; 128
     db6:	8c 93       	st	X, r24

	/* Setting F_ADC = F_CPU/x */
	ADCSRA = (ADCSRA & 0xF8) | Config_Ptr->prescaler;
     db8:	a6 e2       	ldi	r26, 0x26	; 38
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e6 e2       	ldi	r30, 0x26	; 38
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	98 2f       	mov	r25, r24
     dc4:	98 7f       	andi	r25, 0xF8	; 248
     dc6:	e9 81       	ldd	r30, Y+1	; 0x01
     dc8:	fa 81       	ldd	r31, Y+2	; 0x02
     dca:	81 81       	ldd	r24, Z+1	; 0x01
     dcc:	89 2b       	or	r24, r25
     dce:	8c 93       	st	X, r24

}
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <ADC_readChannel>:
 * Description :
 * Function responsible for read analog data from a certain ADC channel
 * and convert it to digital using the ADC driver.
 */
uint16 ADC_readChannel(uint8 channel_num)
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	0f 92       	push	r0
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clearing the first 5 bits */
     de6:	a7 e2       	ldi	r26, 0x27	; 39
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e7 e2       	ldi	r30, 0x27	; 39
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	80 7e       	andi	r24, 0xE0	; 224
     df2:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choosing which channel will be used*/
     df4:	a7 e2       	ldi	r26, 0x27	; 39
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e7 e2       	ldi	r30, 0x27	; 39
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	90 81       	ld	r25, Z
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	89 2b       	or	r24, r25
     e02:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start Conversion   */
     e04:	a6 e2       	ldi	r26, 0x26	; 38
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e6 e2       	ldi	r30, 0x26	; 38
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	80 64       	ori	r24, 0x40	; 64
     e10:	8c 93       	st	X, r24

	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Based ON pulling method */
     e12:	e6 e2       	ldi	r30, 0x26	; 38
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	80 71       	andi	r24, 0x10	; 16
     e1e:	90 70       	andi	r25, 0x00	; 0
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	b9 f3       	breq	.-18     	; 0xe12 <ADC_readChannel+0x38>

	SET_BIT(ADCSRA,ADIF); /* Clearing the flag register */
     e24:	a6 e2       	ldi	r26, 0x26	; 38
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e6 e2       	ldi	r30, 0x26	; 38
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	80 61       	ori	r24, 0x10	; 16
     e30:	8c 93       	st	X, r24

	return ADC; /* Read the digital value from the data register */
     e32:	e4 e2       	ldi	r30, 0x24	; 36
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
}
     e3a:	0f 90       	pop	r0
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <GPIO_setupPinDirection+0x6>
     e48:	00 d0       	rcall	.+0      	; 0xe4a <GPIO_setupPinDirection+0x8>
     e4a:	0f 92       	push	r0
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	89 83       	std	Y+1, r24	; 0x01
     e52:	6a 83       	std	Y+2, r22	; 0x02
     e54:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	84 30       	cpi	r24, 0x04	; 4
     e5a:	08 f0       	brcs	.+2      	; 0xe5e <GPIO_setupPinDirection+0x1c>
     e5c:	d5 c0       	rjmp	.+426    	; 0x1008 <GPIO_setupPinDirection+0x1c6>
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	88 30       	cpi	r24, 0x08	; 8
     e62:	08 f0       	brcs	.+2      	; 0xe66 <GPIO_setupPinDirection+0x24>
     e64:	d1 c0       	rjmp	.+418    	; 0x1008 <GPIO_setupPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	3d 83       	std	Y+5, r19	; 0x05
     e6e:	2c 83       	std	Y+4, r18	; 0x04
     e70:	8c 81       	ldd	r24, Y+4	; 0x04
     e72:	9d 81       	ldd	r25, Y+5	; 0x05
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	91 05       	cpc	r25, r1
     e78:	09 f4       	brne	.+2      	; 0xe7c <GPIO_setupPinDirection+0x3a>
     e7a:	43 c0       	rjmp	.+134    	; 0xf02 <GPIO_setupPinDirection+0xc0>
     e7c:	2c 81       	ldd	r18, Y+4	; 0x04
     e7e:	3d 81       	ldd	r19, Y+5	; 0x05
     e80:	22 30       	cpi	r18, 0x02	; 2
     e82:	31 05       	cpc	r19, r1
     e84:	2c f4       	brge	.+10     	; 0xe90 <GPIO_setupPinDirection+0x4e>
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	9d 81       	ldd	r25, Y+5	; 0x05
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	71 f0       	breq	.+28     	; 0xeaa <GPIO_setupPinDirection+0x68>
     e8e:	bc c0       	rjmp	.+376    	; 0x1008 <GPIO_setupPinDirection+0x1c6>
     e90:	2c 81       	ldd	r18, Y+4	; 0x04
     e92:	3d 81       	ldd	r19, Y+5	; 0x05
     e94:	22 30       	cpi	r18, 0x02	; 2
     e96:	31 05       	cpc	r19, r1
     e98:	09 f4       	brne	.+2      	; 0xe9c <GPIO_setupPinDirection+0x5a>
     e9a:	5f c0       	rjmp	.+190    	; 0xf5a <GPIO_setupPinDirection+0x118>
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ea0:	83 30       	cpi	r24, 0x03	; 3
     ea2:	91 05       	cpc	r25, r1
     ea4:	09 f4       	brne	.+2      	; 0xea8 <GPIO_setupPinDirection+0x66>
     ea6:	85 c0       	rjmp	.+266    	; 0xfb2 <GPIO_setupPinDirection+0x170>
     ea8:	af c0       	rjmp	.+350    	; 0x1008 <GPIO_setupPinDirection+0x1c6>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(direction == PIN_INPUT)
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	88 23       	and	r24, r24
     eae:	a9 f4       	brne	.+42     	; 0xeda <GPIO_setupPinDirection+0x98>
			{
				CLEAR_BIT(DDRA,pin_num);
     eb0:	aa e3       	ldi	r26, 0x3A	; 58
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	ea e3       	ldi	r30, 0x3A	; 58
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <GPIO_setupPinDirection+0x8c>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <GPIO_setupPinDirection+0x88>
     ed2:	80 95       	com	r24
     ed4:	84 23       	and	r24, r20
     ed6:	8c 93       	st	X, r24
     ed8:	97 c0       	rjmp	.+302    	; 0x1008 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRA,pin_num);
     eda:	aa e3       	ldi	r26, 0x3A	; 58
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	ea e3       	ldi	r30, 0x3A	; 58
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <GPIO_setupPinDirection+0xb6>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <GPIO_setupPinDirection+0xb2>
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	83 c0       	rjmp	.+262    	; 0x1008 <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(direction == PIN_INPUT)
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	88 23       	and	r24, r24
     f06:	a9 f4       	brne	.+42     	; 0xf32 <GPIO_setupPinDirection+0xf0>
			{
				CLEAR_BIT(DDRB,pin_num);
     f08:	a7 e3       	ldi	r26, 0x37	; 55
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e7 e3       	ldi	r30, 0x37	; 55
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 2e       	mov	r0, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <GPIO_setupPinDirection+0xe4>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <GPIO_setupPinDirection+0xe0>
     f2a:	80 95       	com	r24
     f2c:	84 23       	and	r24, r20
     f2e:	8c 93       	st	X, r24
     f30:	6b c0       	rjmp	.+214    	; 0x1008 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRB,pin_num);
     f32:	a7 e3       	ldi	r26, 0x37	; 55
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e7 e3       	ldi	r30, 0x37	; 55
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <GPIO_setupPinDirection+0x10e>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <GPIO_setupPinDirection+0x10a>
     f54:	84 2b       	or	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	57 c0       	rjmp	.+174    	; 0x1008 <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(direction == PIN_INPUT)
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	88 23       	and	r24, r24
     f5e:	a9 f4       	brne	.+42     	; 0xf8a <GPIO_setupPinDirection+0x148>
			{
				CLEAR_BIT(DDRC,pin_num);
     f60:	a4 e3       	ldi	r26, 0x34	; 52
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e4 e3       	ldi	r30, 0x34	; 52
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <GPIO_setupPinDirection+0x13c>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <GPIO_setupPinDirection+0x138>
     f82:	80 95       	com	r24
     f84:	84 23       	and	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	3f c0       	rjmp	.+126    	; 0x1008 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
     f8a:	a4 e3       	ldi	r26, 0x34	; 52
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e4 e3       	ldi	r30, 0x34	; 52
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <GPIO_setupPinDirection+0x166>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <GPIO_setupPinDirection+0x162>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	2b c0       	rjmp	.+86     	; 0x1008 <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(direction == PIN_INPUT)
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	88 23       	and	r24, r24
     fb6:	a9 f4       	brne	.+42     	; 0xfe2 <GPIO_setupPinDirection+0x1a0>
			{
				CLEAR_BIT(DDRD,pin_num);
     fb8:	a1 e3       	ldi	r26, 0x31	; 49
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e1 e3       	ldi	r30, 0x31	; 49
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <GPIO_setupPinDirection+0x194>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <GPIO_setupPinDirection+0x190>
     fda:	80 95       	com	r24
     fdc:	84 23       	and	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	13 c0       	rjmp	.+38     	; 0x1008 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRD,pin_num);
     fe2:	a1 e3       	ldi	r26, 0x31	; 49
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e1 e3       	ldi	r30, 0x31	; 49
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_setupPinDirection+0x1be>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_setupPinDirection+0x1ba>
    1004:	84 2b       	or	r24, r20
    1006:	8c 93       	st	X, r24
			}
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <GPIO_writePin+0x6>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <GPIO_writePin+0x8>
    1020:	0f 92       	push	r0
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	89 83       	std	Y+1, r24	; 0x01
    1028:	6a 83       	std	Y+2, r22	; 0x02
    102a:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	84 30       	cpi	r24, 0x04	; 4
    1030:	08 f0       	brcs	.+2      	; 0x1034 <GPIO_writePin+0x1c>
    1032:	d5 c0       	rjmp	.+426    	; 0x11de <GPIO_writePin+0x1c6>
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	88 30       	cpi	r24, 0x08	; 8
    1038:	08 f0       	brcs	.+2      	; 0x103c <GPIO_writePin+0x24>
    103a:	d1 c0       	rjmp	.+418    	; 0x11de <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3d 83       	std	Y+5, r19	; 0x05
    1044:	2c 83       	std	Y+4, r18	; 0x04
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	91 05       	cpc	r25, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <GPIO_writePin+0x3a>
    1050:	43 c0       	rjmp	.+134    	; 0x10d8 <GPIO_writePin+0xc0>
    1052:	2c 81       	ldd	r18, Y+4	; 0x04
    1054:	3d 81       	ldd	r19, Y+5	; 0x05
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_writePin+0x4e>
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	9d 81       	ldd	r25, Y+5	; 0x05
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	71 f0       	breq	.+28     	; 0x1080 <GPIO_writePin+0x68>
    1064:	bc c0       	rjmp	.+376    	; 0x11de <GPIO_writePin+0x1c6>
    1066:	2c 81       	ldd	r18, Y+4	; 0x04
    1068:	3d 81       	ldd	r19, Y+5	; 0x05
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	09 f4       	brne	.+2      	; 0x1072 <GPIO_writePin+0x5a>
    1070:	5f c0       	rjmp	.+190    	; 0x1130 <GPIO_writePin+0x118>
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	9d 81       	ldd	r25, Y+5	; 0x05
    1076:	83 30       	cpi	r24, 0x03	; 3
    1078:	91 05       	cpc	r25, r1
    107a:	09 f4       	brne	.+2      	; 0x107e <GPIO_writePin+0x66>
    107c:	85 c0       	rjmp	.+266    	; 0x1188 <GPIO_writePin+0x170>
    107e:	af c0       	rjmp	.+350    	; 0x11de <GPIO_writePin+0x1c6>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(value == LOGIC_LOW)
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	88 23       	and	r24, r24
    1084:	a9 f4       	brne	.+42     	; 0x10b0 <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA,pin_num);
    1086:	ab e3       	ldi	r26, 0x3B	; 59
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	eb e3       	ldi	r30, 0x3B	; 59
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <GPIO_writePin+0x8c>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <GPIO_writePin+0x88>
    10a8:	80 95       	com	r24
    10aa:	84 23       	and	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	97 c0       	rjmp	.+302    	; 0x11de <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA,pin_num);
    10b0:	ab e3       	ldi	r26, 0x3B	; 59
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	eb e3       	ldi	r30, 0x3B	; 59
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <GPIO_writePin+0xb6>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <GPIO_writePin+0xb2>
    10d2:	84 2b       	or	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	83 c0       	rjmp	.+262    	; 0x11de <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(value == LOGIC_LOW)
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	88 23       	and	r24, r24
    10dc:	a9 f4       	brne	.+42     	; 0x1108 <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB,pin_num);
    10de:	a8 e3       	ldi	r26, 0x38	; 56
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e8 e3       	ldi	r30, 0x38	; 56
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <GPIO_writePin+0xe4>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <GPIO_writePin+0xe0>
    1100:	80 95       	com	r24
    1102:	84 23       	and	r24, r20
    1104:	8c 93       	st	X, r24
    1106:	6b c0       	rjmp	.+214    	; 0x11de <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB,pin_num);
    1108:	a8 e3       	ldi	r26, 0x38	; 56
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e8 e3       	ldi	r30, 0x38	; 56
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <GPIO_writePin+0x10e>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <GPIO_writePin+0x10a>
    112a:	84 2b       	or	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	57 c0       	rjmp	.+174    	; 0x11de <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(value == LOGIC_LOW)
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 23       	and	r24, r24
    1134:	a9 f4       	brne	.+42     	; 0x1160 <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC,pin_num);
    1136:	a5 e3       	ldi	r26, 0x35	; 53
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e5 e3       	ldi	r30, 0x35	; 53
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <GPIO_writePin+0x13c>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <GPIO_writePin+0x138>
    1158:	80 95       	com	r24
    115a:	84 23       	and	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	3f c0       	rjmp	.+126    	; 0x11de <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC,pin_num);
    1160:	a5 e3       	ldi	r26, 0x35	; 53
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e5 e3       	ldi	r30, 0x35	; 53
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <GPIO_writePin+0x166>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <GPIO_writePin+0x162>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	2b c0       	rjmp	.+86     	; 0x11de <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(value == LOGIC_LOW)
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	88 23       	and	r24, r24
    118c:	a9 f4       	brne	.+42     	; 0x11b8 <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD,pin_num);
    118e:	a2 e3       	ldi	r26, 0x32	; 50
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e2 e3       	ldi	r30, 0x32	; 50
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <GPIO_writePin+0x194>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <GPIO_writePin+0x190>
    11b0:	80 95       	com	r24
    11b2:	84 23       	and	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	13 c0       	rjmp	.+38     	; 0x11de <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD,pin_num);
    11b8:	a2 e3       	ldi	r26, 0x32	; 50
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e2 e3       	ldi	r30, 0x32	; 50
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <GPIO_writePin+0x1be>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <GPIO_writePin+0x1ba>
    11da:	84 2b       	or	r24, r20
    11dc:	8c 93       	st	X, r24
			}
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <GPIO_readPin+0x6>
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <GPIO_readPin+0x8>
    11f6:	0f 92       	push	r0
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	8a 83       	std	Y+2, r24	; 0x02
    11fe:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pinValue = LOGIC_LOW;
    1200:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	84 30       	cpi	r24, 0x04	; 4
    1206:	08 f0       	brcs	.+2      	; 0x120a <GPIO_readPin+0x1c>
    1208:	84 c0       	rjmp	.+264    	; 0x1312 <GPIO_readPin+0x124>
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	88 30       	cpi	r24, 0x08	; 8
    120e:	08 f0       	brcs	.+2      	; 0x1212 <GPIO_readPin+0x24>
    1210:	80 c0       	rjmp	.+256    	; 0x1312 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	3d 83       	std	Y+5, r19	; 0x05
    121a:	2c 83       	std	Y+4, r18	; 0x04
    121c:	4c 81       	ldd	r20, Y+4	; 0x04
    121e:	5d 81       	ldd	r21, Y+5	; 0x05
    1220:	41 30       	cpi	r20, 0x01	; 1
    1222:	51 05       	cpc	r21, r1
    1224:	79 f1       	breq	.+94     	; 0x1284 <GPIO_readPin+0x96>
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	82 30       	cpi	r24, 0x02	; 2
    122c:	91 05       	cpc	r25, r1
    122e:	34 f4       	brge	.+12     	; 0x123c <GPIO_readPin+0x4e>
    1230:	2c 81       	ldd	r18, Y+4	; 0x04
    1232:	3d 81       	ldd	r19, Y+5	; 0x05
    1234:	21 15       	cp	r18, r1
    1236:	31 05       	cpc	r19, r1
    1238:	69 f0       	breq	.+26     	; 0x1254 <GPIO_readPin+0x66>
    123a:	6b c0       	rjmp	.+214    	; 0x1312 <GPIO_readPin+0x124>
    123c:	4c 81       	ldd	r20, Y+4	; 0x04
    123e:	5d 81       	ldd	r21, Y+5	; 0x05
    1240:	42 30       	cpi	r20, 0x02	; 2
    1242:	51 05       	cpc	r21, r1
    1244:	b9 f1       	breq	.+110    	; 0x12b4 <GPIO_readPin+0xc6>
    1246:	8c 81       	ldd	r24, Y+4	; 0x04
    1248:	9d 81       	ldd	r25, Y+5	; 0x05
    124a:	83 30       	cpi	r24, 0x03	; 3
    124c:	91 05       	cpc	r25, r1
    124e:	09 f4       	brne	.+2      	; 0x1252 <GPIO_readPin+0x64>
    1250:	49 c0       	rjmp	.+146    	; 0x12e4 <GPIO_readPin+0xf6>
    1252:	5f c0       	rjmp	.+190    	; 0x1312 <GPIO_readPin+0x124>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1254:	e9 e3       	ldi	r30, 0x39	; 57
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	88 2f       	mov	r24, r24
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a9 01       	movw	r20, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <GPIO_readPin+0x7e>
    1268:	55 95       	asr	r21
    126a:	47 95       	ror	r20
    126c:	8a 95       	dec	r24
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <GPIO_readPin+0x7a>
    1270:	ca 01       	movw	r24, r20
    1272:	81 70       	andi	r24, 0x01	; 1
    1274:	90 70       	andi	r25, 0x00	; 0
    1276:	88 23       	and	r24, r24
    1278:	19 f0       	breq	.+6      	; 0x1280 <GPIO_readPin+0x92>
			{
				a_pinValue = LOGIC_HIGH;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	49 c0       	rjmp	.+146    	; 0x1312 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    1280:	19 82       	std	Y+1, r1	; 0x01
    1282:	47 c0       	rjmp	.+142    	; 0x1312 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1284:	e6 e3       	ldi	r30, 0x36	; 54
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	a9 01       	movw	r20, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <GPIO_readPin+0xae>
    1298:	55 95       	asr	r21
    129a:	47 95       	ror	r20
    129c:	8a 95       	dec	r24
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <GPIO_readPin+0xaa>
    12a0:	ca 01       	movw	r24, r20
    12a2:	81 70       	andi	r24, 0x01	; 1
    12a4:	90 70       	andi	r25, 0x00	; 0
    12a6:	88 23       	and	r24, r24
    12a8:	19 f0       	breq	.+6      	; 0x12b0 <GPIO_readPin+0xc2>
			{
				a_pinValue = LOGIC_HIGH;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	31 c0       	rjmp	.+98     	; 0x1312 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    12b0:	19 82       	std	Y+1, r1	; 0x01
    12b2:	2f c0       	rjmp	.+94     	; 0x1312 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    12b4:	e3 e3       	ldi	r30, 0x33	; 51
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	a9 01       	movw	r20, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <GPIO_readPin+0xde>
    12c8:	55 95       	asr	r21
    12ca:	47 95       	ror	r20
    12cc:	8a 95       	dec	r24
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <GPIO_readPin+0xda>
    12d0:	ca 01       	movw	r24, r20
    12d2:	81 70       	andi	r24, 0x01	; 1
    12d4:	90 70       	andi	r25, 0x00	; 0
    12d6:	88 23       	and	r24, r24
    12d8:	19 f0       	breq	.+6      	; 0x12e0 <GPIO_readPin+0xf2>
			{
				a_pinValue = LOGIC_HIGH;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	19 c0       	rjmp	.+50     	; 0x1312 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    12e0:	19 82       	std	Y+1, r1	; 0x01
    12e2:	17 c0       	rjmp	.+46     	; 0x1312 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    12e4:	e0 e3       	ldi	r30, 0x30	; 48
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a9 01       	movw	r20, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <GPIO_readPin+0x10e>
    12f8:	55 95       	asr	r21
    12fa:	47 95       	ror	r20
    12fc:	8a 95       	dec	r24
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <GPIO_readPin+0x10a>
    1300:	ca 01       	movw	r24, r20
    1302:	81 70       	andi	r24, 0x01	; 1
    1304:	90 70       	andi	r25, 0x00	; 0
    1306:	88 23       	and	r24, r24
    1308:	19 f0       	breq	.+6      	; 0x1310 <GPIO_readPin+0x122>
			{
				a_pinValue = LOGIC_HIGH;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    1310:	19 82       	std	Y+1, r1	; 0x01
			break;
/*----------------------------------------------------------------------------*/
		}
	}

	return a_pinValue;
    1312:	89 81       	ldd	r24, Y+1	; 0x01
}
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <GPIO_setupPortDirection+0x6>
    132a:	00 d0       	rcall	.+0      	; 0x132c <GPIO_setupPortDirection+0x8>
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS) /* Corner Case : If input was wrong */
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	84 30       	cpi	r24, 0x04	; 4
    1338:	90 f5       	brcc	.+100    	; 0x139e <GPIO_setupPortDirection+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3c 83       	std	Y+4, r19	; 0x04
    1342:	2b 83       	std	Y+3, r18	; 0x03
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	91 05       	cpc	r25, r1
    134c:	d1 f0       	breq	.+52     	; 0x1382 <GPIO_setupPortDirection+0x5e>
    134e:	2b 81       	ldd	r18, Y+3	; 0x03
    1350:	3c 81       	ldd	r19, Y+4	; 0x04
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	2c f4       	brge	.+10     	; 0x1362 <GPIO_setupPortDirection+0x3e>
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	61 f0       	breq	.+24     	; 0x1378 <GPIO_setupPortDirection+0x54>
    1360:	1e c0       	rjmp	.+60     	; 0x139e <GPIO_setupPortDirection+0x7a>
    1362:	2b 81       	ldd	r18, Y+3	; 0x03
    1364:	3c 81       	ldd	r19, Y+4	; 0x04
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	81 f0       	breq	.+32     	; 0x138c <GPIO_setupPortDirection+0x68>
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	91 05       	cpc	r25, r1
    1374:	81 f0       	breq	.+32     	; 0x1396 <GPIO_setupPortDirection+0x72>
    1376:	13 c0       	rjmp	.+38     	; 0x139e <GPIO_setupPortDirection+0x7a>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			DDRA = direction;
    1378:	ea e3       	ldi	r30, 0x3A	; 58
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	80 83       	st	Z, r24
    1380:	0e c0       	rjmp	.+28     	; 0x139e <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			DDRB = direction;
    1382:	e7 e3       	ldi	r30, 0x37	; 55
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	80 83       	st	Z, r24
    138a:	09 c0       	rjmp	.+18     	; 0x139e <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			DDRC = direction;
    138c:	e4 e3       	ldi	r30, 0x34	; 52
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	80 83       	st	Z, r24
    1394:	04 c0       	rjmp	.+8      	; 0x139e <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			DDRD = direction;
    1396:	e1 e3       	ldi	r30, 0x31	; 49
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	80 83       	st	Z, r24
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <GPIO_writePort+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <GPIO_writePort+0x8>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	89 83       	std	Y+1, r24	; 0x01
    13ba:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS) /* Corner Case : If input was wrong */
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	85 30       	cpi	r24, 0x05	; 5
    13c0:	90 f5       	brcc	.+100    	; 0x1426 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	3c 83       	std	Y+4, r19	; 0x04
    13ca:	2b 83       	std	Y+3, r18	; 0x03
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	9c 81       	ldd	r25, Y+4	; 0x04
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	91 05       	cpc	r25, r1
    13d4:	d1 f0       	breq	.+52     	; 0x140a <GPIO_writePort+0x5e>
    13d6:	2b 81       	ldd	r18, Y+3	; 0x03
    13d8:	3c 81       	ldd	r19, Y+4	; 0x04
    13da:	22 30       	cpi	r18, 0x02	; 2
    13dc:	31 05       	cpc	r19, r1
    13de:	2c f4       	brge	.+10     	; 0x13ea <GPIO_writePort+0x3e>
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	61 f0       	breq	.+24     	; 0x1400 <GPIO_writePort+0x54>
    13e8:	1e c0       	rjmp	.+60     	; 0x1426 <GPIO_writePort+0x7a>
    13ea:	2b 81       	ldd	r18, Y+3	; 0x03
    13ec:	3c 81       	ldd	r19, Y+4	; 0x04
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	81 f0       	breq	.+32     	; 0x1414 <GPIO_writePort+0x68>
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	9c 81       	ldd	r25, Y+4	; 0x04
    13f8:	83 30       	cpi	r24, 0x03	; 3
    13fa:	91 05       	cpc	r25, r1
    13fc:	81 f0       	breq	.+32     	; 0x141e <GPIO_writePort+0x72>
    13fe:	13 c0       	rjmp	.+38     	; 0x1426 <GPIO_writePort+0x7a>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			PORTA = value;
    1400:	eb e3       	ldi	r30, 0x3B	; 59
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	80 83       	st	Z, r24
    1408:	0e c0       	rjmp	.+28     	; 0x1426 <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			PORTB = value;
    140a:	e8 e3       	ldi	r30, 0x38	; 56
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	80 83       	st	Z, r24
    1412:	09 c0       	rjmp	.+18     	; 0x1426 <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			PORTC = value;
    1414:	e5 e3       	ldi	r30, 0x35	; 53
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	80 83       	st	Z, r24
    141c:	04 c0       	rjmp	.+8      	; 0x1426 <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			PORTD = value;
    141e:	e2 e3       	ldi	r30, 0x32	; 50
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	80 83       	st	Z, r24
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	00 d0       	rcall	.+0      	; 0x143a <GPIO_readPort+0x6>
    143a:	00 d0       	rcall	.+0      	; 0x143c <GPIO_readPort+0x8>
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_portValue = LOGIC_LOW;
    1442:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	84 30       	cpi	r24, 0x04	; 4
    1448:	90 f5       	brcc	.+100    	; 0x14ae <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	3c 83       	std	Y+4, r19	; 0x04
    1452:	2b 83       	std	Y+3, r18	; 0x03
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	91 05       	cpc	r25, r1
    145c:	d1 f0       	breq	.+52     	; 0x1492 <GPIO_readPort+0x5e>
    145e:	2b 81       	ldd	r18, Y+3	; 0x03
    1460:	3c 81       	ldd	r19, Y+4	; 0x04
    1462:	22 30       	cpi	r18, 0x02	; 2
    1464:	31 05       	cpc	r19, r1
    1466:	2c f4       	brge	.+10     	; 0x1472 <GPIO_readPort+0x3e>
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	61 f0       	breq	.+24     	; 0x1488 <GPIO_readPort+0x54>
    1470:	1e c0       	rjmp	.+60     	; 0x14ae <GPIO_readPort+0x7a>
    1472:	2b 81       	ldd	r18, Y+3	; 0x03
    1474:	3c 81       	ldd	r19, Y+4	; 0x04
    1476:	22 30       	cpi	r18, 0x02	; 2
    1478:	31 05       	cpc	r19, r1
    147a:	81 f0       	breq	.+32     	; 0x149c <GPIO_readPort+0x68>
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	83 30       	cpi	r24, 0x03	; 3
    1482:	91 05       	cpc	r25, r1
    1484:	81 f0       	breq	.+32     	; 0x14a6 <GPIO_readPort+0x72>
    1486:	13 c0       	rjmp	.+38     	; 0x14ae <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			a_portValue = PINA;
    1488:	e9 e3       	ldi	r30, 0x39	; 57
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	0e c0       	rjmp	.+28     	; 0x14ae <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			a_portValue = PINB;
    1492:	e6 e3       	ldi	r30, 0x36	; 54
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	09 c0       	rjmp	.+18     	; 0x14ae <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			a_portValue = PINC;
    149c:	e3 e3       	ldi	r30, 0x33	; 51
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			a_portValue = PIND;
    14a6:	e0 e3       	ldi	r30, 0x30	; 48
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return a_portValue;
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <__vector_11>:

/**-------------------------Interrupts Section----------------------**/
/**                               TIMER 0                          **/
/* Interrupt for normal mode */
ISR(TIMER0_OVF_vect)
{
    14be:	1f 92       	push	r1
    14c0:	0f 92       	push	r0
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	0f 92       	push	r0
    14c6:	11 24       	eor	r1, r1
    14c8:	2f 93       	push	r18
    14ca:	3f 93       	push	r19
    14cc:	4f 93       	push	r20
    14ce:	5f 93       	push	r21
    14d0:	6f 93       	push	r22
    14d2:	7f 93       	push	r23
    14d4:	8f 93       	push	r24
    14d6:	9f 93       	push	r25
    14d8:	af 93       	push	r26
    14da:	bf 93       	push	r27
    14dc:	ef 93       	push	r30
    14de:	ff 93       	push	r31
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrZERO != NULL_PTR)
    14e8:	80 91 8a 01 	lds	r24, 0x018A
    14ec:	90 91 8b 01 	lds	r25, 0x018B
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	29 f0       	breq	.+10     	; 0x14fe <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrZERO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    14f4:	e0 91 8a 01 	lds	r30, 0x018A
    14f8:	f0 91 8b 01 	lds	r31, 0x018B
    14fc:	09 95       	icall
	}
}
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	ff 91       	pop	r31
    1504:	ef 91       	pop	r30
    1506:	bf 91       	pop	r27
    1508:	af 91       	pop	r26
    150a:	9f 91       	pop	r25
    150c:	8f 91       	pop	r24
    150e:	7f 91       	pop	r23
    1510:	6f 91       	pop	r22
    1512:	5f 91       	pop	r21
    1514:	4f 91       	pop	r20
    1516:	3f 91       	pop	r19
    1518:	2f 91       	pop	r18
    151a:	0f 90       	pop	r0
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	0f 90       	pop	r0
    1520:	1f 90       	pop	r1
    1522:	18 95       	reti

00001524 <__vector_10>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER0_COMP_vect)
{
    1524:	1f 92       	push	r1
    1526:	0f 92       	push	r0
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	0f 92       	push	r0
    152c:	11 24       	eor	r1, r1
    152e:	2f 93       	push	r18
    1530:	3f 93       	push	r19
    1532:	4f 93       	push	r20
    1534:	5f 93       	push	r21
    1536:	6f 93       	push	r22
    1538:	7f 93       	push	r23
    153a:	8f 93       	push	r24
    153c:	9f 93       	push	r25
    153e:	af 93       	push	r26
    1540:	bf 93       	push	r27
    1542:	ef 93       	push	r30
    1544:	ff 93       	push	r31
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrZERO != NULL_PTR)
    154e:	80 91 8a 01 	lds	r24, 0x018A
    1552:	90 91 8b 01 	lds	r25, 0x018B
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	29 f0       	breq	.+10     	; 0x1564 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrZERO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    155a:	e0 91 8a 01 	lds	r30, 0x018A
    155e:	f0 91 8b 01 	lds	r31, 0x018B
    1562:	09 95       	icall
	}
}
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	ff 91       	pop	r31
    156a:	ef 91       	pop	r30
    156c:	bf 91       	pop	r27
    156e:	af 91       	pop	r26
    1570:	9f 91       	pop	r25
    1572:	8f 91       	pop	r24
    1574:	7f 91       	pop	r23
    1576:	6f 91       	pop	r22
    1578:	5f 91       	pop	r21
    157a:	4f 91       	pop	r20
    157c:	3f 91       	pop	r19
    157e:	2f 91       	pop	r18
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	0f 90       	pop	r0
    1586:	1f 90       	pop	r1
    1588:	18 95       	reti

0000158a <__vector_9>:
/*------------------------------------------------------------------*/
/**                               TIMER 1                          **/

/* Interrupt for normal mode */
ISR(TIMER1_OVF_vect)
{
    158a:	1f 92       	push	r1
    158c:	0f 92       	push	r0
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	0f 92       	push	r0
    1592:	11 24       	eor	r1, r1
    1594:	2f 93       	push	r18
    1596:	3f 93       	push	r19
    1598:	4f 93       	push	r20
    159a:	5f 93       	push	r21
    159c:	6f 93       	push	r22
    159e:	7f 93       	push	r23
    15a0:	8f 93       	push	r24
    15a2:	9f 93       	push	r25
    15a4:	af 93       	push	r26
    15a6:	bf 93       	push	r27
    15a8:	ef 93       	push	r30
    15aa:	ff 93       	push	r31
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrONE != NULL_PTR)
    15b4:	80 91 8c 01 	lds	r24, 0x018C
    15b8:	90 91 8d 01 	lds	r25, 0x018D
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	29 f0       	breq	.+10     	; 0x15ca <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrONE)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    15c0:	e0 91 8c 01 	lds	r30, 0x018C
    15c4:	f0 91 8d 01 	lds	r31, 0x018D
    15c8:	09 95       	icall
	}
}
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	ff 91       	pop	r31
    15d0:	ef 91       	pop	r30
    15d2:	bf 91       	pop	r27
    15d4:	af 91       	pop	r26
    15d6:	9f 91       	pop	r25
    15d8:	8f 91       	pop	r24
    15da:	7f 91       	pop	r23
    15dc:	6f 91       	pop	r22
    15de:	5f 91       	pop	r21
    15e0:	4f 91       	pop	r20
    15e2:	3f 91       	pop	r19
    15e4:	2f 91       	pop	r18
    15e6:	0f 90       	pop	r0
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	0f 90       	pop	r0
    15ec:	1f 90       	pop	r1
    15ee:	18 95       	reti

000015f0 <__vector_7>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER1_COMPA_vect)
{
    15f0:	1f 92       	push	r1
    15f2:	0f 92       	push	r0
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	0f 92       	push	r0
    15f8:	11 24       	eor	r1, r1
    15fa:	2f 93       	push	r18
    15fc:	3f 93       	push	r19
    15fe:	4f 93       	push	r20
    1600:	5f 93       	push	r21
    1602:	6f 93       	push	r22
    1604:	7f 93       	push	r23
    1606:	8f 93       	push	r24
    1608:	9f 93       	push	r25
    160a:	af 93       	push	r26
    160c:	bf 93       	push	r27
    160e:	ef 93       	push	r30
    1610:	ff 93       	push	r31
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrONE != NULL_PTR)
    161a:	80 91 8c 01 	lds	r24, 0x018C
    161e:	90 91 8d 01 	lds	r25, 0x018D
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	29 f0       	breq	.+10     	; 0x1630 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrONE)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1626:	e0 91 8c 01 	lds	r30, 0x018C
    162a:	f0 91 8d 01 	lds	r31, 0x018D
    162e:	09 95       	icall
	}
}
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	ff 91       	pop	r31
    1636:	ef 91       	pop	r30
    1638:	bf 91       	pop	r27
    163a:	af 91       	pop	r26
    163c:	9f 91       	pop	r25
    163e:	8f 91       	pop	r24
    1640:	7f 91       	pop	r23
    1642:	6f 91       	pop	r22
    1644:	5f 91       	pop	r21
    1646:	4f 91       	pop	r20
    1648:	3f 91       	pop	r19
    164a:	2f 91       	pop	r18
    164c:	0f 90       	pop	r0
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	0f 90       	pop	r0
    1652:	1f 90       	pop	r1
    1654:	18 95       	reti

00001656 <__vector_5>:
/*-------------------------------------------------------------------*/
/**                               TIMER 2                          **/

/* Interrupt for normal mode */
ISR(TIMER2_OVF_vect)
{
    1656:	1f 92       	push	r1
    1658:	0f 92       	push	r0
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	0f 92       	push	r0
    165e:	11 24       	eor	r1, r1
    1660:	2f 93       	push	r18
    1662:	3f 93       	push	r19
    1664:	4f 93       	push	r20
    1666:	5f 93       	push	r21
    1668:	6f 93       	push	r22
    166a:	7f 93       	push	r23
    166c:	8f 93       	push	r24
    166e:	9f 93       	push	r25
    1670:	af 93       	push	r26
    1672:	bf 93       	push	r27
    1674:	ef 93       	push	r30
    1676:	ff 93       	push	r31
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTWO != NULL_PTR)
    1680:	80 91 8e 01 	lds	r24, 0x018E
    1684:	90 91 8f 01 	lds	r25, 0x018F
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	29 f0       	breq	.+10     	; 0x1696 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrTWO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    168c:	e0 91 8e 01 	lds	r30, 0x018E
    1690:	f0 91 8f 01 	lds	r31, 0x018F
    1694:	09 95       	icall
	}
}
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	ff 91       	pop	r31
    169c:	ef 91       	pop	r30
    169e:	bf 91       	pop	r27
    16a0:	af 91       	pop	r26
    16a2:	9f 91       	pop	r25
    16a4:	8f 91       	pop	r24
    16a6:	7f 91       	pop	r23
    16a8:	6f 91       	pop	r22
    16aa:	5f 91       	pop	r21
    16ac:	4f 91       	pop	r20
    16ae:	3f 91       	pop	r19
    16b0:	2f 91       	pop	r18
    16b2:	0f 90       	pop	r0
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	0f 90       	pop	r0
    16b8:	1f 90       	pop	r1
    16ba:	18 95       	reti

000016bc <__vector_4>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER2_COMP_vect)
{
    16bc:	1f 92       	push	r1
    16be:	0f 92       	push	r0
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	0f 92       	push	r0
    16c4:	11 24       	eor	r1, r1
    16c6:	2f 93       	push	r18
    16c8:	3f 93       	push	r19
    16ca:	4f 93       	push	r20
    16cc:	5f 93       	push	r21
    16ce:	6f 93       	push	r22
    16d0:	7f 93       	push	r23
    16d2:	8f 93       	push	r24
    16d4:	9f 93       	push	r25
    16d6:	af 93       	push	r26
    16d8:	bf 93       	push	r27
    16da:	ef 93       	push	r30
    16dc:	ff 93       	push	r31
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTWO != NULL_PTR)
    16e6:	80 91 8e 01 	lds	r24, 0x018E
    16ea:	90 91 8f 01 	lds	r25, 0x018F
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	29 f0       	breq	.+10     	; 0x16fc <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrTWO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    16f2:	e0 91 8e 01 	lds	r30, 0x018E
    16f6:	f0 91 8f 01 	lds	r31, 0x018F
    16fa:	09 95       	icall
	}
}
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	ff 91       	pop	r31
    1702:	ef 91       	pop	r30
    1704:	bf 91       	pop	r27
    1706:	af 91       	pop	r26
    1708:	9f 91       	pop	r25
    170a:	8f 91       	pop	r24
    170c:	7f 91       	pop	r23
    170e:	6f 91       	pop	r22
    1710:	5f 91       	pop	r21
    1712:	4f 91       	pop	r20
    1714:	3f 91       	pop	r19
    1716:	2f 91       	pop	r18
    1718:	0f 90       	pop	r0
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	0f 90       	pop	r0
    171e:	1f 90       	pop	r1
    1720:	18 95       	reti

00001722 <Timer0_Init>:
/**------------------------Timer ZERO-----------------------**/
/*
 * Initializing Timer0
 */
void Timer0_Init(const Timer0_ConfigType *Config_Ptr)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	00 d0       	rcall	.+0      	; 0x1728 <Timer0_Init+0x6>
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	9a 83       	std	Y+2, r25	; 0x02
    172e:	89 83       	std	Y+1, r24	; 0x01
	/* Selecting Force Output Compare */
	TCCR0 = (TCCR0 & 0x7F) | ((Config_Ptr->Timer0_ForceCompare)<<FOC0);
    1730:	a3 e5       	ldi	r26, 0x53	; 83
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e3 e5       	ldi	r30, 0x53	; 83
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	28 2f       	mov	r18, r24
    173c:	2f 77       	andi	r18, 0x7F	; 127
    173e:	e9 81       	ldd	r30, Y+1	; 0x01
    1740:	fa 81       	ldd	r31, Y+2	; 0x02
    1742:	81 81       	ldd	r24, Z+1	; 0x01
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	96 95       	lsr	r25
    174a:	98 2f       	mov	r25, r24
    174c:	88 27       	eor	r24, r24
    174e:	97 95       	ror	r25
    1750:	87 95       	ror	r24
    1752:	82 2b       	or	r24, r18
    1754:	8c 93       	st	X, r24

	/* Selecting the WaveForm Generation */
	TCCR0 = (TCCR0 & 0xBF) | (((Config_Ptr->Timer0_WaveForm)<<7)>>1);
    1756:	a3 e5       	ldi	r26, 0x53	; 83
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e3 e5       	ldi	r30, 0x53	; 83
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	28 2f       	mov	r18, r24
    1762:	2f 7b       	andi	r18, 0xBF	; 191
    1764:	e9 81       	ldd	r30, Y+1	; 0x01
    1766:	fa 81       	ldd	r31, Y+2	; 0x02
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	96 95       	lsr	r25
    1770:	98 2f       	mov	r25, r24
    1772:	88 27       	eor	r24, r24
    1774:	97 95       	ror	r25
    1776:	87 95       	ror	r24
    1778:	95 95       	asr	r25
    177a:	87 95       	ror	r24
    177c:	82 2b       	or	r24, r18
    177e:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xF7) | (((Config_Ptr->Timer0_WaveForm)>>1)<<WGM01);
    1780:	a3 e5       	ldi	r26, 0x53	; 83
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e3 e5       	ldi	r30, 0x53	; 83
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	28 2f       	mov	r18, r24
    178c:	27 7f       	andi	r18, 0xF7	; 247
    178e:	e9 81       	ldd	r30, Y+1	; 0x01
    1790:	fa 81       	ldd	r31, Y+2	; 0x02
    1792:	82 81       	ldd	r24, Z+2	; 0x02
    1794:	86 95       	lsr	r24
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	82 2b       	or	r24, r18
    17a8:	8c 93       	st	X, r24

	/* Select Compare Match output mode */
	TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->Timer0_CompareMode)<<4);
    17aa:	a3 e5       	ldi	r26, 0x53	; 83
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e3 e5       	ldi	r30, 0x53	; 83
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	28 2f       	mov	r18, r24
    17b6:	2f 7c       	andi	r18, 0xCF	; 207
    17b8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ba:	fa 81       	ldd	r31, Y+2	; 0x02
    17bc:	83 81       	ldd	r24, Z+3	; 0x03
    17be:	88 2f       	mov	r24, r24
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	82 95       	swap	r24
    17c4:	92 95       	swap	r25
    17c6:	90 7f       	andi	r25, 0xF0	; 240
    17c8:	98 27       	eor	r25, r24
    17ca:	80 7f       	andi	r24, 0xF0	; 240
    17cc:	98 27       	eor	r25, r24
    17ce:	82 2b       	or	r24, r18
    17d0:	8c 93       	st	X, r24

	/* Select the Prescaler Value */
	TCCR0 = (TCCR0 & 0xF8) | ((Config_Ptr->Timer0_PreScaler));
    17d2:	a3 e5       	ldi	r26, 0x53	; 83
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e3 e5       	ldi	r30, 0x53	; 83
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	98 2f       	mov	r25, r24
    17de:	98 7f       	andi	r25, 0xF8	; 248
    17e0:	e9 81       	ldd	r30, Y+1	; 0x01
    17e2:	fa 81       	ldd	r31, Y+2	; 0x02
    17e4:	80 81       	ld	r24, Z
    17e6:	89 2b       	or	r24, r25
    17e8:	8c 93       	st	X, r24

	/* Choosing the OVF value */
	TCNT0 = Config_Ptr->Timer0_TCNT0_Value;
    17ea:	a2 e5       	ldi	r26, 0x52	; 82
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e9 81       	ldd	r30, Y+1	; 0x01
    17f0:	fa 81       	ldd	r31, Y+2	; 0x02
    17f2:	86 81       	ldd	r24, Z+6	; 0x06
    17f4:	8c 93       	st	X, r24

	/* Choosing OCR0 value */
	OCR0 = Config_Ptr->Timer0_OCR0_Value;
    17f6:	ac e5       	ldi	r26, 0x5C	; 92
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e9 81       	ldd	r30, Y+1	; 0x01
    17fc:	fa 81       	ldd	r31, Y+2	; 0x02
    17fe:	87 81       	ldd	r24, Z+7	; 0x07
    1800:	8c 93       	st	X, r24

	/* Enabling Interrupt for Compare */
	TIMSK = (TIMSK & 0xFD) | ((Config_Ptr->Timer0_COMP_INT)<<OCIE0);
    1802:	a9 e5       	ldi	r26, 0x59	; 89
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e9 e5       	ldi	r30, 0x59	; 89
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	28 2f       	mov	r18, r24
    180e:	2d 7f       	andi	r18, 0xFD	; 253
    1810:	e9 81       	ldd	r30, Y+1	; 0x01
    1812:	fa 81       	ldd	r31, Y+2	; 0x02
    1814:	84 81       	ldd	r24, Z+4	; 0x04
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	82 2b       	or	r24, r18
    1820:	8c 93       	st	X, r24

	/* Enabling Interrupts for OVF */
	TIMSK = (TIMSK & 0xFE) | ((Config_Ptr->Timer0_OVF_INT));
    1822:	a9 e5       	ldi	r26, 0x59	; 89
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e9 e5       	ldi	r30, 0x59	; 89
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	98 2f       	mov	r25, r24
    182e:	9e 7f       	andi	r25, 0xFE	; 254
    1830:	e9 81       	ldd	r30, Y+1	; 0x01
    1832:	fa 81       	ldd	r31, Y+2	; 0x02
    1834:	85 81       	ldd	r24, Z+5	; 0x05
    1836:	89 2b       	or	r24, r25
    1838:	8c 93       	st	X, r24
}
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <Timer0_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer0_deInit(void)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    184c:	e3 e5       	ldi	r30, 0x53	; 83
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	10 82       	st	Z, r1
	TIMSK = (TIMSK & 0xFC);
    1852:	a9 e5       	ldi	r26, 0x59	; 89
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e9 e5       	ldi	r30, 0x59	; 89
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	8c 7f       	andi	r24, 0xFC	; 252
    185e:	8c 93       	st	X, r24
}
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <Timer0_setCallBackZERO>:

/*-------------------------------------------------------------------*/
/* Description: Function to set the Call Back function address. */
void Timer0_setCallBackZERO(void(*a_ptr)(void))
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	00 d0       	rcall	.+0      	; 0x186c <Timer0_setCallBackZERO+0x6>
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	9a 83       	std	Y+2, r25	; 0x02
    1872:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrZERO = a_ptr;
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	9a 81       	ldd	r25, Y+2	; 0x02
    1878:	90 93 8b 01 	sts	0x018B, r25
    187c:	80 93 8a 01 	sts	0x018A, r24
}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <Timer0_PWM_Init>:

/*
 * Initializing Timer0_PWM
 */
void Timer0_PWM_Init(const Timer0_ConfigType *Config_Ptr)
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	00 d0       	rcall	.+0      	; 0x1890 <Timer0_PWM_Init+0x6>
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Set Timer Initial Value to 0 */
    1898:	e2 e5       	ldi	r30, 0x52	; 82
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	10 82       	st	Z, r1

	/* Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC */
	GPIO_setupPinDirection(PWM0_PORT_ID, PWM0_PIN_ID, PIN_OUTPUT);
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	63 e0       	ldi	r22, 0x03	; 3
    18a2:	41 e0       	ldi	r20, 0x01	; 1
    18a4:	0e 94 21 07 	call	0xe42	; 0xe42 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = Dependent on the user
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01);
    18a8:	e3 e5       	ldi	r30, 0x53	; 83
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	88 e6       	ldi	r24, 0x68	; 104
    18ae:	80 83       	st	Z, r24
	TCCR0 |= Config_Ptr->Timer0_PreScaler;
    18b0:	a3 e5       	ldi	r26, 0x53	; 83
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e3 e5       	ldi	r30, 0x53	; 83
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	90 81       	ld	r25, Z
    18ba:	e9 81       	ldd	r30, Y+1	; 0x01
    18bc:	fa 81       	ldd	r31, Y+2	; 0x02
    18be:	80 81       	ld	r24, Z
    18c0:	89 2b       	or	r24, r25
    18c2:	8c 93       	st	X, r24
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <Timer0_PWM_Activate>:

/*
 * Setting Timer0_PWM
 */
void Timer0_PWM_Activate(uint8 *SetDuty_Ptr)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <Timer0_PWM_Activate+0x6>
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	9a 83       	std	Y+2, r25	; 0x02
    18da:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Set Timer Initial Value to 0 */
    18dc:	e2 e5       	ldi	r30, 0x52	; 82
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	10 82       	st	Z, r1
	OCR0  = *SetDuty_Ptr; /* Set Compare Value */
    18e2:	ac e5       	ldi	r26, 0x5C	; 92
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e9 81       	ldd	r30, Y+1	; 0x01
    18e8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ea:	80 81       	ld	r24, Z
    18ec:	8c 93       	st	X, r24
}
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <Timer1_Init>:

/*
 * Initializing TIMER0
 */
void Timer1_Init(const Timer1_ConfigType *Config_Ptr)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <Timer1_Init+0x6>
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	9a 83       	std	Y+2, r25	; 0x02
    1904:	89 83       	std	Y+1, r24	; 0x01
	/* Compare Output Mode for channel A */
	TCCR1A = (TCCR1A & 0x3F) | (Config_Ptr->CompareModeA<<6);
    1906:	af e4       	ldi	r26, 0x4F	; 79
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	ef e4       	ldi	r30, 0x4F	; 79
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	28 2f       	mov	r18, r24
    1912:	2f 73       	andi	r18, 0x3F	; 63
    1914:	e9 81       	ldd	r30, Y+1	; 0x01
    1916:	fa 81       	ldd	r31, Y+2	; 0x02
    1918:	80 81       	ld	r24, Z
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	00 24       	eor	r0, r0
    1920:	96 95       	lsr	r25
    1922:	87 95       	ror	r24
    1924:	07 94       	ror	r0
    1926:	96 95       	lsr	r25
    1928:	87 95       	ror	r24
    192a:	07 94       	ror	r0
    192c:	98 2f       	mov	r25, r24
    192e:	80 2d       	mov	r24, r0
    1930:	82 2b       	or	r24, r18
    1932:	8c 93       	st	X, r24

	/* Compare Output Mode for channel B */
	TCCR1A = (TCCR1A & 0xCF) | (Config_Ptr->CompareModeB<<4);
    1934:	af e4       	ldi	r26, 0x4F	; 79
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	ef e4       	ldi	r30, 0x4F	; 79
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	28 2f       	mov	r18, r24
    1940:	2f 7c       	andi	r18, 0xCF	; 207
    1942:	e9 81       	ldd	r30, Y+1	; 0x01
    1944:	fa 81       	ldd	r31, Y+2	; 0x02
    1946:	81 81       	ldd	r24, Z+1	; 0x01
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	82 95       	swap	r24
    194e:	92 95       	swap	r25
    1950:	90 7f       	andi	r25, 0xF0	; 240
    1952:	98 27       	eor	r25, r24
    1954:	80 7f       	andi	r24, 0xF0	; 240
    1956:	98 27       	eor	r25, r24
    1958:	82 2b       	or	r24, r18
    195a:	8c 93       	st	X, r24

	/* Force Output Compare for Channel A */
	TCCR1A = (TCCR1A & 0xF7) | (Config_Ptr->ForceCompareA<<3);
    195c:	af e4       	ldi	r26, 0x4F	; 79
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	ef e4       	ldi	r30, 0x4F	; 79
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	28 2f       	mov	r18, r24
    1968:	27 7f       	andi	r18, 0xF7	; 247
    196a:	e9 81       	ldd	r30, Y+1	; 0x01
    196c:	fa 81       	ldd	r31, Y+2	; 0x02
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	82 2b       	or	r24, r18
    1982:	8c 93       	st	X, r24

	/* Force Output Compare for Channel B */
	TCCR1A = (TCCR1A & 0xFB) | (Config_Ptr->ForceCompareB<<2);
    1984:	af e4       	ldi	r26, 0x4F	; 79
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	ef e4       	ldi	r30, 0x4F	; 79
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	28 2f       	mov	r18, r24
    1990:	2b 7f       	andi	r18, 0xFB	; 251
    1992:	e9 81       	ldd	r30, Y+1	; 0x01
    1994:	fa 81       	ldd	r31, Y+2	; 0x02
    1996:	83 81       	ldd	r24, Z+3	; 0x03
    1998:	88 2f       	mov	r24, r24
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	82 2b       	or	r24, r18
    19a6:	8c 93       	st	X, r24

	/* Setting the waveform */
	TCCR1A = (TCCR1A & 0xFC) | ((Config_Ptr->WaveForm<<6)>>6); /* Getting the first 2 bits only */
    19a8:	af e4       	ldi	r26, 0x4F	; 79
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ef e4       	ldi	r30, 0x4F	; 79
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	28 2f       	mov	r18, r24
    19b4:	2c 7f       	andi	r18, 0xFC	; 252
    19b6:	e9 81       	ldd	r30, Y+1	; 0x01
    19b8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ba:	87 81       	ldd	r24, Z+7	; 0x07
    19bc:	88 2f       	mov	r24, r24
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	00 24       	eor	r0, r0
    19c2:	96 95       	lsr	r25
    19c4:	87 95       	ror	r24
    19c6:	07 94       	ror	r0
    19c8:	96 95       	lsr	r25
    19ca:	87 95       	ror	r24
    19cc:	07 94       	ror	r0
    19ce:	98 2f       	mov	r25, r24
    19d0:	80 2d       	mov	r24, r0
    19d2:	08 2e       	mov	r0, r24
    19d4:	89 2f       	mov	r24, r25
    19d6:	00 0c       	add	r0, r0
    19d8:	88 1f       	adc	r24, r24
    19da:	99 0b       	sbc	r25, r25
    19dc:	00 0c       	add	r0, r0
    19de:	88 1f       	adc	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	82 2b       	or	r24, r18
    19e4:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xE7) | ((Config_Ptr->WaveForm>>2)<<3); /* Getting bit 2 and 3 only*/
    19e6:	ae e4       	ldi	r26, 0x4E	; 78
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	ee e4       	ldi	r30, 0x4E	; 78
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	28 2f       	mov	r18, r24
    19f2:	27 7e       	andi	r18, 0xE7	; 231
    19f4:	e9 81       	ldd	r30, Y+1	; 0x01
    19f6:	fa 81       	ldd	r31, Y+2	; 0x02
    19f8:	87 81       	ldd	r24, Z+7	; 0x07
    19fa:	86 95       	lsr	r24
    19fc:	86 95       	lsr	r24
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	82 2b       	or	r24, r18
    1a10:	8c 93       	st	X, r24

	/* Noise Canceler */
	TCCR1B = (TCCR1B & 0x7F) | ((Config_Ptr->NoiseControl)<<7);
    1a12:	ae e4       	ldi	r26, 0x4E	; 78
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	ee e4       	ldi	r30, 0x4E	; 78
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	2f 77       	andi	r18, 0x7F	; 127
    1a20:	e9 81       	ldd	r30, Y+1	; 0x01
    1a22:	fa 81       	ldd	r31, Y+2	; 0x02
    1a24:	85 81       	ldd	r24, Z+5	; 0x05
    1a26:	88 2f       	mov	r24, r24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	96 95       	lsr	r25
    1a2c:	98 2f       	mov	r25, r24
    1a2e:	88 27       	eor	r24, r24
    1a30:	97 95       	ror	r25
    1a32:	87 95       	ror	r24
    1a34:	82 2b       	or	r24, r18
    1a36:	8c 93       	st	X, r24

	/* Edge Select */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->EdgeControl)<<ICES1);
    1a38:	ae e4       	ldi	r26, 0x4E	; 78
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	ee e4       	ldi	r30, 0x4E	; 78
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	28 2f       	mov	r18, r24
    1a44:	2f 7b       	andi	r18, 0xBF	; 191
    1a46:	e9 81       	ldd	r30, Y+1	; 0x01
    1a48:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4a:	84 81       	ldd	r24, Z+4	; 0x04
    1a4c:	88 2f       	mov	r24, r24
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	00 24       	eor	r0, r0
    1a52:	96 95       	lsr	r25
    1a54:	87 95       	ror	r24
    1a56:	07 94       	ror	r0
    1a58:	96 95       	lsr	r25
    1a5a:	87 95       	ror	r24
    1a5c:	07 94       	ror	r0
    1a5e:	98 2f       	mov	r25, r24
    1a60:	80 2d       	mov	r24, r0
    1a62:	82 2b       	or	r24, r18
    1a64:	8c 93       	st	X, r24

	/* Clock Selection */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->F_TIMER1_CLOCK);
    1a66:	ae e4       	ldi	r26, 0x4E	; 78
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	ee e4       	ldi	r30, 0x4E	; 78
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	98 2f       	mov	r25, r24
    1a72:	98 7f       	andi	r25, 0xF8	; 248
    1a74:	e9 81       	ldd	r30, Y+1	; 0x01
    1a76:	fa 81       	ldd	r31, Y+2	; 0x02
    1a78:	86 81       	ldd	r24, Z+6	; 0x06
    1a7a:	89 2b       	or	r24, r25
    1a7c:	8c 93       	st	X, r24

	/* Enable compare A interrupt */
	TIMSK = (TIMSK & 0xEF) | ((Config_Ptr->interruptA)<<OCIE1A);
    1a7e:	a9 e5       	ldi	r26, 0x59	; 89
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e9 e5       	ldi	r30, 0x59	; 89
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	28 2f       	mov	r18, r24
    1a8a:	2f 7e       	andi	r18, 0xEF	; 239
    1a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a90:	80 85       	ldd	r24, Z+8	; 0x08
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	82 95       	swap	r24
    1a98:	92 95       	swap	r25
    1a9a:	90 7f       	andi	r25, 0xF0	; 240
    1a9c:	98 27       	eor	r25, r24
    1a9e:	80 7f       	andi	r24, 0xF0	; 240
    1aa0:	98 27       	eor	r25, r24
    1aa2:	82 2b       	or	r24, r18
    1aa4:	8c 93       	st	X, r24

	/* Enable compare B interrupt */
	TIMSK = (TIMSK & 0xF7) | ((Config_Ptr->interruptB)<<OCIE1B);
    1aa6:	a9 e5       	ldi	r26, 0x59	; 89
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e9 e5       	ldi	r30, 0x59	; 89
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	27 7f       	andi	r18, 0xF7	; 247
    1ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab8:	81 85       	ldd	r24, Z+9	; 0x09
    1aba:	88 2f       	mov	r24, r24
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	82 2b       	or	r24, r18
    1acc:	8c 93       	st	X, r24

	/* Enable OverFlow interrupt */
	TIMSK = (TIMSK & 0xFB) | ((Config_Ptr->interruptOvf)<<TOIE1);
    1ace:	a9 e5       	ldi	r26, 0x59	; 89
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e9 e5       	ldi	r30, 0x59	; 89
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	28 2f       	mov	r18, r24
    1ada:	2b 7f       	andi	r18, 0xFB	; 251
    1adc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ade:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae0:	82 85       	ldd	r24, Z+10	; 0x0a
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	82 2b       	or	r24, r18
    1af0:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = Config_Ptr->TCNT1_Value;
    1af2:	ac e4       	ldi	r26, 0x4C	; 76
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e9 81       	ldd	r30, Y+1	; 0x01
    1af8:	fa 81       	ldd	r31, Y+2	; 0x02
    1afa:	83 85       	ldd	r24, Z+11	; 0x0b
    1afc:	94 85       	ldd	r25, Z+12	; 0x0c
    1afe:	11 96       	adiw	r26, 0x01	; 1
    1b00:	9c 93       	st	X, r25
    1b02:	8e 93       	st	-X, r24

	/* Initializing the compare value register */
	OCR1A = Config_Ptr->OCR1A_Value;
    1b04:	aa e4       	ldi	r26, 0x4A	; 74
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0c:	85 85       	ldd	r24, Z+13	; 0x0d
    1b0e:	96 85       	ldd	r25, Z+14	; 0x0e
    1b10:	11 96       	adiw	r26, 0x01	; 1
    1b12:	9c 93       	st	X, r25
    1b14:	8e 93       	st	-X, r24
	OCR1B = Config_Ptr->OCR1B_Value;
    1b16:	a8 e4       	ldi	r26, 0x48	; 72
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1e:	87 85       	ldd	r24, Z+15	; 0x0f
    1b20:	90 89       	ldd	r25, Z+16	; 0x10
    1b22:	11 96       	adiw	r26, 0x01	; 1
    1b24:	9c 93       	st	X, r25
    1b26:	8e 93       	st	-X, r24
}
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <Timer1_setCallBackONE>:
/*-------------------------------------------------------------------*/

/* Description: Function to set the Call Back function address. */
void Timer1_setCallBackONE(void(*a_ptr)(void))
{
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <Timer1_setCallBackONE+0x6>
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrONE = a_ptr;
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	90 93 8d 01 	sts	0x018D, r25
    1b48:	80 93 8c 01 	sts	0x018C, r24
}
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <Timer1_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer1_deInit()
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1b5e:	ef e4       	ldi	r30, 0x4F	; 79
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	10 82       	st	Z, r1
	TCCR1B = 0;
    1b64:	ee e4       	ldi	r30, 0x4E	; 78
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	10 82       	st	Z, r1
	TIMSK = TIMSK & 0xC3;
    1b6a:	a9 e5       	ldi	r26, 0x59	; 89
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e9 e5       	ldi	r30, 0x59	; 89
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	83 7c       	andi	r24, 0xC3	; 195
    1b76:	8c 93       	st	X, r24
}
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <Timer2_Init>:
/**------------------------Timer TWO-----------------------**/
/*
 * Initializing Timer2
 */
void Timer2_Init(const Timer2_ConfigType *Config_Ptr)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <Timer2_Init+0x6>
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	9a 83       	std	Y+2, r25	; 0x02
    1b8a:	89 83       	std	Y+1, r24	; 0x01
	/* Selecting Force Output Compare */
		TCCR2 = (TCCR2 & 0x7F) | ((Config_Ptr->Timer2_ForceCompare)<<FOC2);
    1b8c:	a5 e4       	ldi	r26, 0x45	; 69
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e5 e4       	ldi	r30, 0x45	; 69
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	28 2f       	mov	r18, r24
    1b98:	2f 77       	andi	r18, 0x7F	; 127
    1b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	96 95       	lsr	r25
    1ba6:	98 2f       	mov	r25, r24
    1ba8:	88 27       	eor	r24, r24
    1baa:	97 95       	ror	r25
    1bac:	87 95       	ror	r24
    1bae:	82 2b       	or	r24, r18
    1bb0:	8c 93       	st	X, r24

		/* Selecting the WaveForm Generation */
		TCCR2 = (TCCR2 & 0xBF) | (((Config_Ptr->Timer2_WaveForm)<<7)>>1);
    1bb2:	a5 e4       	ldi	r26, 0x45	; 69
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e5 e4       	ldi	r30, 0x45	; 69
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	2f 7b       	andi	r18, 0xBF	; 191
    1bc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc4:	82 81       	ldd	r24, Z+2	; 0x02
    1bc6:	88 2f       	mov	r24, r24
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	96 95       	lsr	r25
    1bcc:	98 2f       	mov	r25, r24
    1bce:	88 27       	eor	r24, r24
    1bd0:	97 95       	ror	r25
    1bd2:	87 95       	ror	r24
    1bd4:	95 95       	asr	r25
    1bd6:	87 95       	ror	r24
    1bd8:	82 2b       	or	r24, r18
    1bda:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xF7) | (((Config_Ptr->Timer2_WaveForm)>>1)<<WGM21);
    1bdc:	a5 e4       	ldi	r26, 0x45	; 69
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e5 e4       	ldi	r30, 0x45	; 69
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	28 2f       	mov	r18, r24
    1be8:	27 7f       	andi	r18, 0xF7	; 247
    1bea:	e9 81       	ldd	r30, Y+1	; 0x01
    1bec:	fa 81       	ldd	r31, Y+2	; 0x02
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	86 95       	lsr	r24
    1bf2:	88 2f       	mov	r24, r24
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	82 2b       	or	r24, r18
    1c04:	8c 93       	st	X, r24

		/* Select Compare Match output mode */
		TCCR2 = (TCCR2 & 0xCF) | ((Config_Ptr->Timer2_CompareMode)<<4);
    1c06:	a5 e4       	ldi	r26, 0x45	; 69
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e5 e4       	ldi	r30, 0x45	; 69
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	28 2f       	mov	r18, r24
    1c12:	2f 7c       	andi	r18, 0xCF	; 207
    1c14:	e9 81       	ldd	r30, Y+1	; 0x01
    1c16:	fa 81       	ldd	r31, Y+2	; 0x02
    1c18:	83 81       	ldd	r24, Z+3	; 0x03
    1c1a:	88 2f       	mov	r24, r24
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	82 95       	swap	r24
    1c20:	92 95       	swap	r25
    1c22:	90 7f       	andi	r25, 0xF0	; 240
    1c24:	98 27       	eor	r25, r24
    1c26:	80 7f       	andi	r24, 0xF0	; 240
    1c28:	98 27       	eor	r25, r24
    1c2a:	82 2b       	or	r24, r18
    1c2c:	8c 93       	st	X, r24

		/* Select the Prescaler Value */
		TCCR2 = (TCCR2 & 0xF8) | ((Config_Ptr->Timer2_PreScaler));
    1c2e:	a5 e4       	ldi	r26, 0x45	; 69
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e5 e4       	ldi	r30, 0x45	; 69
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	98 2f       	mov	r25, r24
    1c3a:	98 7f       	andi	r25, 0xF8	; 248
    1c3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c40:	80 81       	ld	r24, Z
    1c42:	89 2b       	or	r24, r25
    1c44:	8c 93       	st	X, r24

		/* Choosing the OVF value */
		TCNT0 = Config_Ptr->Timer2_TCNT2_Value;
    1c46:	a2 e5       	ldi	r26, 0x52	; 82
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4e:	86 81       	ldd	r24, Z+6	; 0x06
    1c50:	8c 93       	st	X, r24

		/* Choosing OCR2 value */
		OCR2 = Config_Ptr->Timer2_OCR2_Value;
    1c52:	a3 e4       	ldi	r26, 0x43	; 67
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e9 81       	ldd	r30, Y+1	; 0x01
    1c58:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5a:	87 81       	ldd	r24, Z+7	; 0x07
    1c5c:	8c 93       	st	X, r24

		/* Enabling Interrupt for Compare */
		TIMSK = (TIMSK & 0x7F) | ((Config_Ptr->Timer2_COMP_INT)<<OCIE2);
    1c5e:	a9 e5       	ldi	r26, 0x59	; 89
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e9 e5       	ldi	r30, 0x59	; 89
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	28 2f       	mov	r18, r24
    1c6a:	2f 77       	andi	r18, 0x7F	; 127
    1c6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c70:	84 81       	ldd	r24, Z+4	; 0x04
    1c72:	88 2f       	mov	r24, r24
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	96 95       	lsr	r25
    1c78:	98 2f       	mov	r25, r24
    1c7a:	88 27       	eor	r24, r24
    1c7c:	97 95       	ror	r25
    1c7e:	87 95       	ror	r24
    1c80:	82 2b       	or	r24, r18
    1c82:	8c 93       	st	X, r24

		/* Enabling Interrupts for OVF */
		TIMSK = (TIMSK & 0xBF) | ((Config_Ptr->Timer2_OVF_INT));
    1c84:	a9 e5       	ldi	r26, 0x59	; 89
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e9 e5       	ldi	r30, 0x59	; 89
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	98 2f       	mov	r25, r24
    1c90:	9f 7b       	andi	r25, 0xBF	; 191
    1c92:	e9 81       	ldd	r30, Y+1	; 0x01
    1c94:	fa 81       	ldd	r31, Y+2	; 0x02
    1c96:	85 81       	ldd	r24, Z+5	; 0x05
    1c98:	89 2b       	or	r24, r25
    1c9a:	8c 93       	st	X, r24
}
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <Timer2_PWM_Init>:

/*
 * Initializing Timer2_PWM
 */
void Timer2_PWM_Init(const Timer2_ConfigType *Config_Ptr)
{
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <Timer2_PWM_Init+0x6>
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	9a 83       	std	Y+2, r25	; 0x02
    1cb2:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = 0; /* Set Timer Initial Value to 0 */
    1cb4:	e4 e4       	ldi	r30, 0x44	; 68
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	10 82       	st	Z, r1

	/* Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC */
	GPIO_setupPinDirection(PWM2_PORT_ID, PWM2_PIN_ID, PIN_OUTPUT);
    1cba:	83 e0       	ldi	r24, 0x03	; 3
    1cbc:	67 e0       	ldi	r22, 0x07	; 7
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	0e 94 21 07 	call	0xe42	; 0xe42 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = Dependent on the user
	 */
	TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21);
    1cc4:	e5 e4       	ldi	r30, 0x45	; 69
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	88 e6       	ldi	r24, 0x68	; 104
    1cca:	80 83       	st	Z, r24
	TCCR2 |= Config_Ptr->Timer2_PreScaler;
    1ccc:	a5 e4       	ldi	r26, 0x45	; 69
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e5 e4       	ldi	r30, 0x45	; 69
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	90 81       	ld	r25, Z
    1cd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cda:	80 81       	ld	r24, Z
    1cdc:	89 2b       	or	r24, r25
    1cde:	8c 93       	st	X, r24
}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <Timer2_PWM_Activate>:

/*
 * Setting Timer2_PWM
 */
void Timer2_PWM_Activate(uint8 *SetDuty_Ptr)
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <Timer2_PWM_Activate+0x6>
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = 0; /* Set Timer Initial Value to 0 */
    1cf8:	e4 e4       	ldi	r30, 0x44	; 68
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	10 82       	st	Z, r1
	OCR2  = *SetDuty_Ptr; /* Set Compare Value */
    1cfe:	a3 e4       	ldi	r26, 0x43	; 67
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e9 81       	ldd	r30, Y+1	; 0x01
    1d04:	fa 81       	ldd	r31, Y+2	; 0x02
    1d06:	80 81       	ld	r24, Z
    1d08:	8c 93       	st	X, r24
}
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <Timer2_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer2_deInit(void)
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0;
    1d1c:	e5 e4       	ldi	r30, 0x45	; 69
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	10 82       	st	Z, r1
	TIMSK = (TIMSK & 0x3F);
    1d22:	a9 e5       	ldi	r26, 0x59	; 89
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e9 e5       	ldi	r30, 0x59	; 89
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	8f 73       	andi	r24, 0x3F	; 63
    1d2e:	8c 93       	st	X, r24
}
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <Timer2_setCallBackTWO>:

/*-------------------------------------------------------------------*/
/* Description: Function to set the Call Back function address. */
void Timer2_setCallBackTWO(void(*a_ptr)(void))
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <Timer2_setCallBackTWO+0x6>
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	9a 83       	std	Y+2, r25	; 0x02
    1d42:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrTWO = a_ptr;
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	90 93 8f 01 	sts	0x018F, r25
    1d4c:	80 93 8e 01 	sts	0x018E, r24
}
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <UART_init>:
/*
 * Description:
 *
 */
void UART_init(UART_ConfigType *Config_Ptr)
{
    1d5a:	ef 92       	push	r14
    1d5c:	ff 92       	push	r15
    1d5e:	0f 93       	push	r16
    1d60:	1f 93       	push	r17
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <UART_init+0xe>
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <UART_init+0x10>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	9c 83       	std	Y+4, r25	; 0x04
    1d70:	8b 83       	std	Y+3, r24	; 0x03
	/**-------------------------Local Variables---------------------**/
	/* UBRR_VALUE will be used to set the baud rate later */
	uint16 a_ubrr_value = 0;
    1d72:	1a 82       	std	Y+2, r1	; 0x02
    1d74:	19 82       	std	Y+1, r1	; 0x01
	/**-------------------------END Local Variables-----------------**/

	/* Setting the transmission speed */
	UCSRA = (UCSRA & 0xFD) | ((Config_Ptr->transmitSpeed)<<U2X);
    1d76:	ab e2       	ldi	r26, 0x2B	; 43
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	eb e2       	ldi	r30, 0x2B	; 43
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	28 2f       	mov	r18, r24
    1d82:	2d 7f       	andi	r18, 0xFD	; 253
    1d84:	eb 81       	ldd	r30, Y+3	; 0x03
    1d86:	fc 81       	ldd	r31, Y+4	; 0x04
    1d88:	80 81       	ld	r24, Z
    1d8a:	88 2f       	mov	r24, r24
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	82 2b       	or	r24, r18
    1d94:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the INTERRUPT for RX */
	UCSRB = (UCSRB & 0x7F) | ((Config_Ptr->receiverINT)<<RXCIE);
    1d96:	aa e2       	ldi	r26, 0x2A	; 42
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	ea e2       	ldi	r30, 0x2A	; 42
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	28 2f       	mov	r18, r24
    1da2:	2f 77       	andi	r18, 0x7F	; 127
    1da4:	eb 81       	ldd	r30, Y+3	; 0x03
    1da6:	fc 81       	ldd	r31, Y+4	; 0x04
    1da8:	81 81       	ldd	r24, Z+1	; 0x01
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	96 95       	lsr	r25
    1db0:	98 2f       	mov	r25, r24
    1db2:	88 27       	eor	r24, r24
    1db4:	97 95       	ror	r25
    1db6:	87 95       	ror	r24
    1db8:	82 2b       	or	r24, r18
    1dba:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the INTERRUPT for TX */
	UCSRB = (UCSRB & 0x7F) | ((Config_Ptr->transmitterINT)<<TXCIE);
    1dbc:	aa e2       	ldi	r26, 0x2A	; 42
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	ea e2       	ldi	r30, 0x2A	; 42
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	2f 77       	andi	r18, 0x7F	; 127
    1dca:	eb 81       	ldd	r30, Y+3	; 0x03
    1dcc:	fc 81       	ldd	r31, Y+4	; 0x04
    1dce:	82 81       	ldd	r24, Z+2	; 0x02
    1dd0:	88 2f       	mov	r24, r24
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	00 24       	eor	r0, r0
    1dd6:	96 95       	lsr	r25
    1dd8:	87 95       	ror	r24
    1dda:	07 94       	ror	r0
    1ddc:	96 95       	lsr	r25
    1dde:	87 95       	ror	r24
    1de0:	07 94       	ror	r0
    1de2:	98 2f       	mov	r25, r24
    1de4:	80 2d       	mov	r24, r0
    1de6:	82 2b       	or	r24, r18
    1de8:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the data register empty INTERRUPT */
	UCSRB = (UCSRB & 0xDF) | ((Config_Ptr->emptyINT)<<UDRIE);
    1dea:	aa e2       	ldi	r26, 0x2A	; 42
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	ea e2       	ldi	r30, 0x2A	; 42
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	28 2f       	mov	r18, r24
    1df6:	2f 7d       	andi	r18, 0xDF	; 223
    1df8:	eb 81       	ldd	r30, Y+3	; 0x03
    1dfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1dfc:	83 81       	ldd	r24, Z+3	; 0x03
    1dfe:	88 2f       	mov	r24, r24
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	82 95       	swap	r24
    1e08:	92 95       	swap	r25
    1e0a:	90 7f       	andi	r25, 0xF0	; 240
    1e0c:	98 27       	eor	r25, r24
    1e0e:	80 7f       	andi	r24, 0xF0	; 240
    1e10:	98 27       	eor	r25, r24
    1e12:	82 2b       	or	r24, r18
    1e14:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Receiver Enable */
	UCSRB = (UCSRB & 0xEF) | ((Config_Ptr->receiverEN)<<RXEN);
    1e16:	aa e2       	ldi	r26, 0x2A	; 42
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	ea e2       	ldi	r30, 0x2A	; 42
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	28 2f       	mov	r18, r24
    1e22:	2f 7e       	andi	r18, 0xEF	; 239
    1e24:	eb 81       	ldd	r30, Y+3	; 0x03
    1e26:	fc 81       	ldd	r31, Y+4	; 0x04
    1e28:	84 81       	ldd	r24, Z+4	; 0x04
    1e2a:	88 2f       	mov	r24, r24
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	82 95       	swap	r24
    1e30:	92 95       	swap	r25
    1e32:	90 7f       	andi	r25, 0xF0	; 240
    1e34:	98 27       	eor	r25, r24
    1e36:	80 7f       	andi	r24, 0xF0	; 240
    1e38:	98 27       	eor	r25, r24
    1e3a:	82 2b       	or	r24, r18
    1e3c:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Transmitter Enable */
	UCSRB = (UCSRB & 0xF7) | ((Config_Ptr->transmitterEN)<<TXEN);
    1e3e:	aa e2       	ldi	r26, 0x2A	; 42
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	ea e2       	ldi	r30, 0x2A	; 42
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	28 2f       	mov	r18, r24
    1e4a:	27 7f       	andi	r18, 0xF7	; 247
    1e4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e50:	85 81       	ldd	r24, Z+5	; 0x05
    1e52:	88 2f       	mov	r24, r24
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	82 2b       	or	r24, r18
    1e64:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the character size on two separate register  */
	/* Adding only the third-bit to UCSRB and the 2 least bits to UCSRC */
	UCSRB = (UCSRB & 0xFB) | (((Config_Ptr->charSize)>>2)<<UCSZ2);
    1e66:	aa e2       	ldi	r26, 0x2A	; 42
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	ea e2       	ldi	r30, 0x2A	; 42
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	28 2f       	mov	r18, r24
    1e72:	2b 7f       	andi	r18, 0xFB	; 251
    1e74:	eb 81       	ldd	r30, Y+3	; 0x03
    1e76:	fc 81       	ldd	r31, Y+4	; 0x04
    1e78:	86 81       	ldd	r24, Z+6	; 0x06
    1e7a:	86 95       	lsr	r24
    1e7c:	86 95       	lsr	r24
    1e7e:	88 2f       	mov	r24, r24
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	88 0f       	add	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	82 2b       	or	r24, r18
    1e8c:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr->charSize)<<6)>>5);
    1e8e:	a0 e4       	ldi	r26, 0x40	; 64
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e0 e4       	ldi	r30, 0x40	; 64
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	28 2f       	mov	r18, r24
    1e9a:	29 7f       	andi	r18, 0xF9	; 249
    1e9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea0:	86 81       	ldd	r24, Z+6	; 0x06
    1ea2:	88 2f       	mov	r24, r24
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	00 24       	eor	r0, r0
    1ea8:	96 95       	lsr	r25
    1eaa:	87 95       	ror	r24
    1eac:	07 94       	ror	r0
    1eae:	96 95       	lsr	r25
    1eb0:	87 95       	ror	r24
    1eb2:	07 94       	ror	r0
    1eb4:	98 2f       	mov	r25, r24
    1eb6:	80 2d       	mov	r24, r0
    1eb8:	95 95       	asr	r25
    1eba:	87 95       	ror	r24
    1ebc:	95 95       	asr	r25
    1ebe:	87 95       	ror	r24
    1ec0:	95 95       	asr	r25
    1ec2:	87 95       	ror	r24
    1ec4:	95 95       	asr	r25
    1ec6:	87 95       	ror	r24
    1ec8:	95 95       	asr	r25
    1eca:	87 95       	ror	r24
    1ecc:	82 2b       	or	r24, r18
    1ece:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* USART Reg Select between UCSRC & UBRRH */
	UCSRC = (UCSRC & 0x7F) | ((Config_Ptr->regSelect)<<URSEL);
    1ed0:	a0 e4       	ldi	r26, 0x40	; 64
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e0 e4       	ldi	r30, 0x40	; 64
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	28 2f       	mov	r18, r24
    1edc:	2f 77       	andi	r18, 0x7F	; 127
    1ede:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee2:	87 81       	ldd	r24, Z+7	; 0x07
    1ee4:	88 2f       	mov	r24, r24
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	96 95       	lsr	r25
    1eea:	98 2f       	mov	r25, r24
    1eec:	88 27       	eor	r24, r24
    1eee:	97 95       	ror	r25
    1ef0:	87 95       	ror	r24
    1ef2:	82 2b       	or	r24, r18
    1ef4:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* USART Mode Select: 1- A-Synch , 2- Synch */
	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr->modeSelect)<<UMSEL);
    1ef6:	a0 e4       	ldi	r26, 0x40	; 64
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e0 e4       	ldi	r30, 0x40	; 64
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	28 2f       	mov	r18, r24
    1f02:	2f 7b       	andi	r18, 0xBF	; 191
    1f04:	eb 81       	ldd	r30, Y+3	; 0x03
    1f06:	fc 81       	ldd	r31, Y+4	; 0x04
    1f08:	80 85       	ldd	r24, Z+8	; 0x08
    1f0a:	88 2f       	mov	r24, r24
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	00 24       	eor	r0, r0
    1f10:	96 95       	lsr	r25
    1f12:	87 95       	ror	r24
    1f14:	07 94       	ror	r0
    1f16:	96 95       	lsr	r25
    1f18:	87 95       	ror	r24
    1f1a:	07 94       	ror	r0
    1f1c:	98 2f       	mov	r25, r24
    1f1e:	80 2d       	mov	r24, r0
    1f20:	82 2b       	or	r24, r18
    1f22:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the parity mode : Disabled/Even/ODD */
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->paritySelect)<<4);
    1f24:	a0 e4       	ldi	r26, 0x40	; 64
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e0 e4       	ldi	r30, 0x40	; 64
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	28 2f       	mov	r18, r24
    1f30:	2f 7c       	andi	r18, 0xCF	; 207
    1f32:	eb 81       	ldd	r30, Y+3	; 0x03
    1f34:	fc 81       	ldd	r31, Y+4	; 0x04
    1f36:	81 85       	ldd	r24, Z+9	; 0x09
    1f38:	88 2f       	mov	r24, r24
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	82 95       	swap	r24
    1f3e:	92 95       	swap	r25
    1f40:	90 7f       	andi	r25, 0xF0	; 240
    1f42:	98 27       	eor	r25, r24
    1f44:	80 7f       	andi	r24, 0xF0	; 240
    1f46:	98 27       	eor	r25, r24
    1f48:	82 2b       	or	r24, r18
    1f4a:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the stop bit mode: 1-bit and 2-bit */
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stopBitSelect)<<USBS);
    1f4c:	a0 e4       	ldi	r26, 0x40	; 64
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e0 e4       	ldi	r30, 0x40	; 64
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	28 2f       	mov	r18, r24
    1f58:	27 7f       	andi	r18, 0xF7	; 247
    1f5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f5e:	82 85       	ldd	r24, Z+10	; 0x0a
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	82 2b       	or	r24, r18
    1f72:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the clock Polarity: Rising and Falling */
	UCSRC = (UCSRC & 0xFE) | (Config_Ptr->clockPolatiry);
    1f74:	a0 e4       	ldi	r26, 0x40	; 64
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e0 e4       	ldi	r30, 0x40	; 64
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	98 2f       	mov	r25, r24
    1f80:	9e 7f       	andi	r25, 0xFE	; 254
    1f82:	eb 81       	ldd	r30, Y+3	; 0x03
    1f84:	fc 81       	ldd	r31, Y+4	; 0x04
    1f86:	83 85       	ldd	r24, Z+11	; 0x0b
    1f88:	89 2b       	or	r24, r25
    1f8a:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the baud rate */
	/* At first you should calculate the UBRR value */
	a_ubrr_value = (uint16)((F_CPU*(Config_Ptr->transmitSpeed+1)/((Config_Ptr->baud_rate)*(16)))-1);
    1f8c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f8e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f90:	80 81       	ld	r24, Z
    1f92:	88 2f       	mov	r24, r24
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	01 96       	adiw	r24, 0x01	; 1
    1f98:	aa 27       	eor	r26, r26
    1f9a:	97 fd       	sbrc	r25, 7
    1f9c:	a0 95       	com	r26
    1f9e:	ba 2f       	mov	r27, r26
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	32 e1       	ldi	r19, 0x12	; 18
    1fa4:	4a e7       	ldi	r20, 0x7A	; 122
    1fa6:	50 e0       	ldi	r21, 0x00	; 0
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	0e 94 13 13 	call	0x2626	; 0x2626 <__mulsi3>
    1fb0:	7b 01       	movw	r14, r22
    1fb2:	8c 01       	movw	r16, r24
    1fb4:	eb 81       	ldd	r30, Y+3	; 0x03
    1fb6:	fc 81       	ldd	r31, Y+4	; 0x04
    1fb8:	84 85       	ldd	r24, Z+12	; 0x0c
    1fba:	95 85       	ldd	r25, Z+13	; 0x0d
    1fbc:	a6 85       	ldd	r26, Z+14	; 0x0e
    1fbe:	b7 85       	ldd	r27, Z+15	; 0x0f
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	aa 1f       	adc	r26, r26
    1fc6:	bb 1f       	adc	r27, r27
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	aa 1f       	adc	r26, r26
    1fce:	bb 1f       	adc	r27, r27
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	aa 1f       	adc	r26, r26
    1fd6:	bb 1f       	adc	r27, r27
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	aa 1f       	adc	r26, r26
    1fde:	bb 1f       	adc	r27, r27
    1fe0:	9c 01       	movw	r18, r24
    1fe2:	ad 01       	movw	r20, r26
    1fe4:	c8 01       	movw	r24, r16
    1fe6:	b7 01       	movw	r22, r14
    1fe8:	0e 94 32 13 	call	0x2664	; 0x2664 <__udivmodsi4>
    1fec:	da 01       	movw	r26, r20
    1fee:	c9 01       	movw	r24, r18
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	9a 83       	std	Y+2, r25	; 0x02
    1ff4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = a_ubrr_value>>8;
    1ff6:	e0 e4       	ldi	r30, 0x40	; 64
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	89 2f       	mov	r24, r25
    2000:	99 27       	eor	r25, r25
    2002:	80 83       	st	Z, r24
	UBRRL = a_ubrr_value;
    2004:	e9 e2       	ldi	r30, 0x29	; 41
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	80 83       	st	Z, r24

	/*----------------------------END--------------------------------*/
}
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	ff 90       	pop	r15
    201e:	ef 90       	pop	r14
    2020:	08 95       	ret

00002022 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	0f 92       	push	r0
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	89 83       	std	Y+1, r24	; 0x01
	/* Need to wait till the buffer is ready to get a new data */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    202e:	eb e2       	ldi	r30, 0x2B	; 43
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	80 72       	andi	r24, 0x20	; 32
    203a:	90 70       	andi	r25, 0x00	; 0
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	b9 f3       	breq	.-18     	; 0x202e <UART_sendByte+0xc>

	/* When it's ready then send it  */
	UDR = data;
    2040:	ec e2       	ldi	r30, 0x2C	; 44
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	80 83       	st	Z, r24
}
    2048:	0f 90       	pop	r0
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
	/* Waiting till we get a new data */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2058:	eb e2       	ldi	r30, 0x2B	; 43
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	88 23       	and	r24, r24
    2060:	dc f7       	brge	.-10     	; 0x2058 <UART_receiveByte+0x8>

	/* Return it after getting it */
	return UDR;
    2062:	ec e2       	ldi	r30, 0x2C	; 44
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
}
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	00 d0       	rcall	.+0      	; 0x2074 <UART_sendString+0x6>
    2074:	0f 92       	push	r0
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	9b 83       	std	Y+3, r25	; 0x03
    207c:	8a 83       	std	Y+2, r24	; 0x02
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;
    207e:	19 82       	std	Y+1, r1	; 0x01
    2080:	0e c0       	rjmp	.+28     	; 0x209e <UART_sendString+0x30>

	/* Sending byte by byte using UART_sendByte functio */
	while(Str[a_stringCounter] != '\0')
	{
		UART_sendByte(Str[a_stringCounter]);
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	9b 81       	ldd	r25, Y+3	; 0x03
    208c:	fc 01       	movw	r30, r24
    208e:	e2 0f       	add	r30, r18
    2090:	f3 1f       	adc	r31, r19
    2092:	80 81       	ld	r24, Z
    2094:	0e 94 11 10 	call	0x2022	; 0x2022 <UART_sendByte>
		a_stringCounter++;
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	8f 5f       	subi	r24, 0xFF	; 255
    209c:	89 83       	std	Y+1, r24	; 0x01
{
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;

	/* Sending byte by byte using UART_sendByte functio */
	while(Str[a_stringCounter] != '\0')
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	9b 81       	ldd	r25, Y+3	; 0x03
    20a8:	fc 01       	movw	r30, r24
    20aa:	e2 0f       	add	r30, r18
    20ac:	f3 1f       	adc	r31, r19
    20ae:	80 81       	ld	r24, Z
    20b0:	88 23       	and	r24, r24
    20b2:	39 f7       	brne	.-50     	; 0x2082 <UART_sendString+0x14>
	{
		UART_sendByte(Str[a_stringCounter]);
		a_stringCounter++;
	}
}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    20c0:	0f 93       	push	r16
    20c2:	1f 93       	push	r17
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <UART_receiveString+0xa>
    20ca:	0f 92       	push	r0
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	9b 83       	std	Y+3, r25	; 0x03
    20d2:	8a 83       	std	Y+2, r24	; 0x02
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;
    20d4:	19 82       	std	Y+1, r1	; 0x01

	Str[a_stringCounter] = UART_receiveByte();
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	8c 01       	movw	r16, r24
    20e2:	02 0f       	add	r16, r18
    20e4:	13 1f       	adc	r17, r19
    20e6:	0e 94 28 10 	call	0x2050	; 0x2050 <UART_receiveByte>
    20ea:	f8 01       	movw	r30, r16
    20ec:	80 83       	st	Z, r24
    20ee:	0f c0       	rjmp	.+30     	; 0x210e <UART_receiveString+0x4e>

	/* We will start check for a specific character which means to us a null char*/
	while(Str[a_stringCounter] != '=')
	{
		a_stringCounter++;
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	8f 5f       	subi	r24, 0xFF	; 255
    20f4:	89 83       	std	Y+1, r24	; 0x01
		Str[a_stringCounter] = UART_receiveByte();
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	8c 01       	movw	r16, r24
    2102:	02 0f       	add	r16, r18
    2104:	13 1f       	adc	r17, r19
    2106:	0e 94 28 10 	call	0x2050	; 0x2050 <UART_receiveByte>
    210a:	f8 01       	movw	r30, r16
    210c:	80 83       	st	Z, r24
	uint8 a_stringCounter = 0;

	Str[a_stringCounter] = UART_receiveByte();

	/* We will start check for a specific character which means to us a null char*/
	while(Str[a_stringCounter] != '=')
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	9b 81       	ldd	r25, Y+3	; 0x03
    2118:	fc 01       	movw	r30, r24
    211a:	e2 0f       	add	r30, r18
    211c:	f3 1f       	adc	r31, r19
    211e:	80 81       	ld	r24, Z
    2120:	8d 33       	cpi	r24, 0x3D	; 61
    2122:	31 f7       	brne	.-52     	; 0x20f0 <UART_receiveString+0x30>
		a_stringCounter++;
		Str[a_stringCounter] = UART_receiveByte();
	}

	/* Then redefining the string by replacing the stop char with NULL char */
	Str[a_stringCounter] = '\0';
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	9b 81       	ldd	r25, Y+3	; 0x03
    212e:	fc 01       	movw	r30, r24
    2130:	e2 0f       	add	r30, r18
    2132:	f3 1f       	adc	r31, r19
    2134:	10 82       	st	Z, r1
}
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	1f 91       	pop	r17
    2142:	0f 91       	pop	r16
    2144:	08 95       	ret

00002146 <DCMotor_init>:
#include "../MCAL/Header/TIMER.h"

/**-------------------------Function Definition Section-------------**/

void DCMotor_init()
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Motor is connected to L293D Driver
	 */
	GPIO_setupPinDirection(DC_MOTOR_IN1_OUTPUT_PORT_ID, L293D_IN1_ID, PIN_OUTPUT);
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 21 07 	call	0xe42	; 0xe42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN2_OUTPUT_PORT_ID, L293D_IN2_ID, PIN_OUTPUT);
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	61 e0       	ldi	r22, 0x01	; 1
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	0e 94 21 07 	call	0xe42	; 0xe42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_EN_PORT_ID, 		L293D_EN1_ID, PIN_OUTPUT);
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	63 e0       	ldi	r22, 0x03	; 3
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	0e 94 21 07 	call	0xe42	; 0xe42 <GPIO_setupPinDirection>

} /* End DCMotor_init function */
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <DcMotor_Rotate>:

/*----------------------------------------------------------------------------*/

void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	00 d0       	rcall	.+0      	; 0x2178 <DcMotor_Rotate+0x6>
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	6a 83       	std	Y+2, r22	; 0x02
	/* Selecting the Direction of the MOTOR */
	if(state == ClockWise)
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	88 23       	and	r24, r24
    2184:	59 f4       	brne	.+22     	; 0x219c <DcMotor_Rotate+0x2a>
	{
		GPIO_writePin(DC_MOTOR_IN1_OUTPUT_PORT_ID, L293D_IN1_ID, LOGIC_HIGH);
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	41 e0       	ldi	r20, 0x01	; 1
    218c:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_OUTPUT_PORT_ID, L293D_IN2_ID, LOGIC_LOW);
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	61 e0       	ldi	r22, 0x01	; 1
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
    219a:	0d c0       	rjmp	.+26     	; 0x21b6 <DcMotor_Rotate+0x44>
	}
	else if(state == Anti_ClockWise)
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	81 30       	cpi	r24, 0x01	; 1
    21a0:	51 f4       	brne	.+20     	; 0x21b6 <DcMotor_Rotate+0x44>
	{
		GPIO_writePin(DC_MOTOR_IN2_OUTPUT_PORT_ID, L293D_IN2_ID, LOGIC_HIGH);
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	61 e0       	ldi	r22, 0x01	; 1
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN1_OUTPUT_PORT_ID, L293D_IN1_ID, LOGIC_LOW);
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	40 e0       	ldi	r20, 0x00	; 0
    21b2:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
	}

	/* Sending the compare value to Timer everytime to change the motor speed */
	Timer0_PWM_Activate(&speed);
    21b6:	ce 01       	movw	r24, r28
    21b8:	02 96       	adiw	r24, 0x02	; 2
    21ba:	0e 94 67 0c 	call	0x18ce	; 0x18ce <Timer0_PWM_Activate>
}
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <DCMotor_stop>:

/*----------------------------------------------------------------------------*/

void DCMotor_stop()
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	0f 92       	push	r0
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
	uint8 Speed = 0;
    21d2:	19 82       	std	Y+1, r1	; 0x01
	Timer0_PWM_Activate(&Speed); /* Sending speed 0 to DCMotor_Speed() */
    21d4:	ce 01       	movw	r24, r28
    21d6:	01 96       	adiw	r24, 0x01	; 1
    21d8:	0e 94 67 0c 	call	0x18ce	; 0x18ce <Timer0_PWM_Activate>
}   /* End DCMotor_stop()function */
    21dc:	0f 90       	pop	r0
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <ServoMotor_Rotate>:
/*
 * Description:
 * Initializing SERVO Motor
 */
void ServoMotor_Rotate(uint8 angle)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <ServoMotor_Rotate+0x6>
    21ea:	0f 92       	push	r0
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 PWM_Duration = 0;
    21f2:	1a 82       	std	Y+2, r1	; 0x02
    21f4:	19 82       	std	Y+1, r1	; 0x01


	if(angle >= SERVO_MIN_ANGLE && angle <= SERVO_MAX_ANGLE)
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	8b 35       	cpi	r24, 0x5B	; 91
    21fa:	a8 f4       	brcc	.+42     	; 0x2226 <ServoMotor_Rotate+0x42>
	{
		if(angle == 90)
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	8a 35       	cpi	r24, 0x5A	; 90
    2200:	49 f4       	brne	.+18     	; 0x2214 <ServoMotor_Rotate+0x30>
		{
			PWM_Duration = PWM_MAX;
    2202:	8e ef       	ldi	r24, 0xFE	; 254
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9a 83       	std	Y+2, r25	; 0x02
    2208:	89 83       	std	Y+1, r24	; 0x01
			Timer2_PWM_Activate(&PWM_Duration);
    220a:	ce 01       	movw	r24, r28
    220c:	01 96       	adiw	r24, 0x01	; 1
    220e:	0e 94 75 0e 	call	0x1cea	; 0x1cea <Timer2_PWM_Activate>
    2212:	09 c0       	rjmp	.+18     	; 0x2226 <ServoMotor_Rotate+0x42>
		}
		else if(angle == 0)
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	88 23       	and	r24, r24
    2218:	31 f4       	brne	.+12     	; 0x2226 <ServoMotor_Rotate+0x42>
		{
			PWM_Duration = PWM_MIN;
    221a:	1a 82       	std	Y+2, r1	; 0x02
    221c:	19 82       	std	Y+1, r1	; 0x01
			Timer2_PWM_Activate(&PWM_Duration);
    221e:	ce 01       	movw	r24, r28
    2220:	01 96       	adiw	r24, 0x01	; 1
    2222:	0e 94 75 0e 	call	0x1cea	; 0x1cea <Timer2_PWM_Activate>
	{
		 /* Do nothing */
	}

	return;
}
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <Buzzer_init>:
/*
 * Description:
 * Initializing Buzzer Pins
 */
void Buzzer_init()
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
	/* Setting up the Pin direction */
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    223a:	83 e0       	ldi	r24, 0x03	; 3
    223c:	66 e0       	ldi	r22, 0x06	; 6
    223e:	41 e0       	ldi	r20, 0x01	; 1
    2240:	0e 94 21 07 	call	0xe42	; 0xe42 <GPIO_setupPinDirection>

	/* Turning Buzzer OFF at first */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    2244:	83 e0       	ldi	r24, 0x03	; 3
    2246:	66 e0       	ldi	r22, 0x06	; 6
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
}
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <Buzzer_on>:
/*
 * Description:
 * Turning Buzzer ON
 */
void Buzzer_on(void)
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
	/* Setting Buzzer Pin to high */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    225c:	83 e0       	ldi	r24, 0x03	; 3
    225e:	66 e0       	ldi	r22, 0x06	; 6
    2260:	41 e0       	ldi	r20, 0x01	; 1
    2262:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
}
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <Buzzer_off>:
/*
 * Description:
 * Turning Buzzer OFF
 */
void Buzzer_off(void)
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
	/* Turning Buzzer OFF at first */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    2274:	83 e0       	ldi	r24, 0x03	; 3
    2276:	66 e0       	ldi	r22, 0x06	; 6
    2278:	40 e0       	ldi	r20, 0x00	; 0
    227a:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
}
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <Potentiometer_getVal>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint16 Potentiometer_getVal(void)
{
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <Potentiometer_getVal+0x6>
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
	uint16 a_potentiometer_value = 0;
    228e:	1a 82       	std	Y+2, r1	; 0x02
    2290:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	a_potentiometer_value = ADC_readChannel(POTENTIOMETER_CHANNEL_ID);
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	0e 94 ed 06 	call	0xdda	; 0xdda <ADC_readChannel>
    2298:	9a 83       	std	Y+2, r25	; 0x02
    229a:	89 83       	std	Y+1, r24	; 0x01

	return a_potentiometer_value;
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <Status_LEDS_Init>:
/*
 * Description:
 * Initializing LEDS
 */
void Status_LEDS_Init(void)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
	/* Initializing PINS direction */
	GPIO_setupPinDirection(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, PIN_OUTPUT);
    22b2:	83 e0       	ldi	r24, 0x03	; 3
    22b4:	63 e0       	ldi	r22, 0x03	; 3
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	0e 94 21 07 	call	0xe42	; 0xe42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(YELLOW_LED_PORT_ID, YELLOW_LED_PIN_ID, PIN_OUTPUT);
    22bc:	83 e0       	ldi	r24, 0x03	; 3
    22be:	64 e0       	ldi	r22, 0x04	; 4
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	0e 94 21 07 	call	0xe42	; 0xe42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(RED_LED_PORT_ID, RED_LED_PIN_ID, PIN_OUTPUT);
    22c6:	83 e0       	ldi	r24, 0x03	; 3
    22c8:	65 e0       	ldi	r22, 0x05	; 5
    22ca:	41 e0       	ldi	r20, 0x01	; 1
    22cc:	0e 94 21 07 	call	0xe42	; 0xe42 <GPIO_setupPinDirection>

	/* Initializing to ZERO */
	GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LOGIC_LOW);
    22d0:	83 e0       	ldi	r24, 0x03	; 3
    22d2:	63 e0       	ldi	r22, 0x03	; 3
    22d4:	40 e0       	ldi	r20, 0x00	; 0
    22d6:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
	GPIO_writePin(YELLOW_LED_PORT_ID, YELLOW_LED_PIN_ID, LOGIC_LOW);
    22da:	83 e0       	ldi	r24, 0x03	; 3
    22dc:	64 e0       	ldi	r22, 0x04	; 4
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
	GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LOGIC_LOW);
    22e4:	83 e0       	ldi	r24, 0x03	; 3
    22e6:	65 e0       	ldi	r22, 0x05	; 5
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
}
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <Status_LEDS_Color>:
/*
 * Description:
 * Activating the required color
 */
void Status_LEDS_Color(Led_State COLOR)
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	0f 92       	push	r0
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	89 83       	std	Y+1, r24	; 0x01
	/* Activate the Required LED */
	if(Green_LED == COLOR)
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	88 23       	and	r24, r24
    2304:	81 f4       	brne	.+32     	; 0x2326 <Status_LEDS_Color+0x32>
	{
		GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LOGIC_HIGH);
    2306:	83 e0       	ldi	r24, 0x03	; 3
    2308:	63 e0       	ldi	r22, 0x03	; 3
    230a:	41 e0       	ldi	r20, 0x01	; 1
    230c:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
		GPIO_writePin(YELLOW_LED_PORT_ID, YELLOW_LED_PIN_ID, LOGIC_LOW);
    2310:	83 e0       	ldi	r24, 0x03	; 3
    2312:	64 e0       	ldi	r22, 0x04	; 4
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
		GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LOGIC_LOW);
    231a:	83 e0       	ldi	r24, 0x03	; 3
    231c:	65 e0       	ldi	r22, 0x05	; 5
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
    2324:	22 c0       	rjmp	.+68     	; 0x236a <Status_LEDS_Color+0x76>
	}
	else if(Yellow_LED == COLOR)
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	81 30       	cpi	r24, 0x01	; 1
    232a:	81 f4       	brne	.+32     	; 0x234c <Status_LEDS_Color+0x58>
	{
		GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LOGIC_LOW);
    232c:	83 e0       	ldi	r24, 0x03	; 3
    232e:	63 e0       	ldi	r22, 0x03	; 3
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
		GPIO_writePin(YELLOW_LED_PORT_ID, YELLOW_LED_PIN_ID, LOGIC_HIGH);
    2336:	83 e0       	ldi	r24, 0x03	; 3
    2338:	64 e0       	ldi	r22, 0x04	; 4
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
		GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LOGIC_LOW);
    2340:	83 e0       	ldi	r24, 0x03	; 3
    2342:	65 e0       	ldi	r22, 0x05	; 5
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
    234a:	0f c0       	rjmp	.+30     	; 0x236a <Status_LEDS_Color+0x76>
	}
	else
	{
		GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LOGIC_LOW);
    234c:	83 e0       	ldi	r24, 0x03	; 3
    234e:	63 e0       	ldi	r22, 0x03	; 3
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
		GPIO_writePin(YELLOW_LED_PORT_ID, YELLOW_LED_PIN_ID, LOGIC_LOW);
    2356:	83 e0       	ldi	r24, 0x03	; 3
    2358:	64 e0       	ldi	r22, 0x04	; 4
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
		GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LOGIC_HIGH);
    2360:	83 e0       	ldi	r24, 0x03	; 3
    2362:	65 e0       	ldi	r22, 0x05	; 5
    2364:	41 e0       	ldi	r20, 0x01	; 1
    2366:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_writePin>
	}
}
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <Drivers_init>:


/**-------------------------Function Section------------------------**/
/* Initializing all drivers */
void Drivers_init(void)
{
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	a7 97       	sbiw	r28, 0x27	; 39
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
	/* Initializing ADC */
	/*
	 * ADC_ReferenceVoltage : AVCC
	 * ADC_Prescaler : F_CPU/128
	 */
	ADC_ConfigType ADC_Config = {AVCC, F_ADC128};
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	87 e0       	ldi	r24, 0x07	; 7
    238c:	8a 83       	std	Y+2, r24	; 0x02
	ADC_init(&ADC_Config);
    238e:	ce 01       	movw	r24, r28
    2390:	01 96       	adiw	r24, 0x01	; 1
    2392:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ADC_init>
	 * UART_STOP_BIT_SELECT : 1-bit
	 * UART_CLOCK_POLARITY : A-sync Rising
	 * baud_rate : 9600
	 *
	 */
	UART_ConfigType UART_Config = {DOUBLE_TR_SPEED,RECEIVE_INT_EN_OFF,TRANSMIT_INT_EN_OFF,EMPTY_INT_EN_OFF,RECEIVER_EN_ON,TRANSMITTER_EN_ON,EIGHT_BIT,UBRRH_REG,ASYNCHRONOUS,PARITY_DISABLE,ONE_BIT,A_Sync_RISING_EDGE,9600};
    2396:	ce 01       	movw	r24, r28
    2398:	03 96       	adiw	r24, 0x03	; 3
    239a:	9c a3       	std	Y+36, r25	; 0x24
    239c:	8b a3       	std	Y+35, r24	; 0x23
    239e:	ea e7       	ldi	r30, 0x7A	; 122
    23a0:	f1 e0       	ldi	r31, 0x01	; 1
    23a2:	fe a3       	std	Y+38, r31	; 0x26
    23a4:	ed a3       	std	Y+37, r30	; 0x25
    23a6:	f0 e1       	ldi	r31, 0x10	; 16
    23a8:	ff a3       	std	Y+39, r31	; 0x27
    23aa:	ed a1       	ldd	r30, Y+37	; 0x25
    23ac:	fe a1       	ldd	r31, Y+38	; 0x26
    23ae:	00 80       	ld	r0, Z
    23b0:	8d a1       	ldd	r24, Y+37	; 0x25
    23b2:	9e a1       	ldd	r25, Y+38	; 0x26
    23b4:	01 96       	adiw	r24, 0x01	; 1
    23b6:	9e a3       	std	Y+38, r25	; 0x26
    23b8:	8d a3       	std	Y+37, r24	; 0x25
    23ba:	eb a1       	ldd	r30, Y+35	; 0x23
    23bc:	fc a1       	ldd	r31, Y+36	; 0x24
    23be:	00 82       	st	Z, r0
    23c0:	8b a1       	ldd	r24, Y+35	; 0x23
    23c2:	9c a1       	ldd	r25, Y+36	; 0x24
    23c4:	01 96       	adiw	r24, 0x01	; 1
    23c6:	9c a3       	std	Y+36, r25	; 0x24
    23c8:	8b a3       	std	Y+35, r24	; 0x23
    23ca:	9f a1       	ldd	r25, Y+39	; 0x27
    23cc:	91 50       	subi	r25, 0x01	; 1
    23ce:	9f a3       	std	Y+39, r25	; 0x27
    23d0:	ef a1       	ldd	r30, Y+39	; 0x27
    23d2:	ee 23       	and	r30, r30
    23d4:	51 f7       	brne	.-44     	; 0x23aa <Drivers_init+0x38>
	UART_init(&UART_Config);
    23d6:	ce 01       	movw	r24, r28
    23d8:	03 96       	adiw	r24, 0x03	; 3
    23da:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <UART_init>
	/* ---------------------------------------- */

	/* Initializing Timer0 PWM */
	Timer0_ConfigType Timer0_PWM_Config;
	Timer0_PWM_Config.Timer0_PreScaler = F0_TIMER64; /* F_CPU/64. Assuming F_PWM = 976.5 Hz */
    23de:	83 e0       	ldi	r24, 0x03	; 3
    23e0:	8b 8b       	std	Y+19, r24	; 0x13
	Timer0_PWM_Init(&Timer0_PWM_Config);
    23e2:	ce 01       	movw	r24, r28
    23e4:	43 96       	adiw	r24, 0x13	; 19
    23e6:	0e 94 45 0c 	call	0x188a	; 0x188a <Timer0_PWM_Init>
	/* ---------------------------------------- */

	/* Initializing Timer2 PWM */
	Timer2_ConfigType Timer2_PWM_Config;
	Timer2_PWM_Config.Timer2_PreScaler = F2_TIMER64; /* F_CPU/64. Assuming F_PWM = 976.5 Hz */
    23ea:	84 e0       	ldi	r24, 0x04	; 4
    23ec:	8b 8f       	std	Y+27, r24	; 0x1b
	Timer2_PWM_Init(&Timer2_PWM_Config);
    23ee:	ce 01       	movw	r24, r28
    23f0:	4b 96       	adiw	r24, 0x1b	; 27
    23f2:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <Timer2_PWM_Init>
	 *  TCNT1_Value : 0
	 *  OCR1A_Value : 7813
	 *  OCR1B_Value : ---
	 */
	/* Setting the callback function*/
	Timer1_setCallBackONE(Timer1_Handler);
    23f6:	89 e3       	ldi	r24, 0x39	; 57
    23f8:	92 e1       	ldi	r25, 0x12	; 18
    23fa:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <Timer1_setCallBackONE>


	/* ---------------------------------------- */

	/* Initializing FAN */
	DCMotor_init();
    23fe:	0e 94 a3 10 	call	0x2146	; 0x2146 <DCMotor_init>
	/* ---------------------------------------- */

	/* Initializing Buzzer */
	Buzzer_init();
    2402:	0e 94 19 11 	call	0x2232	; 0x2232 <Buzzer_init>
	/* ---------------------------------------- */

	/* Initializing Status LEDs */
	Status_LEDS_Init();
    2406:	0e 94 55 11 	call	0x22aa	; 0x22aa <Status_LEDS_Init>
	/* ---------------------------------------- */
	/* Activating Interrupt system */
	SREG |= (1<<7);
    240a:	af e5       	ldi	r26, 0x5F	; 95
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	ef e5       	ldi	r30, 0x5F	; 95
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	80 68       	ori	r24, 0x80	; 128
    2416:	8c 93       	st	X, r24
}
    2418:	a7 96       	adiw	r28, 0x27	; 39
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <main>:

/* ------------------------------------------------------------------ */

int main()
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
	/**-----------------------Local Variables----------------------**/

	/**-----------------------Pre-start Section--------------------**/

	/* Initializing all drivers: UART, DCMotor, Timer0, Timer1, Timer2, Buzzer,ADC, Stepper Motor */
	Drivers_init();
    2432:	0e 94 b9 11 	call	0x2372	; 0x2372 <Drivers_init>
	/**-----------------------Main Section-------------------------**/

	while(1)
	{
		/* State Control function */
		State_Control();
    2436:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <State_Control>

		if(NORMAL_STATE == g_SystemState)
    243a:	80 91 91 01 	lds	r24, 0x0191
    243e:	88 23       	and	r24, r24
    2440:	19 f4       	brne	.+6      	; 0x2448 <main+0x1e>
		{
			/* Operate the Normal instructions */
			Normal_State();
    2442:	0e 94 45 12 	call	0x248a	; 0x248a <Normal_State>
    2446:	f7 cf       	rjmp	.-18     	; 0x2436 <main+0xc>
		}
		else if(EMERGENCY_STATE == g_SystemState)
    2448:	80 91 91 01 	lds	r24, 0x0191
    244c:	81 30       	cpi	r24, 0x01	; 1
    244e:	19 f4       	brne	.+6      	; 0x2456 <main+0x2c>
		{
			/* Operate the Emergency protocol */
			Emergency_State();
    2450:	0e 94 b2 12 	call	0x2564	; 0x2564 <Emergency_State>
    2454:	f0 cf       	rjmp	.-32     	; 0x2436 <main+0xc>
		}
		else if(ABNORMAL_STATE == g_SystemState)
    2456:	80 91 91 01 	lds	r24, 0x0191
    245a:	82 30       	cpi	r24, 0x02	; 2
    245c:	19 f4       	brne	.+6      	; 0x2464 <main+0x3a>
		{
			/* Just call the Abnormal state function */
			Abnormal_State();
    245e:	0e 94 c1 12 	call	0x2582	; 0x2582 <Abnormal_State>
    2462:	e9 cf       	rjmp	.-46     	; 0x2436 <main+0xc>
		}
		else if(SHUTDOWN_STATE == g_SystemState)
    2464:	80 91 91 01 	lds	r24, 0x0191
    2468:	83 30       	cpi	r24, 0x03	; 3
    246a:	29 f7       	brne	.-54     	; 0x2436 <main+0xc>
		{
			ShutDown_State();
    246c:	0e 94 de 12 	call	0x25bc	; 0x25bc <ShutDown_State>
    2470:	e2 cf       	rjmp	.-60     	; 0x2436 <main+0xc>

00002472 <Timer1_Handler>:
/*
 * Description:
 * Will be called when Timer1 interrupts
 */
void Timer1_Handler(void)
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
	/* Increment the counter */
	g_Counter++;
    247a:	80 91 90 01 	lds	r24, 0x0190
    247e:	8f 5f       	subi	r24, 0xFF	; 255
    2480:	80 93 90 01 	sts	0x0190, r24
}
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	08 95       	ret

0000248a <Normal_State>:
/*
 * Description:
 * Controlling Normal state
 */
void Normal_State(void)
{
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	00 d0       	rcall	.+0      	; 0x2490 <Normal_State+0x6>
    2490:	0f 92       	push	r0
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
	/**-----------------------Local Variables----------------------**/
	uint8 a_MCU1_State = 0;
    2496:	1b 82       	std	Y+3, r1	; 0x03
	uint16 a_PotentiometerVal = 0;
    2498:	1a 82       	std	Y+2, r1	; 0x02
    249a:	19 82       	std	Y+1, r1	; 0x01
	/**-----------------------Main Section-------------------------**/
	/* Receive state from MCU1 */
	UART_sendByte(CONTROL_READY);
    249c:	80 e1       	ldi	r24, 0x10	; 16
    249e:	0e 94 11 10 	call	0x2022	; 0x2022 <UART_sendByte>
	a_MCU1_State = UART_receiveByte();
    24a2:	0e 94 28 10 	call	0x2050	; 0x2050 <UART_receiveByte>
    24a6:	8b 83       	std	Y+3, r24	; 0x03

	/* Reset Servo and Buzzer */
	/* Disable the buzzer */
	Buzzer_off();
    24a8:	0e 94 36 11 	call	0x226c	; 0x226c <Buzzer_off>

	/* Servo Motor returns to zero */
	ServoMotor_Rotate(0);
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <ServoMotor_Rotate>

	/* Check on the received byte */
	if('G' == a_MCU1_State || 'Y' == a_MCU1_State || 'R' == a_MCU1_State)
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	87 34       	cpi	r24, 0x47	; 71
    24b6:	39 f0       	breq	.+14     	; 0x24c6 <Normal_State+0x3c>
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	89 35       	cpi	r24, 0x59	; 89
    24bc:	21 f0       	breq	.+8      	; 0x24c6 <Normal_State+0x3c>
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	82 35       	cpi	r24, 0x52	; 82
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <Normal_State+0x3c>
    24c4:	49 c0       	rjmp	.+146    	; 0x2558 <Normal_State+0xce>
	{
		/* Check on the LED color */
		if('G' == a_MCU1_State)
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	87 34       	cpi	r24, 0x47	; 71
    24ca:	39 f4       	brne	.+14     	; 0x24da <Normal_State+0x50>
		{
			Status_LEDS_Color(Green_LED);
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Status_LEDS_Color>

			/* Enable Machine */
			g_MachineEn = 1;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	80 93 68 01 	sts	0x0168, r24
    24d8:	0d c0       	rjmp	.+26     	; 0x24f4 <Normal_State+0x6a>
		}
		else if('Y' == a_MCU1_State)
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	89 35       	cpi	r24, 0x59	; 89
    24de:	39 f4       	brne	.+14     	; 0x24ee <Normal_State+0x64>
		{
			Status_LEDS_Color(Yellow_LED);
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Status_LEDS_Color>

			/* Enable Machine */
			g_MachineEn = 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	80 93 68 01 	sts	0x0168, r24
    24ec:	03 c0       	rjmp	.+6      	; 0x24f4 <Normal_State+0x6a>
		}
		else
		{
			Status_LEDS_Color(Red_LED);
    24ee:	82 e0       	ldi	r24, 0x02	; 2
    24f0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Status_LEDS_Color>
		}

		if(g_MachineEn)
    24f4:	80 91 68 01 	lds	r24, 0x0168
    24f8:	88 23       	and	r24, r24
    24fa:	71 f1       	breq	.+92     	; 0x2558 <Normal_State+0xce>
		{
			/* Read the Potentiometer value */
			a_PotentiometerVal = Potentiometer_getVal();
    24fc:	0e 94 42 11 	call	0x2284	; 0x2284 <Potentiometer_getVal>
    2500:	9a 83       	std	Y+2, r25	; 0x02
    2502:	89 83       	std	Y+1, r24	; 0x01

			/* Enable the Machine */
			DcMotor_Rotate(ClockWise, 255*(a_PotentiometerVal/1023.0));
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	9a 81       	ldd	r25, Y+2	; 0x02
    2508:	cc 01       	movw	r24, r24
    250a:	a0 e0       	ldi	r26, 0x00	; 0
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	bc 01       	movw	r22, r24
    2510:	cd 01       	movw	r24, r26
    2512:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	bc 01       	movw	r22, r24
    251c:	cd 01       	movw	r24, r26
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 ec       	ldi	r19, 0xC0	; 192
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	54 e4       	ldi	r21, 0x44	; 68
    2526:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	bc 01       	movw	r22, r24
    2530:	cd 01       	movw	r24, r26
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	4f e7       	ldi	r20, 0x7F	; 127
    2538:	53 e4       	ldi	r21, 0x43	; 67
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	bc 01       	movw	r22, r24
    2544:	cd 01       	movw	r24, r26
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	98 2f       	mov	r25, r24
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	69 2f       	mov	r22, r25
    2554:	0e 94 b9 10 	call	0x2172	; 0x2172 <DcMotor_Rotate>
	else
	{
		/* Do nothing */
	}

}
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <Emergency_State>:
/*
 * Description:
 * Controlling Emergency state
 */
void Emergency_State(void)
{
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
	/* Enable RED LED */
	Status_LEDS_Color(Red_LED);
    256c:	82 e0       	ldi	r24, 0x02	; 2
    256e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Status_LEDS_Color>

	/* Enable the buzzer */
	Buzzer_on();
    2572:	0e 94 2a 11 	call	0x2254	; 0x2254 <Buzzer_on>

	/* Servo Motor returns to zero */
	ServoMotor_Rotate(0);
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <ServoMotor_Rotate>
}
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <Abnormal_State>:
/*
 * Description:
 * Controlling Abnormal state
 */
void Abnormal_State(void)
{
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
	/* Enable RED LED */
	Status_LEDS_Color(Red_LED);
    258a:	82 e0       	ldi	r24, 0x02	; 2
    258c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Status_LEDS_Color>

	/* Enable the buzzer */
	Buzzer_on();
    2590:	0e 94 2a 11 	call	0x2254	; 0x2254 <Buzzer_on>

	/* Stop the machine */
	DCMotor_stop();
    2594:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <DCMotor_stop>

	/* Servo 90 degrees */
	ServoMotor_Rotate(90);
    2598:	8a e5       	ldi	r24, 0x5A	; 90
    259a:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <ServoMotor_Rotate>

	/* Activate Timer1 for 5 seconds */
	Timer1_Init(&TIMER1_Config);
    259e:	89 e6       	ldi	r24, 0x69	; 105
    25a0:	91 e0       	ldi	r25, 0x01	; 1
    25a2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <Timer1_Init>
	while(g_Counter != 5); /* Wait 5 seconds */
    25a6:	80 91 90 01 	lds	r24, 0x0190
    25aa:	85 30       	cpi	r24, 0x05	; 5
    25ac:	e1 f7       	brne	.-8      	; 0x25a6 <Abnormal_State+0x24>
	Timer1_deInit();
    25ae:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <Timer1_deInit>

	/* Clear Counter */
	g_Counter = 0;
    25b2:	10 92 90 01 	sts	0x0190, r1

}
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	08 95       	ret

000025bc <ShutDown_State>:
/*
 * Description:
 * Controlling Shutdown state if push button was pushed
 */
void ShutDown_State(void)
{
    25bc:	df 93       	push	r29
    25be:	cf 93       	push	r28
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
	/* Stop the MACHINE */
	DCMotor_stop();
    25c4:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <DCMotor_stop>

	/* Enable RED lED */
	Status_LEDS_Color(Red_LED);
    25c8:	82 e0       	ldi	r24, 0x02	; 2
    25ca:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Status_LEDS_Color>

	/*Disable Machine*/
	g_MachineEn = 0;
    25ce:	10 92 68 01 	sts	0x0168, r1
}
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	08 95       	ret

000025d8 <State_Control>:
/*
 * Description:
 * Controlling states
 */
void State_Control(void)
{
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	0f 92       	push	r0
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
	/**-----------------------Local Variables----------------------**/
	uint8 a_MCU1_State = 0;
    25e2:	19 82       	std	Y+1, r1	; 0x01
	/**-----------------------Main Section-------------------------**/
	/* Receive state from MCU1 */
	UART_sendByte(CONTROL_READY);
    25e4:	80 e1       	ldi	r24, 0x10	; 16
    25e6:	0e 94 11 10 	call	0x2022	; 0x2022 <UART_sendByte>
	a_MCU1_State = UART_receiveByte(); /* Receiving only a byte which indicates which state we are */
    25ea:	0e 94 28 10 	call	0x2050	; 0x2050 <UART_receiveByte>
    25ee:	89 83       	std	Y+1, r24	; 0x01

	/* Check on the state */
	if('A' == a_MCU1_State)
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	81 34       	cpi	r24, 0x41	; 65
    25f4:	21 f4       	brne	.+8      	; 0x25fe <State_Control+0x26>
	{
		g_SystemState = ABNORMAL_STATE;
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	80 93 91 01 	sts	0x0191, r24
    25fc:	10 c0       	rjmp	.+32     	; 0x261e <State_Control+0x46>
	}
	else if('E' == a_MCU1_State)
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	85 34       	cpi	r24, 0x45	; 69
    2602:	21 f4       	brne	.+8      	; 0x260c <State_Control+0x34>
	{
		g_SystemState = EMERGENCY_STATE;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	80 93 91 01 	sts	0x0191, r24
    260a:	09 c0       	rjmp	.+18     	; 0x261e <State_Control+0x46>
	}
	else if('S' == a_MCU1_State)
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	83 35       	cpi	r24, 0x53	; 83
    2610:	21 f4       	brne	.+8      	; 0x261a <State_Control+0x42>
	{
		g_SystemState = SHUTDOWN_STATE;
    2612:	83 e0       	ldi	r24, 0x03	; 3
    2614:	80 93 91 01 	sts	0x0191, r24
    2618:	02 c0       	rjmp	.+4      	; 0x261e <State_Control+0x46>
	}
	else
	{
		g_SystemState = NORMAL_STATE;
    261a:	10 92 91 01 	sts	0x0191, r1
	}

	return;
}
    261e:	0f 90       	pop	r0
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <__mulsi3>:
    2626:	62 9f       	mul	r22, r18
    2628:	d0 01       	movw	r26, r0
    262a:	73 9f       	mul	r23, r19
    262c:	f0 01       	movw	r30, r0
    262e:	82 9f       	mul	r24, r18
    2630:	e0 0d       	add	r30, r0
    2632:	f1 1d       	adc	r31, r1
    2634:	64 9f       	mul	r22, r20
    2636:	e0 0d       	add	r30, r0
    2638:	f1 1d       	adc	r31, r1
    263a:	92 9f       	mul	r25, r18
    263c:	f0 0d       	add	r31, r0
    263e:	83 9f       	mul	r24, r19
    2640:	f0 0d       	add	r31, r0
    2642:	74 9f       	mul	r23, r20
    2644:	f0 0d       	add	r31, r0
    2646:	65 9f       	mul	r22, r21
    2648:	f0 0d       	add	r31, r0
    264a:	99 27       	eor	r25, r25
    264c:	72 9f       	mul	r23, r18
    264e:	b0 0d       	add	r27, r0
    2650:	e1 1d       	adc	r30, r1
    2652:	f9 1f       	adc	r31, r25
    2654:	63 9f       	mul	r22, r19
    2656:	b0 0d       	add	r27, r0
    2658:	e1 1d       	adc	r30, r1
    265a:	f9 1f       	adc	r31, r25
    265c:	bd 01       	movw	r22, r26
    265e:	cf 01       	movw	r24, r30
    2660:	11 24       	eor	r1, r1
    2662:	08 95       	ret

00002664 <__udivmodsi4>:
    2664:	a1 e2       	ldi	r26, 0x21	; 33
    2666:	1a 2e       	mov	r1, r26
    2668:	aa 1b       	sub	r26, r26
    266a:	bb 1b       	sub	r27, r27
    266c:	fd 01       	movw	r30, r26
    266e:	0d c0       	rjmp	.+26     	; 0x268a <__udivmodsi4_ep>

00002670 <__udivmodsi4_loop>:
    2670:	aa 1f       	adc	r26, r26
    2672:	bb 1f       	adc	r27, r27
    2674:	ee 1f       	adc	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	a2 17       	cp	r26, r18
    267a:	b3 07       	cpc	r27, r19
    267c:	e4 07       	cpc	r30, r20
    267e:	f5 07       	cpc	r31, r21
    2680:	20 f0       	brcs	.+8      	; 0x268a <__udivmodsi4_ep>
    2682:	a2 1b       	sub	r26, r18
    2684:	b3 0b       	sbc	r27, r19
    2686:	e4 0b       	sbc	r30, r20
    2688:	f5 0b       	sbc	r31, r21

0000268a <__udivmodsi4_ep>:
    268a:	66 1f       	adc	r22, r22
    268c:	77 1f       	adc	r23, r23
    268e:	88 1f       	adc	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	1a 94       	dec	r1
    2694:	69 f7       	brne	.-38     	; 0x2670 <__udivmodsi4_loop>
    2696:	60 95       	com	r22
    2698:	70 95       	com	r23
    269a:	80 95       	com	r24
    269c:	90 95       	com	r25
    269e:	9b 01       	movw	r18, r22
    26a0:	ac 01       	movw	r20, r24
    26a2:	bd 01       	movw	r22, r26
    26a4:	cf 01       	movw	r24, r30
    26a6:	08 95       	ret

000026a8 <__prologue_saves__>:
    26a8:	2f 92       	push	r2
    26aa:	3f 92       	push	r3
    26ac:	4f 92       	push	r4
    26ae:	5f 92       	push	r5
    26b0:	6f 92       	push	r6
    26b2:	7f 92       	push	r7
    26b4:	8f 92       	push	r8
    26b6:	9f 92       	push	r9
    26b8:	af 92       	push	r10
    26ba:	bf 92       	push	r11
    26bc:	cf 92       	push	r12
    26be:	df 92       	push	r13
    26c0:	ef 92       	push	r14
    26c2:	ff 92       	push	r15
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	ca 1b       	sub	r28, r26
    26d2:	db 0b       	sbc	r29, r27
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	09 94       	ijmp

000026e0 <__epilogue_restores__>:
    26e0:	2a 88       	ldd	r2, Y+18	; 0x12
    26e2:	39 88       	ldd	r3, Y+17	; 0x11
    26e4:	48 88       	ldd	r4, Y+16	; 0x10
    26e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    26e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    26ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    26ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    26ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    26f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    26f2:	b9 84       	ldd	r11, Y+9	; 0x09
    26f4:	c8 84       	ldd	r12, Y+8	; 0x08
    26f6:	df 80       	ldd	r13, Y+7	; 0x07
    26f8:	ee 80       	ldd	r14, Y+6	; 0x06
    26fa:	fd 80       	ldd	r15, Y+5	; 0x05
    26fc:	0c 81       	ldd	r16, Y+4	; 0x04
    26fe:	1b 81       	ldd	r17, Y+3	; 0x03
    2700:	aa 81       	ldd	r26, Y+2	; 0x02
    2702:	b9 81       	ldd	r27, Y+1	; 0x01
    2704:	ce 0f       	add	r28, r30
    2706:	d1 1d       	adc	r29, r1
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	ed 01       	movw	r28, r26
    2714:	08 95       	ret

00002716 <_exit>:
    2716:	f8 94       	cli

00002718 <__stop_program>:
    2718:	ff cf       	rjmp	.-2      	; 0x2718 <__stop_program>
