
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00003d46  00003dda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080018a  0080018a  00003f04  2**0
                  ALLOC
  3 .stab         000044dc  00000000  00000000  00003f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00005162  00000000  00000000  000083e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000d542  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000d6e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000d8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000fcdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00011065  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001223c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000123fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000126f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013060  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_4>
      14:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__vector_9>
      28:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__vector_10>
      2c:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <main>
      8a:	0c 94 a1 1e 	jmp	0x3d42	; 0x3d42 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 49 1e 	jmp	0x3c92	; 0x3c92 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 31 1e 	jmp	0x3c62	; 0x3c62 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4d 1e 	jmp	0x3c9a	; 0x3c9a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 35 1e 	jmp	0x3c6a	; 0x3c6a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 51 1e 	jmp	0x3ca2	; 0x3ca2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 49 1e 	jmp	0x3c92	; 0x3c92 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:
/*
 * Description :
 * Function responsible for initialize the ADC driver.
 */
void ADC_init(const ADC_ConfigType *Config_Ptr)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ADC_init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	/* Choosing the Reference voltage */
	ADMUX = (ADMUX & 0x3F) |(Config_Ptr->ref_volt<<6);
     e3c:	a7 e2       	ldi	r26, 0x27	; 39
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e7 e2       	ldi	r30, 0x27	; 39
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	28 2f       	mov	r18, r24
     e48:	2f 73       	andi	r18, 0x3F	; 63
     e4a:	e9 81       	ldd	r30, Y+1	; 0x01
     e4c:	fa 81       	ldd	r31, Y+2	; 0x02
     e4e:	80 81       	ld	r24, Z
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	00 24       	eor	r0, r0
     e56:	96 95       	lsr	r25
     e58:	87 95       	ror	r24
     e5a:	07 94       	ror	r0
     e5c:	96 95       	lsr	r25
     e5e:	87 95       	ror	r24
     e60:	07 94       	ror	r0
     e62:	98 2f       	mov	r25, r24
     e64:	80 2d       	mov	r24, r0
     e66:	82 2b       	or	r24, r18
     e68:	8c 93       	st	X, r24

	/* Activating the ADC */
	SET_BIT(ADCSRA,ADEN);
     e6a:	a6 e2       	ldi	r26, 0x26	; 38
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e6 e2       	ldi	r30, 0x26	; 38
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	80 68       	ori	r24, 0x80	; 128
     e76:	8c 93       	st	X, r24

	/* Setting F_ADC = F_CPU/x */
	ADCSRA = (ADCSRA & 0xF8) | Config_Ptr->prescaler;
     e78:	a6 e2       	ldi	r26, 0x26	; 38
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e6 e2       	ldi	r30, 0x26	; 38
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	98 2f       	mov	r25, r24
     e84:	98 7f       	andi	r25, 0xF8	; 248
     e86:	e9 81       	ldd	r30, Y+1	; 0x01
     e88:	fa 81       	ldd	r31, Y+2	; 0x02
     e8a:	81 81       	ldd	r24, Z+1	; 0x01
     e8c:	89 2b       	or	r24, r25
     e8e:	8c 93       	st	X, r24

}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <ADC_readChannel>:
 * Description :
 * Function responsible for read analog data from a certain ADC channel
 * and convert it to digital using the ADC driver.
 */
uint16 ADC_readChannel(uint8 channel_num)
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	0f 92       	push	r0
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clearing the first 5 bits */
     ea6:	a7 e2       	ldi	r26, 0x27	; 39
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e7 e2       	ldi	r30, 0x27	; 39
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	80 7e       	andi	r24, 0xE0	; 224
     eb2:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choosing which channel will be used*/
     eb4:	a7 e2       	ldi	r26, 0x27	; 39
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e7 e2       	ldi	r30, 0x27	; 39
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	90 81       	ld	r25, Z
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	89 2b       	or	r24, r25
     ec2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start Conversion   */
     ec4:	a6 e2       	ldi	r26, 0x26	; 38
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e6 e2       	ldi	r30, 0x26	; 38
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 64       	ori	r24, 0x40	; 64
     ed0:	8c 93       	st	X, r24

	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Based ON pulling method */
     ed2:	e6 e2       	ldi	r30, 0x26	; 38
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	80 71       	andi	r24, 0x10	; 16
     ede:	90 70       	andi	r25, 0x00	; 0
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	b9 f3       	breq	.-18     	; 0xed2 <ADC_readChannel+0x38>

	SET_BIT(ADCSRA,ADIF); /* Clearing the flag register */
     ee4:	a6 e2       	ldi	r26, 0x26	; 38
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e6 e2       	ldi	r30, 0x26	; 38
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 61       	ori	r24, 0x10	; 16
     ef0:	8c 93       	st	X, r24

	return ADC; /* Read the digital value from the data register */
     ef2:	e4 e2       	ldi	r30, 0x24	; 36
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	91 81       	ldd	r25, Z+1	; 0x01
}
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	00 d0       	rcall	.+0      	; 0xf08 <GPIO_setupPinDirection+0x6>
     f08:	00 d0       	rcall	.+0      	; 0xf0a <GPIO_setupPinDirection+0x8>
     f0a:	0f 92       	push	r0
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	6a 83       	std	Y+2, r22	; 0x02
     f14:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	84 30       	cpi	r24, 0x04	; 4
     f1a:	08 f0       	brcs	.+2      	; 0xf1e <GPIO_setupPinDirection+0x1c>
     f1c:	d5 c0       	rjmp	.+426    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	88 30       	cpi	r24, 0x08	; 8
     f22:	08 f0       	brcs	.+2      	; 0xf26 <GPIO_setupPinDirection+0x24>
     f24:	d1 c0       	rjmp	.+418    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	3d 83       	std	Y+5, r19	; 0x05
     f2e:	2c 83       	std	Y+4, r18	; 0x04
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	9d 81       	ldd	r25, Y+5	; 0x05
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	91 05       	cpc	r25, r1
     f38:	09 f4       	brne	.+2      	; 0xf3c <GPIO_setupPinDirection+0x3a>
     f3a:	43 c0       	rjmp	.+134    	; 0xfc2 <GPIO_setupPinDirection+0xc0>
     f3c:	2c 81       	ldd	r18, Y+4	; 0x04
     f3e:	3d 81       	ldd	r19, Y+5	; 0x05
     f40:	22 30       	cpi	r18, 0x02	; 2
     f42:	31 05       	cpc	r19, r1
     f44:	2c f4       	brge	.+10     	; 0xf50 <GPIO_setupPinDirection+0x4e>
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	9d 81       	ldd	r25, Y+5	; 0x05
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	71 f0       	breq	.+28     	; 0xf6a <GPIO_setupPinDirection+0x68>
     f4e:	bc c0       	rjmp	.+376    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
     f50:	2c 81       	ldd	r18, Y+4	; 0x04
     f52:	3d 81       	ldd	r19, Y+5	; 0x05
     f54:	22 30       	cpi	r18, 0x02	; 2
     f56:	31 05       	cpc	r19, r1
     f58:	09 f4       	brne	.+2      	; 0xf5c <GPIO_setupPinDirection+0x5a>
     f5a:	5f c0       	rjmp	.+190    	; 0x101a <GPIO_setupPinDirection+0x118>
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	9d 81       	ldd	r25, Y+5	; 0x05
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	91 05       	cpc	r25, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <GPIO_setupPinDirection+0x66>
     f66:	85 c0       	rjmp	.+266    	; 0x1072 <GPIO_setupPinDirection+0x170>
     f68:	af c0       	rjmp	.+350    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(direction == PIN_INPUT)
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	88 23       	and	r24, r24
     f6e:	a9 f4       	brne	.+42     	; 0xf9a <GPIO_setupPinDirection+0x98>
			{
				CLEAR_BIT(DDRA,pin_num);
     f70:	aa e3       	ldi	r26, 0x3A	; 58
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ea e3       	ldi	r30, 0x3A	; 58
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <GPIO_setupPinDirection+0x8c>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <GPIO_setupPinDirection+0x88>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	97 c0       	rjmp	.+302    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRA,pin_num);
     f9a:	aa e3       	ldi	r26, 0x3A	; 58
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	ea e3       	ldi	r30, 0x3A	; 58
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <GPIO_setupPinDirection+0xb6>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <GPIO_setupPinDirection+0xb2>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	83 c0       	rjmp	.+262    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(direction == PIN_INPUT)
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 23       	and	r24, r24
     fc6:	a9 f4       	brne	.+42     	; 0xff2 <GPIO_setupPinDirection+0xf0>
			{
				CLEAR_BIT(DDRB,pin_num);
     fc8:	a7 e3       	ldi	r26, 0x37	; 55
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e7 e3       	ldi	r30, 0x37	; 55
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <GPIO_setupPinDirection+0xe4>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <GPIO_setupPinDirection+0xe0>
     fea:	80 95       	com	r24
     fec:	84 23       	and	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	6b c0       	rjmp	.+214    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRB,pin_num);
     ff2:	a7 e3       	ldi	r26, 0x37	; 55
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e7 e3       	ldi	r30, 0x37	; 55
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 2e       	mov	r0, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <GPIO_setupPinDirection+0x10e>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	0a 94       	dec	r0
    1012:	e2 f7       	brpl	.-8      	; 0x100c <GPIO_setupPinDirection+0x10a>
    1014:	84 2b       	or	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	57 c0       	rjmp	.+174    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(direction == PIN_INPUT)
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	88 23       	and	r24, r24
    101e:	a9 f4       	brne	.+42     	; 0x104a <GPIO_setupPinDirection+0x148>
			{
				CLEAR_BIT(DDRC,pin_num);
    1020:	a4 e3       	ldi	r26, 0x34	; 52
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e4 e3       	ldi	r30, 0x34	; 52
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <GPIO_setupPinDirection+0x13c>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <GPIO_setupPinDirection+0x138>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	3f c0       	rjmp	.+126    	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
    104a:	a4 e3       	ldi	r26, 0x34	; 52
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e4 e3       	ldi	r30, 0x34	; 52
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <GPIO_setupPinDirection+0x166>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <GPIO_setupPinDirection+0x162>
    106c:	84 2b       	or	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	2b c0       	rjmp	.+86     	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(direction == PIN_INPUT)
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	88 23       	and	r24, r24
    1076:	a9 f4       	brne	.+42     	; 0x10a2 <GPIO_setupPinDirection+0x1a0>
			{
				CLEAR_BIT(DDRD,pin_num);
    1078:	a1 e3       	ldi	r26, 0x31	; 49
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e1 e3       	ldi	r30, 0x31	; 49
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <GPIO_setupPinDirection+0x194>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <GPIO_setupPinDirection+0x190>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	13 c0       	rjmp	.+38     	; 0x10c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRD,pin_num);
    10a2:	a1 e3       	ldi	r26, 0x31	; 49
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e1 e3       	ldi	r30, 0x31	; 49
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <GPIO_setupPinDirection+0x1be>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <GPIO_setupPinDirection+0x1ba>
    10c4:	84 2b       	or	r24, r20
    10c6:	8c 93       	st	X, r24
			}
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	00 d0       	rcall	.+0      	; 0x10de <GPIO_writePin+0x6>
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <GPIO_writePin+0x8>
    10e0:	0f 92       	push	r0
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	6a 83       	std	Y+2, r22	; 0x02
    10ea:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	84 30       	cpi	r24, 0x04	; 4
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <GPIO_writePin+0x1c>
    10f2:	d5 c0       	rjmp	.+426    	; 0x129e <GPIO_writePin+0x1c6>
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	88 30       	cpi	r24, 0x08	; 8
    10f8:	08 f0       	brcs	.+2      	; 0x10fc <GPIO_writePin+0x24>
    10fa:	d1 c0       	rjmp	.+418    	; 0x129e <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	3d 83       	std	Y+5, r19	; 0x05
    1104:	2c 83       	std	Y+4, r18	; 0x04
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	9d 81       	ldd	r25, Y+5	; 0x05
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	91 05       	cpc	r25, r1
    110e:	09 f4       	brne	.+2      	; 0x1112 <GPIO_writePin+0x3a>
    1110:	43 c0       	rjmp	.+134    	; 0x1198 <GPIO_writePin+0xc0>
    1112:	2c 81       	ldd	r18, Y+4	; 0x04
    1114:	3d 81       	ldd	r19, Y+5	; 0x05
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	2c f4       	brge	.+10     	; 0x1126 <GPIO_writePin+0x4e>
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	71 f0       	breq	.+28     	; 0x1140 <GPIO_writePin+0x68>
    1124:	bc c0       	rjmp	.+376    	; 0x129e <GPIO_writePin+0x1c6>
    1126:	2c 81       	ldd	r18, Y+4	; 0x04
    1128:	3d 81       	ldd	r19, Y+5	; 0x05
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	09 f4       	brne	.+2      	; 0x1132 <GPIO_writePin+0x5a>
    1130:	5f c0       	rjmp	.+190    	; 0x11f0 <GPIO_writePin+0x118>
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	9d 81       	ldd	r25, Y+5	; 0x05
    1136:	83 30       	cpi	r24, 0x03	; 3
    1138:	91 05       	cpc	r25, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <GPIO_writePin+0x66>
    113c:	85 c0       	rjmp	.+266    	; 0x1248 <GPIO_writePin+0x170>
    113e:	af c0       	rjmp	.+350    	; 0x129e <GPIO_writePin+0x1c6>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(value == LOGIC_LOW)
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	88 23       	and	r24, r24
    1144:	a9 f4       	brne	.+42     	; 0x1170 <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA,pin_num);
    1146:	ab e3       	ldi	r26, 0x3B	; 59
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	eb e3       	ldi	r30, 0x3B	; 59
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <GPIO_writePin+0x8c>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <GPIO_writePin+0x88>
    1168:	80 95       	com	r24
    116a:	84 23       	and	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	97 c0       	rjmp	.+302    	; 0x129e <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA,pin_num);
    1170:	ab e3       	ldi	r26, 0x3B	; 59
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	eb e3       	ldi	r30, 0x3B	; 59
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <GPIO_writePin+0xb6>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <GPIO_writePin+0xb2>
    1192:	84 2b       	or	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	83 c0       	rjmp	.+262    	; 0x129e <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(value == LOGIC_LOW)
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	88 23       	and	r24, r24
    119c:	a9 f4       	brne	.+42     	; 0x11c8 <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB,pin_num);
    119e:	a8 e3       	ldi	r26, 0x38	; 56
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e8 e3       	ldi	r30, 0x38	; 56
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <GPIO_writePin+0xe4>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <GPIO_writePin+0xe0>
    11c0:	80 95       	com	r24
    11c2:	84 23       	and	r24, r20
    11c4:	8c 93       	st	X, r24
    11c6:	6b c0       	rjmp	.+214    	; 0x129e <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB,pin_num);
    11c8:	a8 e3       	ldi	r26, 0x38	; 56
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e8 e3       	ldi	r30, 0x38	; 56
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <GPIO_writePin+0x10e>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <GPIO_writePin+0x10a>
    11ea:	84 2b       	or	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	57 c0       	rjmp	.+174    	; 0x129e <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(value == LOGIC_LOW)
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	88 23       	and	r24, r24
    11f4:	a9 f4       	brne	.+42     	; 0x1220 <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC,pin_num);
    11f6:	a5 e3       	ldi	r26, 0x35	; 53
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e5 e3       	ldi	r30, 0x35	; 53
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <GPIO_writePin+0x13c>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <GPIO_writePin+0x138>
    1218:	80 95       	com	r24
    121a:	84 23       	and	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	3f c0       	rjmp	.+126    	; 0x129e <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC,pin_num);
    1220:	a5 e3       	ldi	r26, 0x35	; 53
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e5 e3       	ldi	r30, 0x35	; 53
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_writePin+0x166>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_writePin+0x162>
    1242:	84 2b       	or	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	2b c0       	rjmp	.+86     	; 0x129e <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(value == LOGIC_LOW)
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	88 23       	and	r24, r24
    124c:	a9 f4       	brne	.+42     	; 0x1278 <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD,pin_num);
    124e:	a2 e3       	ldi	r26, 0x32	; 50
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e2 e3       	ldi	r30, 0x32	; 50
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <GPIO_writePin+0x194>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <GPIO_writePin+0x190>
    1270:	80 95       	com	r24
    1272:	84 23       	and	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	13 c0       	rjmp	.+38     	; 0x129e <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD,pin_num);
    1278:	a2 e3       	ldi	r26, 0x32	; 50
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e2 e3       	ldi	r30, 0x32	; 50
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <GPIO_writePin+0x1be>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <GPIO_writePin+0x1ba>
    129a:	84 2b       	or	r24, r20
    129c:	8c 93       	st	X, r24
			}
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <GPIO_readPin+0x6>
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <GPIO_readPin+0x8>
    12b6:	0f 92       	push	r0
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	8a 83       	std	Y+2, r24	; 0x02
    12be:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pinValue = LOGIC_LOW;
    12c0:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	84 30       	cpi	r24, 0x04	; 4
    12c6:	08 f0       	brcs	.+2      	; 0x12ca <GPIO_readPin+0x1c>
    12c8:	84 c0       	rjmp	.+264    	; 0x13d2 <GPIO_readPin+0x124>
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	88 30       	cpi	r24, 0x08	; 8
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <GPIO_readPin+0x24>
    12d0:	80 c0       	rjmp	.+256    	; 0x13d2 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	3d 83       	std	Y+5, r19	; 0x05
    12da:	2c 83       	std	Y+4, r18	; 0x04
    12dc:	4c 81       	ldd	r20, Y+4	; 0x04
    12de:	5d 81       	ldd	r21, Y+5	; 0x05
    12e0:	41 30       	cpi	r20, 0x01	; 1
    12e2:	51 05       	cpc	r21, r1
    12e4:	79 f1       	breq	.+94     	; 0x1344 <GPIO_readPin+0x96>
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ea:	82 30       	cpi	r24, 0x02	; 2
    12ec:	91 05       	cpc	r25, r1
    12ee:	34 f4       	brge	.+12     	; 0x12fc <GPIO_readPin+0x4e>
    12f0:	2c 81       	ldd	r18, Y+4	; 0x04
    12f2:	3d 81       	ldd	r19, Y+5	; 0x05
    12f4:	21 15       	cp	r18, r1
    12f6:	31 05       	cpc	r19, r1
    12f8:	69 f0       	breq	.+26     	; 0x1314 <GPIO_readPin+0x66>
    12fa:	6b c0       	rjmp	.+214    	; 0x13d2 <GPIO_readPin+0x124>
    12fc:	4c 81       	ldd	r20, Y+4	; 0x04
    12fe:	5d 81       	ldd	r21, Y+5	; 0x05
    1300:	42 30       	cpi	r20, 0x02	; 2
    1302:	51 05       	cpc	r21, r1
    1304:	b9 f1       	breq	.+110    	; 0x1374 <GPIO_readPin+0xc6>
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	83 30       	cpi	r24, 0x03	; 3
    130c:	91 05       	cpc	r25, r1
    130e:	09 f4       	brne	.+2      	; 0x1312 <GPIO_readPin+0x64>
    1310:	49 c0       	rjmp	.+146    	; 0x13a4 <GPIO_readPin+0xf6>
    1312:	5f c0       	rjmp	.+190    	; 0x13d2 <GPIO_readPin+0x124>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1314:	e9 e3       	ldi	r30, 0x39	; 57
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a9 01       	movw	r20, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <GPIO_readPin+0x7e>
    1328:	55 95       	asr	r21
    132a:	47 95       	ror	r20
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <GPIO_readPin+0x7a>
    1330:	ca 01       	movw	r24, r20
    1332:	81 70       	andi	r24, 0x01	; 1
    1334:	90 70       	andi	r25, 0x00	; 0
    1336:	88 23       	and	r24, r24
    1338:	19 f0       	breq	.+6      	; 0x1340 <GPIO_readPin+0x92>
			{
				a_pinValue = LOGIC_HIGH;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	49 c0       	rjmp	.+146    	; 0x13d2 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    1340:	19 82       	std	Y+1, r1	; 0x01
    1342:	47 c0       	rjmp	.+142    	; 0x13d2 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1344:	e6 e3       	ldi	r30, 0x36	; 54
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	a9 01       	movw	r20, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <GPIO_readPin+0xae>
    1358:	55 95       	asr	r21
    135a:	47 95       	ror	r20
    135c:	8a 95       	dec	r24
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <GPIO_readPin+0xaa>
    1360:	ca 01       	movw	r24, r20
    1362:	81 70       	andi	r24, 0x01	; 1
    1364:	90 70       	andi	r25, 0x00	; 0
    1366:	88 23       	and	r24, r24
    1368:	19 f0       	breq	.+6      	; 0x1370 <GPIO_readPin+0xc2>
			{
				a_pinValue = LOGIC_HIGH;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	31 c0       	rjmp	.+98     	; 0x13d2 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    1370:	19 82       	std	Y+1, r1	; 0x01
    1372:	2f c0       	rjmp	.+94     	; 0x13d2 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1374:	e3 e3       	ldi	r30, 0x33	; 51
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	88 2f       	mov	r24, r24
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a9 01       	movw	r20, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <GPIO_readPin+0xde>
    1388:	55 95       	asr	r21
    138a:	47 95       	ror	r20
    138c:	8a 95       	dec	r24
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <GPIO_readPin+0xda>
    1390:	ca 01       	movw	r24, r20
    1392:	81 70       	andi	r24, 0x01	; 1
    1394:	90 70       	andi	r25, 0x00	; 0
    1396:	88 23       	and	r24, r24
    1398:	19 f0       	breq	.+6      	; 0x13a0 <GPIO_readPin+0xf2>
			{
				a_pinValue = LOGIC_HIGH;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	19 c0       	rjmp	.+50     	; 0x13d2 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    13a0:	19 82       	std	Y+1, r1	; 0x01
    13a2:	17 c0       	rjmp	.+46     	; 0x13d2 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    13a4:	e0 e3       	ldi	r30, 0x30	; 48
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a9 01       	movw	r20, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <GPIO_readPin+0x10e>
    13b8:	55 95       	asr	r21
    13ba:	47 95       	ror	r20
    13bc:	8a 95       	dec	r24
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <GPIO_readPin+0x10a>
    13c0:	ca 01       	movw	r24, r20
    13c2:	81 70       	andi	r24, 0x01	; 1
    13c4:	90 70       	andi	r25, 0x00	; 0
    13c6:	88 23       	and	r24, r24
    13c8:	19 f0       	breq	.+6      	; 0x13d0 <GPIO_readPin+0x122>
			{
				a_pinValue = LOGIC_HIGH;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    13d0:	19 82       	std	Y+1, r1	; 0x01
			break;
/*----------------------------------------------------------------------------*/
		}
	}

	return a_pinValue;
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <GPIO_setupPortDirection+0x6>
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <GPIO_setupPortDirection+0x8>
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS) /* Corner Case : If input was wrong */
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	84 30       	cpi	r24, 0x04	; 4
    13f8:	90 f5       	brcc	.+100    	; 0x145e <GPIO_setupPortDirection+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	3c 83       	std	Y+4, r19	; 0x04
    1402:	2b 83       	std	Y+3, r18	; 0x03
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 05       	cpc	r25, r1
    140c:	d1 f0       	breq	.+52     	; 0x1442 <GPIO_setupPortDirection+0x5e>
    140e:	2b 81       	ldd	r18, Y+3	; 0x03
    1410:	3c 81       	ldd	r19, Y+4	; 0x04
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	2c f4       	brge	.+10     	; 0x1422 <GPIO_setupPortDirection+0x3e>
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	61 f0       	breq	.+24     	; 0x1438 <GPIO_setupPortDirection+0x54>
    1420:	1e c0       	rjmp	.+60     	; 0x145e <GPIO_setupPortDirection+0x7a>
    1422:	2b 81       	ldd	r18, Y+3	; 0x03
    1424:	3c 81       	ldd	r19, Y+4	; 0x04
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	31 05       	cpc	r19, r1
    142a:	81 f0       	breq	.+32     	; 0x144c <GPIO_setupPortDirection+0x68>
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	83 30       	cpi	r24, 0x03	; 3
    1432:	91 05       	cpc	r25, r1
    1434:	81 f0       	breq	.+32     	; 0x1456 <GPIO_setupPortDirection+0x72>
    1436:	13 c0       	rjmp	.+38     	; 0x145e <GPIO_setupPortDirection+0x7a>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			DDRA = direction;
    1438:	ea e3       	ldi	r30, 0x3A	; 58
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	80 83       	st	Z, r24
    1440:	0e c0       	rjmp	.+28     	; 0x145e <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			DDRB = direction;
    1442:	e7 e3       	ldi	r30, 0x37	; 55
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	80 83       	st	Z, r24
    144a:	09 c0       	rjmp	.+18     	; 0x145e <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			DDRC = direction;
    144c:	e4 e3       	ldi	r30, 0x34	; 52
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	80 83       	st	Z, r24
    1454:	04 c0       	rjmp	.+8      	; 0x145e <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			DDRD = direction;
    1456:	e1 e3       	ldi	r30, 0x31	; 49
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	80 83       	st	Z, r24
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <GPIO_writePort+0x6>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <GPIO_writePort+0x8>
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS) /* Corner Case : If input was wrong */
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	85 30       	cpi	r24, 0x05	; 5
    1480:	90 f5       	brcc	.+100    	; 0x14e6 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	3c 83       	std	Y+4, r19	; 0x04
    148a:	2b 83       	std	Y+3, r18	; 0x03
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	91 05       	cpc	r25, r1
    1494:	d1 f0       	breq	.+52     	; 0x14ca <GPIO_writePort+0x5e>
    1496:	2b 81       	ldd	r18, Y+3	; 0x03
    1498:	3c 81       	ldd	r19, Y+4	; 0x04
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	2c f4       	brge	.+10     	; 0x14aa <GPIO_writePort+0x3e>
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	61 f0       	breq	.+24     	; 0x14c0 <GPIO_writePort+0x54>
    14a8:	1e c0       	rjmp	.+60     	; 0x14e6 <GPIO_writePort+0x7a>
    14aa:	2b 81       	ldd	r18, Y+3	; 0x03
    14ac:	3c 81       	ldd	r19, Y+4	; 0x04
    14ae:	22 30       	cpi	r18, 0x02	; 2
    14b0:	31 05       	cpc	r19, r1
    14b2:	81 f0       	breq	.+32     	; 0x14d4 <GPIO_writePort+0x68>
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	83 30       	cpi	r24, 0x03	; 3
    14ba:	91 05       	cpc	r25, r1
    14bc:	81 f0       	breq	.+32     	; 0x14de <GPIO_writePort+0x72>
    14be:	13 c0       	rjmp	.+38     	; 0x14e6 <GPIO_writePort+0x7a>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			PORTA = value;
    14c0:	eb e3       	ldi	r30, 0x3B	; 59
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	80 83       	st	Z, r24
    14c8:	0e c0       	rjmp	.+28     	; 0x14e6 <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			PORTB = value;
    14ca:	e8 e3       	ldi	r30, 0x38	; 56
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	80 83       	st	Z, r24
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			PORTC = value;
    14d4:	e5 e3       	ldi	r30, 0x35	; 53
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	80 83       	st	Z, r24
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			PORTD = value;
    14de:	e2 e3       	ldi	r30, 0x32	; 50
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	80 83       	st	Z, r24
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <GPIO_readPort+0x6>
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <GPIO_readPort+0x8>
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_portValue = LOGIC_LOW;
    1502:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	84 30       	cpi	r24, 0x04	; 4
    1508:	90 f5       	brcc	.+100    	; 0x156e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	3c 83       	std	Y+4, r19	; 0x04
    1512:	2b 83       	std	Y+3, r18	; 0x03
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	91 05       	cpc	r25, r1
    151c:	d1 f0       	breq	.+52     	; 0x1552 <GPIO_readPort+0x5e>
    151e:	2b 81       	ldd	r18, Y+3	; 0x03
    1520:	3c 81       	ldd	r19, Y+4	; 0x04
    1522:	22 30       	cpi	r18, 0x02	; 2
    1524:	31 05       	cpc	r19, r1
    1526:	2c f4       	brge	.+10     	; 0x1532 <GPIO_readPort+0x3e>
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	61 f0       	breq	.+24     	; 0x1548 <GPIO_readPort+0x54>
    1530:	1e c0       	rjmp	.+60     	; 0x156e <GPIO_readPort+0x7a>
    1532:	2b 81       	ldd	r18, Y+3	; 0x03
    1534:	3c 81       	ldd	r19, Y+4	; 0x04
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	81 f0       	breq	.+32     	; 0x155c <GPIO_readPort+0x68>
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	91 05       	cpc	r25, r1
    1544:	81 f0       	breq	.+32     	; 0x1566 <GPIO_readPort+0x72>
    1546:	13 c0       	rjmp	.+38     	; 0x156e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			a_portValue = PINA;
    1548:	e9 e3       	ldi	r30, 0x39	; 57
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	0e c0       	rjmp	.+28     	; 0x156e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			a_portValue = PINB;
    1552:	e6 e3       	ldi	r30, 0x36	; 54
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	09 c0       	rjmp	.+18     	; 0x156e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			a_portValue = PINC;
    155c:	e3 e3       	ldi	r30, 0x33	; 51
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	04 c0       	rjmp	.+8      	; 0x156e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			a_portValue = PIND;
    1566:	e0 e3       	ldi	r30, 0x30	; 48
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return a_portValue;
    156e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <__vector_11>:

/**-------------------------Interrupts Section----------------------**/
/**                               TIMER 0                          **/
/* Interrupt for normal mode */
ISR(TIMER0_OVF_vect)
{
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	2f 93       	push	r18
    158a:	3f 93       	push	r19
    158c:	4f 93       	push	r20
    158e:	5f 93       	push	r21
    1590:	6f 93       	push	r22
    1592:	7f 93       	push	r23
    1594:	8f 93       	push	r24
    1596:	9f 93       	push	r25
    1598:	af 93       	push	r26
    159a:	bf 93       	push	r27
    159c:	ef 93       	push	r30
    159e:	ff 93       	push	r31
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrZERO != NULL_PTR)
    15a8:	80 91 8a 01 	lds	r24, 0x018A
    15ac:	90 91 8b 01 	lds	r25, 0x018B
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	29 f0       	breq	.+10     	; 0x15be <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrZERO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    15b4:	e0 91 8a 01 	lds	r30, 0x018A
    15b8:	f0 91 8b 01 	lds	r31, 0x018B
    15bc:	09 95       	icall
	}
}
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	ff 91       	pop	r31
    15c4:	ef 91       	pop	r30
    15c6:	bf 91       	pop	r27
    15c8:	af 91       	pop	r26
    15ca:	9f 91       	pop	r25
    15cc:	8f 91       	pop	r24
    15ce:	7f 91       	pop	r23
    15d0:	6f 91       	pop	r22
    15d2:	5f 91       	pop	r21
    15d4:	4f 91       	pop	r20
    15d6:	3f 91       	pop	r19
    15d8:	2f 91       	pop	r18
    15da:	0f 90       	pop	r0
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	0f 90       	pop	r0
    15e0:	1f 90       	pop	r1
    15e2:	18 95       	reti

000015e4 <__vector_10>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER0_COMP_vect)
{
    15e4:	1f 92       	push	r1
    15e6:	0f 92       	push	r0
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	0f 92       	push	r0
    15ec:	11 24       	eor	r1, r1
    15ee:	2f 93       	push	r18
    15f0:	3f 93       	push	r19
    15f2:	4f 93       	push	r20
    15f4:	5f 93       	push	r21
    15f6:	6f 93       	push	r22
    15f8:	7f 93       	push	r23
    15fa:	8f 93       	push	r24
    15fc:	9f 93       	push	r25
    15fe:	af 93       	push	r26
    1600:	bf 93       	push	r27
    1602:	ef 93       	push	r30
    1604:	ff 93       	push	r31
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrZERO != NULL_PTR)
    160e:	80 91 8a 01 	lds	r24, 0x018A
    1612:	90 91 8b 01 	lds	r25, 0x018B
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	29 f0       	breq	.+10     	; 0x1624 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrZERO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    161a:	e0 91 8a 01 	lds	r30, 0x018A
    161e:	f0 91 8b 01 	lds	r31, 0x018B
    1622:	09 95       	icall
	}
}
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	ff 91       	pop	r31
    162a:	ef 91       	pop	r30
    162c:	bf 91       	pop	r27
    162e:	af 91       	pop	r26
    1630:	9f 91       	pop	r25
    1632:	8f 91       	pop	r24
    1634:	7f 91       	pop	r23
    1636:	6f 91       	pop	r22
    1638:	5f 91       	pop	r21
    163a:	4f 91       	pop	r20
    163c:	3f 91       	pop	r19
    163e:	2f 91       	pop	r18
    1640:	0f 90       	pop	r0
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	0f 90       	pop	r0
    1646:	1f 90       	pop	r1
    1648:	18 95       	reti

0000164a <__vector_9>:
/*------------------------------------------------------------------*/
/**                               TIMER 1                          **/

/* Interrupt for normal mode */
ISR(TIMER1_OVF_vect)
{
    164a:	1f 92       	push	r1
    164c:	0f 92       	push	r0
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	0f 92       	push	r0
    1652:	11 24       	eor	r1, r1
    1654:	2f 93       	push	r18
    1656:	3f 93       	push	r19
    1658:	4f 93       	push	r20
    165a:	5f 93       	push	r21
    165c:	6f 93       	push	r22
    165e:	7f 93       	push	r23
    1660:	8f 93       	push	r24
    1662:	9f 93       	push	r25
    1664:	af 93       	push	r26
    1666:	bf 93       	push	r27
    1668:	ef 93       	push	r30
    166a:	ff 93       	push	r31
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrONE != NULL_PTR)
    1674:	80 91 8c 01 	lds	r24, 0x018C
    1678:	90 91 8d 01 	lds	r25, 0x018D
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	29 f0       	breq	.+10     	; 0x168a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrONE)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1680:	e0 91 8c 01 	lds	r30, 0x018C
    1684:	f0 91 8d 01 	lds	r31, 0x018D
    1688:	09 95       	icall
	}
}
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	ff 91       	pop	r31
    1690:	ef 91       	pop	r30
    1692:	bf 91       	pop	r27
    1694:	af 91       	pop	r26
    1696:	9f 91       	pop	r25
    1698:	8f 91       	pop	r24
    169a:	7f 91       	pop	r23
    169c:	6f 91       	pop	r22
    169e:	5f 91       	pop	r21
    16a0:	4f 91       	pop	r20
    16a2:	3f 91       	pop	r19
    16a4:	2f 91       	pop	r18
    16a6:	0f 90       	pop	r0
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	0f 90       	pop	r0
    16ac:	1f 90       	pop	r1
    16ae:	18 95       	reti

000016b0 <__vector_7>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER1_COMPA_vect)
{
    16b0:	1f 92       	push	r1
    16b2:	0f 92       	push	r0
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	0f 92       	push	r0
    16b8:	11 24       	eor	r1, r1
    16ba:	2f 93       	push	r18
    16bc:	3f 93       	push	r19
    16be:	4f 93       	push	r20
    16c0:	5f 93       	push	r21
    16c2:	6f 93       	push	r22
    16c4:	7f 93       	push	r23
    16c6:	8f 93       	push	r24
    16c8:	9f 93       	push	r25
    16ca:	af 93       	push	r26
    16cc:	bf 93       	push	r27
    16ce:	ef 93       	push	r30
    16d0:	ff 93       	push	r31
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrONE != NULL_PTR)
    16da:	80 91 8c 01 	lds	r24, 0x018C
    16de:	90 91 8d 01 	lds	r25, 0x018D
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	29 f0       	breq	.+10     	; 0x16f0 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrONE)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    16e6:	e0 91 8c 01 	lds	r30, 0x018C
    16ea:	f0 91 8d 01 	lds	r31, 0x018D
    16ee:	09 95       	icall
	}
}
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	ff 91       	pop	r31
    16f6:	ef 91       	pop	r30
    16f8:	bf 91       	pop	r27
    16fa:	af 91       	pop	r26
    16fc:	9f 91       	pop	r25
    16fe:	8f 91       	pop	r24
    1700:	7f 91       	pop	r23
    1702:	6f 91       	pop	r22
    1704:	5f 91       	pop	r21
    1706:	4f 91       	pop	r20
    1708:	3f 91       	pop	r19
    170a:	2f 91       	pop	r18
    170c:	0f 90       	pop	r0
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	0f 90       	pop	r0
    1712:	1f 90       	pop	r1
    1714:	18 95       	reti

00001716 <__vector_5>:
/*-------------------------------------------------------------------*/
/**                               TIMER 2                          **/

/* Interrupt for normal mode */
ISR(TIMER2_OVF_vect)
{
    1716:	1f 92       	push	r1
    1718:	0f 92       	push	r0
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	0f 92       	push	r0
    171e:	11 24       	eor	r1, r1
    1720:	2f 93       	push	r18
    1722:	3f 93       	push	r19
    1724:	4f 93       	push	r20
    1726:	5f 93       	push	r21
    1728:	6f 93       	push	r22
    172a:	7f 93       	push	r23
    172c:	8f 93       	push	r24
    172e:	9f 93       	push	r25
    1730:	af 93       	push	r26
    1732:	bf 93       	push	r27
    1734:	ef 93       	push	r30
    1736:	ff 93       	push	r31
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTWO != NULL_PTR)
    1740:	80 91 8e 01 	lds	r24, 0x018E
    1744:	90 91 8f 01 	lds	r25, 0x018F
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	29 f0       	breq	.+10     	; 0x1756 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrTWO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    174c:	e0 91 8e 01 	lds	r30, 0x018E
    1750:	f0 91 8f 01 	lds	r31, 0x018F
    1754:	09 95       	icall
	}
}
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	ff 91       	pop	r31
    175c:	ef 91       	pop	r30
    175e:	bf 91       	pop	r27
    1760:	af 91       	pop	r26
    1762:	9f 91       	pop	r25
    1764:	8f 91       	pop	r24
    1766:	7f 91       	pop	r23
    1768:	6f 91       	pop	r22
    176a:	5f 91       	pop	r21
    176c:	4f 91       	pop	r20
    176e:	3f 91       	pop	r19
    1770:	2f 91       	pop	r18
    1772:	0f 90       	pop	r0
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	0f 90       	pop	r0
    1778:	1f 90       	pop	r1
    177a:	18 95       	reti

0000177c <__vector_4>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER2_COMP_vect)
{
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	2f 93       	push	r18
    1788:	3f 93       	push	r19
    178a:	4f 93       	push	r20
    178c:	5f 93       	push	r21
    178e:	6f 93       	push	r22
    1790:	7f 93       	push	r23
    1792:	8f 93       	push	r24
    1794:	9f 93       	push	r25
    1796:	af 93       	push	r26
    1798:	bf 93       	push	r27
    179a:	ef 93       	push	r30
    179c:	ff 93       	push	r31
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTWO != NULL_PTR)
    17a6:	80 91 8e 01 	lds	r24, 0x018E
    17aa:	90 91 8f 01 	lds	r25, 0x018F
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	29 f0       	breq	.+10     	; 0x17bc <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrTWO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    17b2:	e0 91 8e 01 	lds	r30, 0x018E
    17b6:	f0 91 8f 01 	lds	r31, 0x018F
    17ba:	09 95       	icall
	}
}
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	ff 91       	pop	r31
    17c2:	ef 91       	pop	r30
    17c4:	bf 91       	pop	r27
    17c6:	af 91       	pop	r26
    17c8:	9f 91       	pop	r25
    17ca:	8f 91       	pop	r24
    17cc:	7f 91       	pop	r23
    17ce:	6f 91       	pop	r22
    17d0:	5f 91       	pop	r21
    17d2:	4f 91       	pop	r20
    17d4:	3f 91       	pop	r19
    17d6:	2f 91       	pop	r18
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	0f 90       	pop	r0
    17de:	1f 90       	pop	r1
    17e0:	18 95       	reti

000017e2 <Timer0_Init>:
/**------------------------Timer ZERO-----------------------**/
/*
 * Initializing Timer0
 */
void Timer0_Init(const Timer0_ConfigType *Config_Ptr)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <Timer0_Init+0x6>
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	9a 83       	std	Y+2, r25	; 0x02
    17ee:	89 83       	std	Y+1, r24	; 0x01
	/* Selecting Force Output Compare */
	TCCR0 = (TCCR0 & 0x7F) | ((Config_Ptr->Timer0_ForceCompare)<<FOC0);
    17f0:	a3 e5       	ldi	r26, 0x53	; 83
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e3 e5       	ldi	r30, 0x53	; 83
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	28 2f       	mov	r18, r24
    17fc:	2f 77       	andi	r18, 0x7F	; 127
    17fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1800:	fa 81       	ldd	r31, Y+2	; 0x02
    1802:	81 81       	ldd	r24, Z+1	; 0x01
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	96 95       	lsr	r25
    180a:	98 2f       	mov	r25, r24
    180c:	88 27       	eor	r24, r24
    180e:	97 95       	ror	r25
    1810:	87 95       	ror	r24
    1812:	82 2b       	or	r24, r18
    1814:	8c 93       	st	X, r24

	/* Selecting the WaveForm Generation */
	TCCR0 = (TCCR0 & 0xBF) | (((Config_Ptr->Timer0_WaveForm)<<7)>>1);
    1816:	a3 e5       	ldi	r26, 0x53	; 83
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e3 e5       	ldi	r30, 0x53	; 83
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	28 2f       	mov	r18, r24
    1822:	2f 7b       	andi	r18, 0xBF	; 191
    1824:	e9 81       	ldd	r30, Y+1	; 0x01
    1826:	fa 81       	ldd	r31, Y+2	; 0x02
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	88 2f       	mov	r24, r24
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	96 95       	lsr	r25
    1830:	98 2f       	mov	r25, r24
    1832:	88 27       	eor	r24, r24
    1834:	97 95       	ror	r25
    1836:	87 95       	ror	r24
    1838:	95 95       	asr	r25
    183a:	87 95       	ror	r24
    183c:	82 2b       	or	r24, r18
    183e:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xF7) | (((Config_Ptr->Timer0_WaveForm)>>1)<<WGM01);
    1840:	a3 e5       	ldi	r26, 0x53	; 83
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e3 e5       	ldi	r30, 0x53	; 83
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	28 2f       	mov	r18, r24
    184c:	27 7f       	andi	r18, 0xF7	; 247
    184e:	e9 81       	ldd	r30, Y+1	; 0x01
    1850:	fa 81       	ldd	r31, Y+2	; 0x02
    1852:	82 81       	ldd	r24, Z+2	; 0x02
    1854:	86 95       	lsr	r24
    1856:	88 2f       	mov	r24, r24
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	82 2b       	or	r24, r18
    1868:	8c 93       	st	X, r24

	/* Select Compare Match output mode */
	TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->Timer0_CompareMode)<<4);
    186a:	a3 e5       	ldi	r26, 0x53	; 83
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e3 e5       	ldi	r30, 0x53	; 83
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	28 2f       	mov	r18, r24
    1876:	2f 7c       	andi	r18, 0xCF	; 207
    1878:	e9 81       	ldd	r30, Y+1	; 0x01
    187a:	fa 81       	ldd	r31, Y+2	; 0x02
    187c:	83 81       	ldd	r24, Z+3	; 0x03
    187e:	88 2f       	mov	r24, r24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	82 95       	swap	r24
    1884:	92 95       	swap	r25
    1886:	90 7f       	andi	r25, 0xF0	; 240
    1888:	98 27       	eor	r25, r24
    188a:	80 7f       	andi	r24, 0xF0	; 240
    188c:	98 27       	eor	r25, r24
    188e:	82 2b       	or	r24, r18
    1890:	8c 93       	st	X, r24

	/* Select the Prescaler Value */
	TCCR0 = (TCCR0 & 0xF8) | ((Config_Ptr->Timer0_PreScaler));
    1892:	a3 e5       	ldi	r26, 0x53	; 83
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e3 e5       	ldi	r30, 0x53	; 83
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	98 2f       	mov	r25, r24
    189e:	98 7f       	andi	r25, 0xF8	; 248
    18a0:	e9 81       	ldd	r30, Y+1	; 0x01
    18a2:	fa 81       	ldd	r31, Y+2	; 0x02
    18a4:	80 81       	ld	r24, Z
    18a6:	89 2b       	or	r24, r25
    18a8:	8c 93       	st	X, r24

	/* Choosing the OVF value */
	TCNT0 = Config_Ptr->Timer0_TCNT0_Value;
    18aa:	a2 e5       	ldi	r26, 0x52	; 82
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e9 81       	ldd	r30, Y+1	; 0x01
    18b0:	fa 81       	ldd	r31, Y+2	; 0x02
    18b2:	86 81       	ldd	r24, Z+6	; 0x06
    18b4:	8c 93       	st	X, r24

	/* Choosing OCR0 value */
	OCR0 = Config_Ptr->Timer0_OCR0_Value;
    18b6:	ac e5       	ldi	r26, 0x5C	; 92
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e9 81       	ldd	r30, Y+1	; 0x01
    18bc:	fa 81       	ldd	r31, Y+2	; 0x02
    18be:	87 81       	ldd	r24, Z+7	; 0x07
    18c0:	8c 93       	st	X, r24

	/* Enabling Interrupt for Compare */
	TIMSK = (TIMSK & 0xFD) | ((Config_Ptr->Timer0_COMP_INT)<<OCIE0);
    18c2:	a9 e5       	ldi	r26, 0x59	; 89
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e9 e5       	ldi	r30, 0x59	; 89
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	28 2f       	mov	r18, r24
    18ce:	2d 7f       	andi	r18, 0xFD	; 253
    18d0:	e9 81       	ldd	r30, Y+1	; 0x01
    18d2:	fa 81       	ldd	r31, Y+2	; 0x02
    18d4:	84 81       	ldd	r24, Z+4	; 0x04
    18d6:	88 2f       	mov	r24, r24
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	82 2b       	or	r24, r18
    18e0:	8c 93       	st	X, r24

	/* Enabling Interrupts for OVF */
	TIMSK = (TIMSK & 0xFE) | ((Config_Ptr->Timer0_OVF_INT));
    18e2:	a9 e5       	ldi	r26, 0x59	; 89
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e9 e5       	ldi	r30, 0x59	; 89
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	98 2f       	mov	r25, r24
    18ee:	9e 7f       	andi	r25, 0xFE	; 254
    18f0:	e9 81       	ldd	r30, Y+1	; 0x01
    18f2:	fa 81       	ldd	r31, Y+2	; 0x02
    18f4:	85 81       	ldd	r24, Z+5	; 0x05
    18f6:	89 2b       	or	r24, r25
    18f8:	8c 93       	st	X, r24
}
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <Timer0_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer0_deInit(void)
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    190c:	e3 e5       	ldi	r30, 0x53	; 83
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	10 82       	st	Z, r1
	TIMSK = (TIMSK & 0xFC);
    1912:	a9 e5       	ldi	r26, 0x59	; 89
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e9 e5       	ldi	r30, 0x59	; 89
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	8c 7f       	andi	r24, 0xFC	; 252
    191e:	8c 93       	st	X, r24
}
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <Timer0_setCallBackZERO>:

/*-------------------------------------------------------------------*/
/* Description: Function to set the Call Back function address. */
void Timer0_setCallBackZERO(void(*a_ptr)(void))
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <Timer0_setCallBackZERO+0x6>
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	9a 83       	std	Y+2, r25	; 0x02
    1932:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrZERO = a_ptr;
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	9a 81       	ldd	r25, Y+2	; 0x02
    1938:	90 93 8b 01 	sts	0x018B, r25
    193c:	80 93 8a 01 	sts	0x018A, r24
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <Timer0_PWM_Init>:

/*
 * Initializing Timer0_PWM
 */
void Timer0_PWM_Init(const Timer0_ConfigType *Config_Ptr)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <Timer0_PWM_Init+0x6>
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Set Timer Initial Value to 0 */
    1958:	e2 e5       	ldi	r30, 0x52	; 82
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	10 82       	st	Z, r1

	/* Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC */
	GPIO_setupPinDirection(PWM0_PORT_ID, PWM0_PIN_ID, PIN_OUTPUT);
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	63 e0       	ldi	r22, 0x03	; 3
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = Dependent on the user
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01);
    1968:	e3 e5       	ldi	r30, 0x53	; 83
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	88 e6       	ldi	r24, 0x68	; 104
    196e:	80 83       	st	Z, r24
	TCCR0 |= Config_Ptr->Timer0_PreScaler;
    1970:	a3 e5       	ldi	r26, 0x53	; 83
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e3 e5       	ldi	r30, 0x53	; 83
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	90 81       	ld	r25, Z
    197a:	e9 81       	ldd	r30, Y+1	; 0x01
    197c:	fa 81       	ldd	r31, Y+2	; 0x02
    197e:	80 81       	ld	r24, Z
    1980:	89 2b       	or	r24, r25
    1982:	8c 93       	st	X, r24
}
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <Timer0_PWM_Activate>:

/*
 * Setting Timer0_PWM
 */
void Timer0_PWM_Activate(uint8 *SetDuty_Ptr)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	00 d0       	rcall	.+0      	; 0x1994 <Timer0_PWM_Activate+0x6>
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	9a 83       	std	Y+2, r25	; 0x02
    199a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Set Timer Initial Value to 0 */
    199c:	e2 e5       	ldi	r30, 0x52	; 82
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	10 82       	st	Z, r1
	OCR0  = *SetDuty_Ptr; /* Set Compare Value */
    19a2:	ac e5       	ldi	r26, 0x5C	; 92
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e9 81       	ldd	r30, Y+1	; 0x01
    19a8:	fa 81       	ldd	r31, Y+2	; 0x02
    19aa:	80 81       	ld	r24, Z
    19ac:	8c 93       	st	X, r24
}
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <Timer1_Init>:

/*
 * Initializing TIMER0
 */
void Timer1_Init(const Timer1_ConfigType *Config_Ptr)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <Timer1_Init+0x6>
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	9a 83       	std	Y+2, r25	; 0x02
    19c4:	89 83       	std	Y+1, r24	; 0x01
	/* Compare Output Mode for channel A */
	TCCR1A = (TCCR1A & 0x3F) | (Config_Ptr->CompareModeA<<6);
    19c6:	af e4       	ldi	r26, 0x4F	; 79
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	ef e4       	ldi	r30, 0x4F	; 79
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	28 2f       	mov	r18, r24
    19d2:	2f 73       	andi	r18, 0x3F	; 63
    19d4:	e9 81       	ldd	r30, Y+1	; 0x01
    19d6:	fa 81       	ldd	r31, Y+2	; 0x02
    19d8:	80 81       	ld	r24, Z
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	00 24       	eor	r0, r0
    19e0:	96 95       	lsr	r25
    19e2:	87 95       	ror	r24
    19e4:	07 94       	ror	r0
    19e6:	96 95       	lsr	r25
    19e8:	87 95       	ror	r24
    19ea:	07 94       	ror	r0
    19ec:	98 2f       	mov	r25, r24
    19ee:	80 2d       	mov	r24, r0
    19f0:	82 2b       	or	r24, r18
    19f2:	8c 93       	st	X, r24

	/* Compare Output Mode for channel B */
	TCCR1A = (TCCR1A & 0xCF) | (Config_Ptr->CompareModeB<<4);
    19f4:	af e4       	ldi	r26, 0x4F	; 79
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	ef e4       	ldi	r30, 0x4F	; 79
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	28 2f       	mov	r18, r24
    1a00:	2f 7c       	andi	r18, 0xCF	; 207
    1a02:	e9 81       	ldd	r30, Y+1	; 0x01
    1a04:	fa 81       	ldd	r31, Y+2	; 0x02
    1a06:	81 81       	ldd	r24, Z+1	; 0x01
    1a08:	88 2f       	mov	r24, r24
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	82 95       	swap	r24
    1a0e:	92 95       	swap	r25
    1a10:	90 7f       	andi	r25, 0xF0	; 240
    1a12:	98 27       	eor	r25, r24
    1a14:	80 7f       	andi	r24, 0xF0	; 240
    1a16:	98 27       	eor	r25, r24
    1a18:	82 2b       	or	r24, r18
    1a1a:	8c 93       	st	X, r24

	/* Force Output Compare for Channel A */
	TCCR1A = (TCCR1A & 0xF7) | (Config_Ptr->ForceCompareA<<3);
    1a1c:	af e4       	ldi	r26, 0x4F	; 79
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	ef e4       	ldi	r30, 0x4F	; 79
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	28 2f       	mov	r18, r24
    1a28:	27 7f       	andi	r18, 0xF7	; 247
    1a2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	82 2b       	or	r24, r18
    1a42:	8c 93       	st	X, r24

	/* Force Output Compare for Channel B */
	TCCR1A = (TCCR1A & 0xFB) | (Config_Ptr->ForceCompareB<<2);
    1a44:	af e4       	ldi	r26, 0x4F	; 79
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	ef e4       	ldi	r30, 0x4F	; 79
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	28 2f       	mov	r18, r24
    1a50:	2b 7f       	andi	r18, 0xFB	; 251
    1a52:	e9 81       	ldd	r30, Y+1	; 0x01
    1a54:	fa 81       	ldd	r31, Y+2	; 0x02
    1a56:	83 81       	ldd	r24, Z+3	; 0x03
    1a58:	88 2f       	mov	r24, r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	82 2b       	or	r24, r18
    1a66:	8c 93       	st	X, r24

	/* Setting the waveform */
	TCCR1A = (TCCR1A & 0xFC) | ((Config_Ptr->WaveForm<<6)>>6); /* Getting the first 2 bits only */
    1a68:	af e4       	ldi	r26, 0x4F	; 79
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	ef e4       	ldi	r30, 0x4F	; 79
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	28 2f       	mov	r18, r24
    1a74:	2c 7f       	andi	r18, 0xFC	; 252
    1a76:	e9 81       	ldd	r30, Y+1	; 0x01
    1a78:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7a:	87 81       	ldd	r24, Z+7	; 0x07
    1a7c:	88 2f       	mov	r24, r24
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	00 24       	eor	r0, r0
    1a82:	96 95       	lsr	r25
    1a84:	87 95       	ror	r24
    1a86:	07 94       	ror	r0
    1a88:	96 95       	lsr	r25
    1a8a:	87 95       	ror	r24
    1a8c:	07 94       	ror	r0
    1a8e:	98 2f       	mov	r25, r24
    1a90:	80 2d       	mov	r24, r0
    1a92:	08 2e       	mov	r0, r24
    1a94:	89 2f       	mov	r24, r25
    1a96:	00 0c       	add	r0, r0
    1a98:	88 1f       	adc	r24, r24
    1a9a:	99 0b       	sbc	r25, r25
    1a9c:	00 0c       	add	r0, r0
    1a9e:	88 1f       	adc	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	82 2b       	or	r24, r18
    1aa4:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xE7) | ((Config_Ptr->WaveForm>>2)<<3); /* Getting bit 2 and 3 only*/
    1aa6:	ae e4       	ldi	r26, 0x4E	; 78
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	ee e4       	ldi	r30, 0x4E	; 78
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	27 7e       	andi	r18, 0xE7	; 231
    1ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab8:	87 81       	ldd	r24, Z+7	; 0x07
    1aba:	86 95       	lsr	r24
    1abc:	86 95       	lsr	r24
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	82 2b       	or	r24, r18
    1ad0:	8c 93       	st	X, r24

	/* Noise Canceler */
	TCCR1B = (TCCR1B & 0x7F) | ((Config_Ptr->NoiseControl)<<7);
    1ad2:	ae e4       	ldi	r26, 0x4E	; 78
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	ee e4       	ldi	r30, 0x4E	; 78
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	28 2f       	mov	r18, r24
    1ade:	2f 77       	andi	r18, 0x7F	; 127
    1ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae4:	85 81       	ldd	r24, Z+5	; 0x05
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	96 95       	lsr	r25
    1aec:	98 2f       	mov	r25, r24
    1aee:	88 27       	eor	r24, r24
    1af0:	97 95       	ror	r25
    1af2:	87 95       	ror	r24
    1af4:	82 2b       	or	r24, r18
    1af6:	8c 93       	st	X, r24

	/* Edge Select */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->EdgeControl)<<ICES1);
    1af8:	ae e4       	ldi	r26, 0x4E	; 78
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	ee e4       	ldi	r30, 0x4E	; 78
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	28 2f       	mov	r18, r24
    1b04:	2f 7b       	andi	r18, 0xBF	; 191
    1b06:	e9 81       	ldd	r30, Y+1	; 0x01
    1b08:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0a:	84 81       	ldd	r24, Z+4	; 0x04
    1b0c:	88 2f       	mov	r24, r24
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	00 24       	eor	r0, r0
    1b12:	96 95       	lsr	r25
    1b14:	87 95       	ror	r24
    1b16:	07 94       	ror	r0
    1b18:	96 95       	lsr	r25
    1b1a:	87 95       	ror	r24
    1b1c:	07 94       	ror	r0
    1b1e:	98 2f       	mov	r25, r24
    1b20:	80 2d       	mov	r24, r0
    1b22:	82 2b       	or	r24, r18
    1b24:	8c 93       	st	X, r24

	/* Clock Selection */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->F_TIMER1_CLOCK);
    1b26:	ae e4       	ldi	r26, 0x4E	; 78
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	ee e4       	ldi	r30, 0x4E	; 78
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	98 2f       	mov	r25, r24
    1b32:	98 7f       	andi	r25, 0xF8	; 248
    1b34:	e9 81       	ldd	r30, Y+1	; 0x01
    1b36:	fa 81       	ldd	r31, Y+2	; 0x02
    1b38:	86 81       	ldd	r24, Z+6	; 0x06
    1b3a:	89 2b       	or	r24, r25
    1b3c:	8c 93       	st	X, r24

	/* Enable compare A interrupt */
	TIMSK = (TIMSK & 0xEF) | ((Config_Ptr->interruptA)<<OCIE1A);
    1b3e:	a9 e5       	ldi	r26, 0x59	; 89
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e9 e5       	ldi	r30, 0x59	; 89
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	28 2f       	mov	r18, r24
    1b4a:	2f 7e       	andi	r18, 0xEF	; 239
    1b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b50:	80 85       	ldd	r24, Z+8	; 0x08
    1b52:	88 2f       	mov	r24, r24
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	82 95       	swap	r24
    1b58:	92 95       	swap	r25
    1b5a:	90 7f       	andi	r25, 0xF0	; 240
    1b5c:	98 27       	eor	r25, r24
    1b5e:	80 7f       	andi	r24, 0xF0	; 240
    1b60:	98 27       	eor	r25, r24
    1b62:	82 2b       	or	r24, r18
    1b64:	8c 93       	st	X, r24

	/* Enable compare B interrupt */
	TIMSK = (TIMSK & 0xF7) | ((Config_Ptr->interruptB)<<OCIE1B);
    1b66:	a9 e5       	ldi	r26, 0x59	; 89
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e9 e5       	ldi	r30, 0x59	; 89
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	28 2f       	mov	r18, r24
    1b72:	27 7f       	andi	r18, 0xF7	; 247
    1b74:	e9 81       	ldd	r30, Y+1	; 0x01
    1b76:	fa 81       	ldd	r31, Y+2	; 0x02
    1b78:	81 85       	ldd	r24, Z+9	; 0x09
    1b7a:	88 2f       	mov	r24, r24
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	82 2b       	or	r24, r18
    1b8c:	8c 93       	st	X, r24

	/* Enable OverFlow interrupt */
	TIMSK = (TIMSK & 0xFB) | ((Config_Ptr->interruptOvf)<<TOIE1);
    1b8e:	a9 e5       	ldi	r26, 0x59	; 89
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e9 e5       	ldi	r30, 0x59	; 89
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	28 2f       	mov	r18, r24
    1b9a:	2b 7f       	andi	r18, 0xFB	; 251
    1b9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba0:	82 85       	ldd	r24, Z+10	; 0x0a
    1ba2:	88 2f       	mov	r24, r24
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	82 2b       	or	r24, r18
    1bb0:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = Config_Ptr->TCNT1_Value;
    1bb2:	ac e4       	ldi	r26, 0x4C	; 76
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bba:	83 85       	ldd	r24, Z+11	; 0x0b
    1bbc:	94 85       	ldd	r25, Z+12	; 0x0c
    1bbe:	11 96       	adiw	r26, 0x01	; 1
    1bc0:	9c 93       	st	X, r25
    1bc2:	8e 93       	st	-X, r24

	/* Initializing the compare value register */
	OCR1A = Config_Ptr->OCR1A_Value;
    1bc4:	aa e4       	ldi	r26, 0x4A	; 74
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bca:	fa 81       	ldd	r31, Y+2	; 0x02
    1bcc:	85 85       	ldd	r24, Z+13	; 0x0d
    1bce:	96 85       	ldd	r25, Z+14	; 0x0e
    1bd0:	11 96       	adiw	r26, 0x01	; 1
    1bd2:	9c 93       	st	X, r25
    1bd4:	8e 93       	st	-X, r24
	OCR1B = Config_Ptr->OCR1B_Value;
    1bd6:	a8 e4       	ldi	r26, 0x48	; 72
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e9 81       	ldd	r30, Y+1	; 0x01
    1bdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bde:	87 85       	ldd	r24, Z+15	; 0x0f
    1be0:	90 89       	ldd	r25, Z+16	; 0x10
    1be2:	11 96       	adiw	r26, 0x01	; 1
    1be4:	9c 93       	st	X, r25
    1be6:	8e 93       	st	-X, r24
}
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	08 95       	ret

00001bf2 <Timer1_setCallBackONE>:
/*-------------------------------------------------------------------*/

/* Description: Function to set the Call Back function address. */
void Timer1_setCallBackONE(void(*a_ptr)(void))
{
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <Timer1_setCallBackONE+0x6>
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	9a 83       	std	Y+2, r25	; 0x02
    1bfe:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrONE = a_ptr;
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	90 93 8d 01 	sts	0x018D, r25
    1c08:	80 93 8c 01 	sts	0x018C, r24
}
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	08 95       	ret

00001c16 <Timer1_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer1_deInit()
{
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1c1e:	ef e4       	ldi	r30, 0x4F	; 79
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	10 82       	st	Z, r1
	TCCR1B = 0;
    1c24:	ee e4       	ldi	r30, 0x4E	; 78
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	10 82       	st	Z, r1
	TIMSK = TIMSK & 0xC3;
    1c2a:	a9 e5       	ldi	r26, 0x59	; 89
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e9 e5       	ldi	r30, 0x59	; 89
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	83 7c       	andi	r24, 0xC3	; 195
    1c36:	8c 93       	st	X, r24
}
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <Timer2_Init>:
/**------------------------Timer TWO-----------------------**/
/*
 * Initializing Timer2
 */
void Timer2_Init(const Timer2_ConfigType *Config_Ptr)
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <Timer2_Init+0x6>
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	9a 83       	std	Y+2, r25	; 0x02
    1c4a:	89 83       	std	Y+1, r24	; 0x01
	/* Selecting Force Output Compare */
		TCCR2 = (TCCR2 & 0x7F) | ((Config_Ptr->Timer2_ForceCompare)<<FOC2);
    1c4c:	a5 e4       	ldi	r26, 0x45	; 69
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e5 e4       	ldi	r30, 0x45	; 69
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	28 2f       	mov	r18, r24
    1c58:	2f 77       	andi	r18, 0x7F	; 127
    1c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5e:	81 81       	ldd	r24, Z+1	; 0x01
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	96 95       	lsr	r25
    1c66:	98 2f       	mov	r25, r24
    1c68:	88 27       	eor	r24, r24
    1c6a:	97 95       	ror	r25
    1c6c:	87 95       	ror	r24
    1c6e:	82 2b       	or	r24, r18
    1c70:	8c 93       	st	X, r24

		/* Selecting the WaveForm Generation */
		TCCR2 = (TCCR2 & 0xBF) | (((Config_Ptr->Timer2_WaveForm)<<7)>>1);
    1c72:	a5 e4       	ldi	r26, 0x45	; 69
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e5 e4       	ldi	r30, 0x45	; 69
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	2f 7b       	andi	r18, 0xBF	; 191
    1c80:	e9 81       	ldd	r30, Y+1	; 0x01
    1c82:	fa 81       	ldd	r31, Y+2	; 0x02
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	88 2f       	mov	r24, r24
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	96 95       	lsr	r25
    1c8c:	98 2f       	mov	r25, r24
    1c8e:	88 27       	eor	r24, r24
    1c90:	97 95       	ror	r25
    1c92:	87 95       	ror	r24
    1c94:	95 95       	asr	r25
    1c96:	87 95       	ror	r24
    1c98:	82 2b       	or	r24, r18
    1c9a:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xF7) | (((Config_Ptr->Timer2_WaveForm)>>1)<<WGM21);
    1c9c:	a5 e4       	ldi	r26, 0x45	; 69
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e5 e4       	ldi	r30, 0x45	; 69
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	27 7f       	andi	r18, 0xF7	; 247
    1caa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cac:	fa 81       	ldd	r31, Y+2	; 0x02
    1cae:	82 81       	ldd	r24, Z+2	; 0x02
    1cb0:	86 95       	lsr	r24
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	82 2b       	or	r24, r18
    1cc4:	8c 93       	st	X, r24

		/* Select Compare Match output mode */
		TCCR2 = (TCCR2 & 0xCF) | ((Config_Ptr->Timer2_CompareMode)<<4);
    1cc6:	a5 e4       	ldi	r26, 0x45	; 69
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e5 e4       	ldi	r30, 0x45	; 69
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	2f 7c       	andi	r18, 0xCF	; 207
    1cd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd8:	83 81       	ldd	r24, Z+3	; 0x03
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	82 95       	swap	r24
    1ce0:	92 95       	swap	r25
    1ce2:	90 7f       	andi	r25, 0xF0	; 240
    1ce4:	98 27       	eor	r25, r24
    1ce6:	80 7f       	andi	r24, 0xF0	; 240
    1ce8:	98 27       	eor	r25, r24
    1cea:	82 2b       	or	r24, r18
    1cec:	8c 93       	st	X, r24

		/* Select the Prescaler Value */
		TCCR2 = (TCCR2 & 0xF8) | ((Config_Ptr->Timer2_PreScaler));
    1cee:	a5 e4       	ldi	r26, 0x45	; 69
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e5 e4       	ldi	r30, 0x45	; 69
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	98 2f       	mov	r25, r24
    1cfa:	98 7f       	andi	r25, 0xF8	; 248
    1cfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1d00:	80 81       	ld	r24, Z
    1d02:	89 2b       	or	r24, r25
    1d04:	8c 93       	st	X, r24

		/* Choosing the OVF value */
		TCNT0 = Config_Ptr->Timer2_TCNT2_Value;
    1d06:	a2 e5       	ldi	r26, 0x52	; 82
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0e:	86 81       	ldd	r24, Z+6	; 0x06
    1d10:	8c 93       	st	X, r24

		/* Choosing OCR2 value */
		OCR2 = Config_Ptr->Timer2_OCR2_Value;
    1d12:	a3 e4       	ldi	r26, 0x43	; 67
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e9 81       	ldd	r30, Y+1	; 0x01
    1d18:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1a:	87 81       	ldd	r24, Z+7	; 0x07
    1d1c:	8c 93       	st	X, r24

		/* Enabling Interrupt for Compare */
		TIMSK = (TIMSK & 0x7F) | ((Config_Ptr->Timer2_COMP_INT)<<OCIE2);
    1d1e:	a9 e5       	ldi	r26, 0x59	; 89
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e9 e5       	ldi	r30, 0x59	; 89
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	28 2f       	mov	r18, r24
    1d2a:	2f 77       	andi	r18, 0x7F	; 127
    1d2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d30:	84 81       	ldd	r24, Z+4	; 0x04
    1d32:	88 2f       	mov	r24, r24
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	96 95       	lsr	r25
    1d38:	98 2f       	mov	r25, r24
    1d3a:	88 27       	eor	r24, r24
    1d3c:	97 95       	ror	r25
    1d3e:	87 95       	ror	r24
    1d40:	82 2b       	or	r24, r18
    1d42:	8c 93       	st	X, r24

		/* Enabling Interrupts for OVF */
		TIMSK = (TIMSK & 0xBF) | ((Config_Ptr->Timer2_OVF_INT));
    1d44:	a9 e5       	ldi	r26, 0x59	; 89
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e9 e5       	ldi	r30, 0x59	; 89
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	98 2f       	mov	r25, r24
    1d50:	9f 7b       	andi	r25, 0xBF	; 191
    1d52:	e9 81       	ldd	r30, Y+1	; 0x01
    1d54:	fa 81       	ldd	r31, Y+2	; 0x02
    1d56:	85 81       	ldd	r24, Z+5	; 0x05
    1d58:	89 2b       	or	r24, r25
    1d5a:	8c 93       	st	X, r24
}
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <Timer2_PWM_Init>:

/*
 * Initializing Timer2_PWM
 */
void Timer2_PWM_Init(const Timer2_ConfigType *Config_Ptr)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <Timer2_PWM_Init+0x6>
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = 0; /* Set Timer Initial Value to 0 */
    1d74:	e4 e4       	ldi	r30, 0x44	; 68
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	10 82       	st	Z, r1

	/* Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC */
	GPIO_setupPinDirection(PWM2_PORT_ID, PWM2_PIN_ID, PIN_OUTPUT);
    1d7a:	83 e0       	ldi	r24, 0x03	; 3
    1d7c:	67 e0       	ldi	r22, 0x07	; 7
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = Dependent on the user
	 */
	TCCR2 = (1<<WGM21) | (1<<WGM20) | (1<<COM21);
    1d84:	e5 e4       	ldi	r30, 0x45	; 69
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	88 e6       	ldi	r24, 0x68	; 104
    1d8a:	80 83       	st	Z, r24
	TCCR2 |= Config_Ptr->Timer2_PreScaler;
    1d8c:	a5 e4       	ldi	r26, 0x45	; 69
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e5 e4       	ldi	r30, 0x45	; 69
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	90 81       	ld	r25, Z
    1d96:	e9 81       	ldd	r30, Y+1	; 0x01
    1d98:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9a:	80 81       	ld	r24, Z
    1d9c:	89 2b       	or	r24, r25
    1d9e:	8c 93       	st	X, r24
}
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <Timer2_PWM_Activate>:

/*
 * Setting Timer2_PWM
 */
void Timer2_PWM_Activate(uint8 *SetDuty_Ptr)
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <Timer2_PWM_Activate+0x6>
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	9a 83       	std	Y+2, r25	; 0x02
    1db6:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = 0; /* Set Timer Initial Value to 0 */
    1db8:	e4 e4       	ldi	r30, 0x44	; 68
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	10 82       	st	Z, r1
	OCR2  = *SetDuty_Ptr; /* Set Compare Value */
    1dbe:	a3 e4       	ldi	r26, 0x43	; 67
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc6:	80 81       	ld	r24, Z
    1dc8:	8c 93       	st	X, r24
}
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <Timer2_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer2_deInit(void)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0;
    1ddc:	e5 e4       	ldi	r30, 0x45	; 69
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	10 82       	st	Z, r1
	TIMSK = (TIMSK & 0x3F);
    1de2:	a9 e5       	ldi	r26, 0x59	; 89
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e9 e5       	ldi	r30, 0x59	; 89
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	8f 73       	andi	r24, 0x3F	; 63
    1dee:	8c 93       	st	X, r24
}
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <Timer2_setCallBackTWO>:

/*-------------------------------------------------------------------*/
/* Description: Function to set the Call Back function address. */
void Timer2_setCallBackTWO(void(*a_ptr)(void))
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <Timer2_setCallBackTWO+0x6>
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	9a 83       	std	Y+2, r25	; 0x02
    1e02:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrTWO = a_ptr;
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	9a 81       	ldd	r25, Y+2	; 0x02
    1e08:	90 93 8f 01 	sts	0x018F, r25
    1e0c:	80 93 8e 01 	sts	0x018E, r24
}
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <UART_init>:
/*
 * Description:
 *
 */
void UART_init(UART_ConfigType *Config_Ptr)
{
    1e1a:	ef 92       	push	r14
    1e1c:	ff 92       	push	r15
    1e1e:	0f 93       	push	r16
    1e20:	1f 93       	push	r17
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <UART_init+0xe>
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <UART_init+0x10>
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	9c 83       	std	Y+4, r25	; 0x04
    1e30:	8b 83       	std	Y+3, r24	; 0x03
	/**-------------------------Local Variables---------------------**/
	/* UBRR_VALUE will be used to set the baud rate later */
	uint16 a_ubrr_value = 0;
    1e32:	1a 82       	std	Y+2, r1	; 0x02
    1e34:	19 82       	std	Y+1, r1	; 0x01
	/**-------------------------END Local Variables-----------------**/

	/* Setting the transmission speed */
	UCSRA = (UCSRA & 0xFD) | ((Config_Ptr->transmitSpeed)<<U2X);
    1e36:	ab e2       	ldi	r26, 0x2B	; 43
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	eb e2       	ldi	r30, 0x2B	; 43
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	28 2f       	mov	r18, r24
    1e42:	2d 7f       	andi	r18, 0xFD	; 253
    1e44:	eb 81       	ldd	r30, Y+3	; 0x03
    1e46:	fc 81       	ldd	r31, Y+4	; 0x04
    1e48:	80 81       	ld	r24, Z
    1e4a:	88 2f       	mov	r24, r24
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	82 2b       	or	r24, r18
    1e54:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the INTERRUPT for RX */
	UCSRB = (UCSRB & 0x7F) | ((Config_Ptr->receiverINT)<<RXCIE);
    1e56:	aa e2       	ldi	r26, 0x2A	; 42
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	ea e2       	ldi	r30, 0x2A	; 42
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	28 2f       	mov	r18, r24
    1e62:	2f 77       	andi	r18, 0x7F	; 127
    1e64:	eb 81       	ldd	r30, Y+3	; 0x03
    1e66:	fc 81       	ldd	r31, Y+4	; 0x04
    1e68:	81 81       	ldd	r24, Z+1	; 0x01
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	96 95       	lsr	r25
    1e70:	98 2f       	mov	r25, r24
    1e72:	88 27       	eor	r24, r24
    1e74:	97 95       	ror	r25
    1e76:	87 95       	ror	r24
    1e78:	82 2b       	or	r24, r18
    1e7a:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the INTERRUPT for TX */
	UCSRB = (UCSRB & 0x7F) | ((Config_Ptr->transmitterINT)<<TXCIE);
    1e7c:	aa e2       	ldi	r26, 0x2A	; 42
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	ea e2       	ldi	r30, 0x2A	; 42
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	28 2f       	mov	r18, r24
    1e88:	2f 77       	andi	r18, 0x7F	; 127
    1e8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e8e:	82 81       	ldd	r24, Z+2	; 0x02
    1e90:	88 2f       	mov	r24, r24
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	00 24       	eor	r0, r0
    1e96:	96 95       	lsr	r25
    1e98:	87 95       	ror	r24
    1e9a:	07 94       	ror	r0
    1e9c:	96 95       	lsr	r25
    1e9e:	87 95       	ror	r24
    1ea0:	07 94       	ror	r0
    1ea2:	98 2f       	mov	r25, r24
    1ea4:	80 2d       	mov	r24, r0
    1ea6:	82 2b       	or	r24, r18
    1ea8:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the data register empty INTERRUPT */
	UCSRB = (UCSRB & 0xDF) | ((Config_Ptr->emptyINT)<<UDRIE);
    1eaa:	aa e2       	ldi	r26, 0x2A	; 42
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	ea e2       	ldi	r30, 0x2A	; 42
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	2f 7d       	andi	r18, 0xDF	; 223
    1eb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eba:	fc 81       	ldd	r31, Y+4	; 0x04
    1ebc:	83 81       	ldd	r24, Z+3	; 0x03
    1ebe:	88 2f       	mov	r24, r24
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	82 95       	swap	r24
    1ec8:	92 95       	swap	r25
    1eca:	90 7f       	andi	r25, 0xF0	; 240
    1ecc:	98 27       	eor	r25, r24
    1ece:	80 7f       	andi	r24, 0xF0	; 240
    1ed0:	98 27       	eor	r25, r24
    1ed2:	82 2b       	or	r24, r18
    1ed4:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Receiver Enable */
	UCSRB = (UCSRB & 0xEF) | ((Config_Ptr->receiverEN)<<RXEN);
    1ed6:	aa e2       	ldi	r26, 0x2A	; 42
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	ea e2       	ldi	r30, 0x2A	; 42
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	2f 7e       	andi	r18, 0xEF	; 239
    1ee4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee8:	84 81       	ldd	r24, Z+4	; 0x04
    1eea:	88 2f       	mov	r24, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	82 95       	swap	r24
    1ef0:	92 95       	swap	r25
    1ef2:	90 7f       	andi	r25, 0xF0	; 240
    1ef4:	98 27       	eor	r25, r24
    1ef6:	80 7f       	andi	r24, 0xF0	; 240
    1ef8:	98 27       	eor	r25, r24
    1efa:	82 2b       	or	r24, r18
    1efc:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Transmitter Enable */
	UCSRB = (UCSRB & 0xF7) | ((Config_Ptr->transmitterEN)<<TXEN);
    1efe:	aa e2       	ldi	r26, 0x2A	; 42
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	ea e2       	ldi	r30, 0x2A	; 42
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	28 2f       	mov	r18, r24
    1f0a:	27 7f       	andi	r18, 0xF7	; 247
    1f0c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f0e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f10:	85 81       	ldd	r24, Z+5	; 0x05
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	82 2b       	or	r24, r18
    1f24:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the character size on two separate register  */
	/* Adding only the third-bit to UCSRB and the 2 least bits to UCSRC */
	UCSRB = (UCSRB & 0xFB) | (((Config_Ptr->charSize)>>2)<<UCSZ2);
    1f26:	aa e2       	ldi	r26, 0x2A	; 42
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	ea e2       	ldi	r30, 0x2A	; 42
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	28 2f       	mov	r18, r24
    1f32:	2b 7f       	andi	r18, 0xFB	; 251
    1f34:	eb 81       	ldd	r30, Y+3	; 0x03
    1f36:	fc 81       	ldd	r31, Y+4	; 0x04
    1f38:	86 81       	ldd	r24, Z+6	; 0x06
    1f3a:	86 95       	lsr	r24
    1f3c:	86 95       	lsr	r24
    1f3e:	88 2f       	mov	r24, r24
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	82 2b       	or	r24, r18
    1f4c:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr->charSize)<<6)>>5);
    1f4e:	a0 e4       	ldi	r26, 0x40	; 64
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e0 e4       	ldi	r30, 0x40	; 64
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	28 2f       	mov	r18, r24
    1f5a:	29 7f       	andi	r18, 0xF9	; 249
    1f5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f60:	86 81       	ldd	r24, Z+6	; 0x06
    1f62:	88 2f       	mov	r24, r24
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	00 24       	eor	r0, r0
    1f68:	96 95       	lsr	r25
    1f6a:	87 95       	ror	r24
    1f6c:	07 94       	ror	r0
    1f6e:	96 95       	lsr	r25
    1f70:	87 95       	ror	r24
    1f72:	07 94       	ror	r0
    1f74:	98 2f       	mov	r25, r24
    1f76:	80 2d       	mov	r24, r0
    1f78:	95 95       	asr	r25
    1f7a:	87 95       	ror	r24
    1f7c:	95 95       	asr	r25
    1f7e:	87 95       	ror	r24
    1f80:	95 95       	asr	r25
    1f82:	87 95       	ror	r24
    1f84:	95 95       	asr	r25
    1f86:	87 95       	ror	r24
    1f88:	95 95       	asr	r25
    1f8a:	87 95       	ror	r24
    1f8c:	82 2b       	or	r24, r18
    1f8e:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* USART Reg Select between UCSRC & UBRRH */
	UCSRC = (UCSRC & 0x7F) | ((Config_Ptr->regSelect)<<URSEL);
    1f90:	a0 e4       	ldi	r26, 0x40	; 64
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e0 e4       	ldi	r30, 0x40	; 64
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	2f 77       	andi	r18, 0x7F	; 127
    1f9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa0:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa2:	87 81       	ldd	r24, Z+7	; 0x07
    1fa4:	88 2f       	mov	r24, r24
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	96 95       	lsr	r25
    1faa:	98 2f       	mov	r25, r24
    1fac:	88 27       	eor	r24, r24
    1fae:	97 95       	ror	r25
    1fb0:	87 95       	ror	r24
    1fb2:	82 2b       	or	r24, r18
    1fb4:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* USART Mode Select: 1- A-Synch , 2- Synch */
	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr->modeSelect)<<UMSEL);
    1fb6:	a0 e4       	ldi	r26, 0x40	; 64
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e0 e4       	ldi	r30, 0x40	; 64
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	2f 7b       	andi	r18, 0xBF	; 191
    1fc4:	eb 81       	ldd	r30, Y+3	; 0x03
    1fc6:	fc 81       	ldd	r31, Y+4	; 0x04
    1fc8:	80 85       	ldd	r24, Z+8	; 0x08
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	00 24       	eor	r0, r0
    1fd0:	96 95       	lsr	r25
    1fd2:	87 95       	ror	r24
    1fd4:	07 94       	ror	r0
    1fd6:	96 95       	lsr	r25
    1fd8:	87 95       	ror	r24
    1fda:	07 94       	ror	r0
    1fdc:	98 2f       	mov	r25, r24
    1fde:	80 2d       	mov	r24, r0
    1fe0:	82 2b       	or	r24, r18
    1fe2:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the parity mode : Disabled/Even/ODD */
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->paritySelect)<<4);
    1fe4:	a0 e4       	ldi	r26, 0x40	; 64
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e0 e4       	ldi	r30, 0x40	; 64
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	28 2f       	mov	r18, r24
    1ff0:	2f 7c       	andi	r18, 0xCF	; 207
    1ff2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff6:	81 85       	ldd	r24, Z+9	; 0x09
    1ff8:	88 2f       	mov	r24, r24
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	82 95       	swap	r24
    1ffe:	92 95       	swap	r25
    2000:	90 7f       	andi	r25, 0xF0	; 240
    2002:	98 27       	eor	r25, r24
    2004:	80 7f       	andi	r24, 0xF0	; 240
    2006:	98 27       	eor	r25, r24
    2008:	82 2b       	or	r24, r18
    200a:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the stop bit mode: 1-bit and 2-bit */
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stopBitSelect)<<USBS);
    200c:	a0 e4       	ldi	r26, 0x40	; 64
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e0 e4       	ldi	r30, 0x40	; 64
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	28 2f       	mov	r18, r24
    2018:	27 7f       	andi	r18, 0xF7	; 247
    201a:	eb 81       	ldd	r30, Y+3	; 0x03
    201c:	fc 81       	ldd	r31, Y+4	; 0x04
    201e:	82 85       	ldd	r24, Z+10	; 0x0a
    2020:	88 2f       	mov	r24, r24
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	82 2b       	or	r24, r18
    2032:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the clock Polarity: Rising and Falling */
	UCSRC = (UCSRC & 0xFE) | (Config_Ptr->clockPolatiry);
    2034:	a0 e4       	ldi	r26, 0x40	; 64
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e0 e4       	ldi	r30, 0x40	; 64
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	98 2f       	mov	r25, r24
    2040:	9e 7f       	andi	r25, 0xFE	; 254
    2042:	eb 81       	ldd	r30, Y+3	; 0x03
    2044:	fc 81       	ldd	r31, Y+4	; 0x04
    2046:	83 85       	ldd	r24, Z+11	; 0x0b
    2048:	89 2b       	or	r24, r25
    204a:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the baud rate */
	/* At first you should calculate the UBRR value */
	a_ubrr_value = (uint16)((F_CPU*(Config_Ptr->transmitSpeed+1)/((Config_Ptr->baud_rate)*(16)))-1);
    204c:	eb 81       	ldd	r30, Y+3	; 0x03
    204e:	fc 81       	ldd	r31, Y+4	; 0x04
    2050:	80 81       	ld	r24, Z
    2052:	88 2f       	mov	r24, r24
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	01 96       	adiw	r24, 0x01	; 1
    2058:	aa 27       	eor	r26, r26
    205a:	97 fd       	sbrc	r25, 7
    205c:	a0 95       	com	r26
    205e:	ba 2f       	mov	r27, r26
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	32 e1       	ldi	r19, 0x12	; 18
    2064:	4a e7       	ldi	r20, 0x7A	; 122
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	bc 01       	movw	r22, r24
    206a:	cd 01       	movw	r24, r26
    206c:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <__mulsi3>
    2070:	7b 01       	movw	r14, r22
    2072:	8c 01       	movw	r16, r24
    2074:	eb 81       	ldd	r30, Y+3	; 0x03
    2076:	fc 81       	ldd	r31, Y+4	; 0x04
    2078:	84 85       	ldd	r24, Z+12	; 0x0c
    207a:	95 85       	ldd	r25, Z+13	; 0x0d
    207c:	a6 85       	ldd	r26, Z+14	; 0x0e
    207e:	b7 85       	ldd	r27, Z+15	; 0x0f
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
    2084:	aa 1f       	adc	r26, r26
    2086:	bb 1f       	adc	r27, r27
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	aa 1f       	adc	r26, r26
    208e:	bb 1f       	adc	r27, r27
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	aa 1f       	adc	r26, r26
    2096:	bb 1f       	adc	r27, r27
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	aa 1f       	adc	r26, r26
    209e:	bb 1f       	adc	r27, r27
    20a0:	9c 01       	movw	r18, r24
    20a2:	ad 01       	movw	r20, r26
    20a4:	c8 01       	movw	r24, r16
    20a6:	b7 01       	movw	r22, r14
    20a8:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__udivmodsi4>
    20ac:	da 01       	movw	r26, r20
    20ae:	c9 01       	movw	r24, r18
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	9a 83       	std	Y+2, r25	; 0x02
    20b4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = a_ubrr_value>>8;
    20b6:	e0 e4       	ldi	r30, 0x40	; 64
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	9a 81       	ldd	r25, Y+2	; 0x02
    20be:	89 2f       	mov	r24, r25
    20c0:	99 27       	eor	r25, r25
    20c2:	80 83       	st	Z, r24
	UBRRL = a_ubrr_value;
    20c4:	e9 e2       	ldi	r30, 0x29	; 41
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	80 83       	st	Z, r24

	/*----------------------------END--------------------------------*/
}
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	ff 90       	pop	r15
    20de:	ef 90       	pop	r14
    20e0:	08 95       	ret

000020e2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	0f 92       	push	r0
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	89 83       	std	Y+1, r24	; 0x01
	/* Need to wait till the buffer is ready to get a new data */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    20ee:	eb e2       	ldi	r30, 0x2B	; 43
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	88 2f       	mov	r24, r24
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	80 72       	andi	r24, 0x20	; 32
    20fa:	90 70       	andi	r25, 0x00	; 0
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	b9 f3       	breq	.-18     	; 0x20ee <UART_sendByte+0xc>

	/* When it's ready then send it  */
	UDR = data;
    2100:	ec e2       	ldi	r30, 0x2C	; 44
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	80 83       	st	Z, r24
}
    2108:	0f 90       	pop	r0
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
	/* Waiting till we get a new data */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2118:	eb e2       	ldi	r30, 0x2B	; 43
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	88 23       	and	r24, r24
    2120:	dc f7       	brge	.-10     	; 0x2118 <UART_receiveByte+0x8>

	/* Return it after getting it */
	return UDR;
    2122:	ec e2       	ldi	r30, 0x2C	; 44
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
}
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	00 d0       	rcall	.+0      	; 0x2134 <UART_sendString+0x6>
    2134:	0f 92       	push	r0
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	9b 83       	std	Y+3, r25	; 0x03
    213c:	8a 83       	std	Y+2, r24	; 0x02
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;
    213e:	19 82       	std	Y+1, r1	; 0x01
    2140:	0e c0       	rjmp	.+28     	; 0x215e <UART_sendString+0x30>

	/* Sending byte by byte using UART_sendByte functio */
	while(Str[a_stringCounter] != '\0')
	{
		UART_sendByte(Str[a_stringCounter]);
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	9b 81       	ldd	r25, Y+3	; 0x03
    214c:	fc 01       	movw	r30, r24
    214e:	e2 0f       	add	r30, r18
    2150:	f3 1f       	adc	r31, r19
    2152:	80 81       	ld	r24, Z
    2154:	0e 94 71 10 	call	0x20e2	; 0x20e2 <UART_sendByte>
		a_stringCounter++;
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	8f 5f       	subi	r24, 0xFF	; 255
    215c:	89 83       	std	Y+1, r24	; 0x01
{
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;

	/* Sending byte by byte using UART_sendByte functio */
	while(Str[a_stringCounter] != '\0')
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	9b 81       	ldd	r25, Y+3	; 0x03
    2168:	fc 01       	movw	r30, r24
    216a:	e2 0f       	add	r30, r18
    216c:	f3 1f       	adc	r31, r19
    216e:	80 81       	ld	r24, Z
    2170:	88 23       	and	r24, r24
    2172:	39 f7       	brne	.-50     	; 0x2142 <UART_sendString+0x14>
	{
		UART_sendByte(Str[a_stringCounter]);
		a_stringCounter++;
	}
}
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	00 d0       	rcall	.+0      	; 0x218a <UART_receiveString+0xa>
    218a:	0f 92       	push	r0
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	9b 83       	std	Y+3, r25	; 0x03
    2192:	8a 83       	std	Y+2, r24	; 0x02
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;
    2194:	19 82       	std	Y+1, r1	; 0x01

	Str[a_stringCounter] = UART_receiveByte();
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	28 2f       	mov	r18, r24
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	9b 81       	ldd	r25, Y+3	; 0x03
    21a0:	8c 01       	movw	r16, r24
    21a2:	02 0f       	add	r16, r18
    21a4:	13 1f       	adc	r17, r19
    21a6:	0e 94 88 10 	call	0x2110	; 0x2110 <UART_receiveByte>
    21aa:	f8 01       	movw	r30, r16
    21ac:	80 83       	st	Z, r24
    21ae:	0f c0       	rjmp	.+30     	; 0x21ce <UART_receiveString+0x4e>

	/* We will start check for a specific character which means to us a null char*/
	while(Str[a_stringCounter] != '=')
	{
		a_stringCounter++;
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	8f 5f       	subi	r24, 0xFF	; 255
    21b4:	89 83       	std	Y+1, r24	; 0x01
		Str[a_stringCounter] = UART_receiveByte();
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	28 2f       	mov	r18, r24
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
    21be:	9b 81       	ldd	r25, Y+3	; 0x03
    21c0:	8c 01       	movw	r16, r24
    21c2:	02 0f       	add	r16, r18
    21c4:	13 1f       	adc	r17, r19
    21c6:	0e 94 88 10 	call	0x2110	; 0x2110 <UART_receiveByte>
    21ca:	f8 01       	movw	r30, r16
    21cc:	80 83       	st	Z, r24
	uint8 a_stringCounter = 0;

	Str[a_stringCounter] = UART_receiveByte();

	/* We will start check for a specific character which means to us a null char*/
	while(Str[a_stringCounter] != '=')
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	9b 81       	ldd	r25, Y+3	; 0x03
    21d8:	fc 01       	movw	r30, r24
    21da:	e2 0f       	add	r30, r18
    21dc:	f3 1f       	adc	r31, r19
    21de:	80 81       	ld	r24, Z
    21e0:	8d 33       	cpi	r24, 0x3D	; 61
    21e2:	31 f7       	brne	.-52     	; 0x21b0 <UART_receiveString+0x30>
		a_stringCounter++;
		Str[a_stringCounter] = UART_receiveByte();
	}

	/* Then redefining the string by replacing the stop char with NULL char */
	Str[a_stringCounter] = '\0';
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	9b 81       	ldd	r25, Y+3	; 0x03
    21ee:	fc 01       	movw	r30, r24
    21f0:	e2 0f       	add	r30, r18
    21f2:	f3 1f       	adc	r31, r19
    21f4:	10 82       	st	Z, r1
}
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	1f 91       	pop	r17
    2202:	0f 91       	pop	r16
    2204:	08 95       	ret

00002206 <DCMotor_init>:
#include "../MCAL/Header/TIMER.h"

/**-------------------------Function Definition Section-------------**/

void DCMotor_init()
{
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Motor is connected to L293D Driver
	 */
	GPIO_setupPinDirection(DC_MOTOR_IN1_OUTPUT_PORT_ID, L293D_IN1_ID, PIN_OUTPUT);
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN2_OUTPUT_PORT_ID, L293D_IN2_ID, PIN_OUTPUT);
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	61 e0       	ldi	r22, 0x01	; 1
    221c:	41 e0       	ldi	r20, 0x01	; 1
    221e:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_EN_PORT_ID, 		L293D_EN1_ID, PIN_OUTPUT);
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	63 e0       	ldi	r22, 0x03	; 3
    2226:	41 e0       	ldi	r20, 0x01	; 1
    2228:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>

} /* End DCMotor_init function */
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <DcMotor_Rotate>:

/*----------------------------------------------------------------------------*/

void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	00 d0       	rcall	.+0      	; 0x2238 <DcMotor_Rotate+0x6>
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	6a 83       	std	Y+2, r22	; 0x02
	/* Selecting the Direction of the MOTOR */
	if(state == ClockWise)
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	88 23       	and	r24, r24
    2244:	59 f4       	brne	.+22     	; 0x225c <DcMotor_Rotate+0x2a>
	{
		GPIO_writePin(DC_MOTOR_IN1_OUTPUT_PORT_ID, L293D_IN1_ID, LOGIC_HIGH);
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	60 e0       	ldi	r22, 0x00	; 0
    224a:	41 e0       	ldi	r20, 0x01	; 1
    224c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_OUTPUT_PORT_ID, L293D_IN2_ID, LOGIC_LOW);
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	61 e0       	ldi	r22, 0x01	; 1
    2254:	40 e0       	ldi	r20, 0x00	; 0
    2256:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    225a:	0d c0       	rjmp	.+26     	; 0x2276 <DcMotor_Rotate+0x44>
	}
	else if(state == Anti_ClockWise)
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	81 30       	cpi	r24, 0x01	; 1
    2260:	51 f4       	brne	.+20     	; 0x2276 <DcMotor_Rotate+0x44>
	{
		GPIO_writePin(DC_MOTOR_IN2_OUTPUT_PORT_ID, L293D_IN2_ID, LOGIC_HIGH);
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	61 e0       	ldi	r22, 0x01	; 1
    2266:	41 e0       	ldi	r20, 0x01	; 1
    2268:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN1_OUTPUT_PORT_ID, L293D_IN1_ID, LOGIC_LOW);
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
	}

	/* Sending the compare value to Timer everytime to change the motor speed */
	Timer0_PWM_Activate(&speed);
    2276:	ce 01       	movw	r24, r28
    2278:	02 96       	adiw	r24, 0x02	; 2
    227a:	0e 94 c7 0c 	call	0x198e	; 0x198e <Timer0_PWM_Activate>
}
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <DCMotor_stop>:

/*----------------------------------------------------------------------------*/

void DCMotor_stop()
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	0f 92       	push	r0
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
	uint8 Speed = 0;
    2292:	19 82       	std	Y+1, r1	; 0x01
	Timer0_PWM_Activate(&Speed); /* Sending speed 0 to DCMotor_Speed() */
    2294:	ce 01       	movw	r24, r28
    2296:	01 96       	adiw	r24, 0x01	; 1
    2298:	0e 94 c7 0c 	call	0x198e	; 0x198e <Timer0_PWM_Activate>
}   /* End DCMotor_stop()function */
    229c:	0f 90       	pop	r0
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	2e 97       	sbiw	r28, 0x0e	; 14
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT, LCD_RS_PIN , PIN_OUTPUT);
    22b8:	82 e0       	ldi	r24, 0x02	; 2
    22ba:	63 e0       	ldi	r22, 0x03	; 3
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_EN_PORT, LCD_EN_PIN , PIN_OUTPUT);
    22c2:	82 e0       	ldi	r24, 0x02	; 2
    22c4:	62 e0       	ldi	r22, 0x02	; 2
    22c6:	41 e0       	ldi	r20, 0x01	; 1
    22c8:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a0 ea       	ldi	r26, 0xA0	; 160
    22d2:	b1 e4       	ldi	r27, 0x41	; 65
    22d4:	8b 87       	std	Y+11, r24	; 0x0b
    22d6:	9c 87       	std	Y+12, r25	; 0x0c
    22d8:	ad 87       	std	Y+13, r26	; 0x0d
    22da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22de:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	4a ef       	ldi	r20, 0xFA	; 250
    22ea:	54 e4       	ldi	r21, 0x44	; 68
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	8f 83       	std	Y+7, r24	; 0x07
    22f6:	98 87       	std	Y+8, r25	; 0x08
    22f8:	a9 87       	std	Y+9, r26	; 0x09
    22fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e8       	ldi	r20, 0x80	; 128
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2310:	88 23       	and	r24, r24
    2312:	2c f4       	brge	.+10     	; 0x231e <LCD_init+0x7a>
		__ticks = 1;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	3f c0       	rjmp	.+126    	; 0x239c <LCD_init+0xf8>
	else if (__tmp > 65535)
    231e:	6f 81       	ldd	r22, Y+7	; 0x07
    2320:	78 85       	ldd	r23, Y+8	; 0x08
    2322:	89 85       	ldd	r24, Y+9	; 0x09
    2324:	9a 85       	ldd	r25, Y+10	; 0x0a
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	3f ef       	ldi	r19, 0xFF	; 255
    232a:	4f e7       	ldi	r20, 0x7F	; 127
    232c:	57 e4       	ldi	r21, 0x47	; 71
    232e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2332:	18 16       	cp	r1, r24
    2334:	4c f5       	brge	.+82     	; 0x2388 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2336:	6b 85       	ldd	r22, Y+11	; 0x0b
    2338:	7c 85       	ldd	r23, Y+12	; 0x0c
    233a:	8d 85       	ldd	r24, Y+13	; 0x0d
    233c:	9e 85       	ldd	r25, Y+14	; 0x0e
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e2       	ldi	r20, 0x20	; 32
    2344:	51 e4       	ldi	r21, 0x41	; 65
    2346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	bc 01       	movw	r22, r24
    2350:	cd 01       	movw	r24, r26
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	0f c0       	rjmp	.+30     	; 0x237e <LCD_init+0xda>
    2360:	88 ec       	ldi	r24, 0xC8	; 200
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9c 83       	std	Y+4, r25	; 0x04
    2366:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LCD_init+0xc8>
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	69 f7       	brne	.-38     	; 0x2360 <LCD_init+0xbc>
    2386:	14 c0       	rjmp	.+40     	; 0x23b0 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9e 83       	std	Y+6, r25	; 0x06
    239a:	8d 83       	std	Y+5, r24	; 0x05
    239c:	8d 81       	ldd	r24, Y+5	; 0x05
    239e:	9e 81       	ldd	r25, Y+6	; 0x06
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <LCD_init+0x104>
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
		LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
	}
#elif(LCD_DATA_MODE == 4) /* Using 4 bit mode */
	{

		GPIO_setupPinDirection(LCD_OUTPUT_PORT, LCD_D4_PIN , PIN_OUTPUT);
    23b0:	82 e0       	ldi	r24, 0x02	; 2
    23b2:	64 e0       	ldi	r22, 0x04	; 4
    23b4:	41 e0       	ldi	r20, 0x01	; 1
    23b6:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_OUTPUT_PORT, LCD_D5_PIN , PIN_OUTPUT);
    23ba:	82 e0       	ldi	r24, 0x02	; 2
    23bc:	65 e0       	ldi	r22, 0x05	; 5
    23be:	41 e0       	ldi	r20, 0x01	; 1
    23c0:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_OUTPUT_PORT, LCD_D6_PIN , PIN_OUTPUT);
    23c4:	82 e0       	ldi	r24, 0x02	; 2
    23c6:	66 e0       	ldi	r22, 0x06	; 6
    23c8:	41 e0       	ldi	r20, 0x01	; 1
    23ca:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_OUTPUT_PORT, LCD_D7_PIN , PIN_OUTPUT);
    23ce:	82 e0       	ldi	r24, 0x02	; 2
    23d0:	67 e0       	ldi	r22, 0x07	; 7
    23d2:	41 e0       	ldi	r20, 0x01	; 1
    23d4:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>

		/* Send for 4 bit initialization of LCD  */
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    23d8:	83 e3       	ldi	r24, 0x33	; 51
    23da:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    23de:	82 e3       	ldi	r24, 0x32	; 50
    23e0:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_sendCommand>
		/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    23e4:	88 e2       	ldi	r24, 0x28	; 40
    23e6:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_sendCommand>
	}

#endif

	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF ); /* cursor off */
    23ea:	8c e0       	ldi	r24, 0x0C	; 12
    23ec:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLR_DISPLAY); 		 /* clear LCD at the beginning */
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_sendCommand>
}
    23f6:	2e 96       	adiw	r28, 0x0e	; 14
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2408:	0f 93       	push	r16
    240a:	1f 93       	push	r17
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	c3 56       	subi	r28, 0x63	; 99
    2416:	d0 40       	sbci	r29, 0x00	; 0
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	cd bf       	out	0x3d, r28	; 61
    2422:	fe 01       	movw	r30, r28
    2424:	ed 59       	subi	r30, 0x9D	; 157
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW); 	/* Setting to Command Register selection */
    242a:	82 e0       	ldi	r24, 0x02	; 2
    242c:	63 e0       	ldi	r22, 0x03	; 3
    242e:	40 e0       	ldi	r20, 0x00	; 0
    2430:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    2434:	fe 01       	movw	r30, r28
    2436:	e1 5a       	subi	r30, 0xA1	; 161
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	a0 e8       	ldi	r26, 0x80	; 128
    2440:	bf e3       	ldi	r27, 0x3F	; 63
    2442:	80 83       	st	Z, r24
    2444:	91 83       	std	Z+1, r25	; 0x01
    2446:	a2 83       	std	Z+2, r26	; 0x02
    2448:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244a:	8e 01       	movw	r16, r28
    244c:	05 5a       	subi	r16, 0xA5	; 165
    244e:	1f 4f       	sbci	r17, 0xFF	; 255
    2450:	fe 01       	movw	r30, r28
    2452:	e1 5a       	subi	r30, 0xA1	; 161
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	60 81       	ld	r22, Z
    2458:	71 81       	ldd	r23, Z+1	; 0x01
    245a:	82 81       	ldd	r24, Z+2	; 0x02
    245c:	93 81       	ldd	r25, Z+3	; 0x03
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	4a ef       	ldi	r20, 0xFA	; 250
    2464:	54 e4       	ldi	r21, 0x44	; 68
    2466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	f8 01       	movw	r30, r16
    2470:	80 83       	st	Z, r24
    2472:	91 83       	std	Z+1, r25	; 0x01
    2474:	a2 83       	std	Z+2, r26	; 0x02
    2476:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2478:	fe 01       	movw	r30, r28
    247a:	e5 5a       	subi	r30, 0xA5	; 165
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	60 81       	ld	r22, Z
    2480:	71 81       	ldd	r23, Z+1	; 0x01
    2482:	82 81       	ldd	r24, Z+2	; 0x02
    2484:	93 81       	ldd	r25, Z+3	; 0x03
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e8       	ldi	r20, 0x80	; 128
    248c:	5f e3       	ldi	r21, 0x3F	; 63
    248e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2492:	88 23       	and	r24, r24
    2494:	44 f4       	brge	.+16     	; 0x24a6 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2496:	fe 01       	movw	r30, r28
    2498:	e7 5a       	subi	r30, 0xA7	; 167
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
    24a4:	64 c0       	rjmp	.+200    	; 0x256e <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    24a6:	fe 01       	movw	r30, r28
    24a8:	e5 5a       	subi	r30, 0xA5	; 165
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	60 81       	ld	r22, Z
    24ae:	71 81       	ldd	r23, Z+1	; 0x01
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	93 81       	ldd	r25, Z+3	; 0x03
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	3f ef       	ldi	r19, 0xFF	; 255
    24b8:	4f e7       	ldi	r20, 0x7F	; 127
    24ba:	57 e4       	ldi	r21, 0x47	; 71
    24bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c0:	18 16       	cp	r1, r24
    24c2:	0c f0       	brlt	.+2      	; 0x24c6 <LCD_sendCommand+0xbe>
    24c4:	43 c0       	rjmp	.+134    	; 0x254c <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c6:	fe 01       	movw	r30, r28
    24c8:	e1 5a       	subi	r30, 0xA1	; 161
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	60 81       	ld	r22, Z
    24ce:	71 81       	ldd	r23, Z+1	; 0x01
    24d0:	82 81       	ldd	r24, Z+2	; 0x02
    24d2:	93 81       	ldd	r25, Z+3	; 0x03
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e2       	ldi	r20, 0x20	; 32
    24da:	51 e4       	ldi	r21, 0x41	; 65
    24dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	8e 01       	movw	r16, r28
    24e6:	07 5a       	subi	r16, 0xA7	; 167
    24e8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ea:	bc 01       	movw	r22, r24
    24ec:	cd 01       	movw	r24, r26
    24ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	f8 01       	movw	r30, r16
    24f8:	91 83       	std	Z+1, r25	; 0x01
    24fa:	80 83       	st	Z, r24
    24fc:	1f c0       	rjmp	.+62     	; 0x253c <LCD_sendCommand+0x134>
    24fe:	fe 01       	movw	r30, r28
    2500:	e9 5a       	subi	r30, 0xA9	; 169
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	88 ec       	ldi	r24, 0xC8	; 200
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	91 83       	std	Z+1, r25	; 0x01
    250a:	80 83       	st	Z, r24
    250c:	fe 01       	movw	r30, r28
    250e:	e9 5a       	subi	r30, 0xA9	; 169
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	91 81       	ldd	r25, Z+1	; 0x01
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <LCD_sendCommand+0x10e>
    251a:	fe 01       	movw	r30, r28
    251c:	e9 5a       	subi	r30, 0xA9	; 169
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	91 83       	std	Z+1, r25	; 0x01
    2522:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2524:	de 01       	movw	r26, r28
    2526:	a7 5a       	subi	r26, 0xA7	; 167
    2528:	bf 4f       	sbci	r27, 0xFF	; 255
    252a:	fe 01       	movw	r30, r28
    252c:	e7 5a       	subi	r30, 0xA7	; 167
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 81       	ld	r24, Z
    2532:	91 81       	ldd	r25, Z+1	; 0x01
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	11 96       	adiw	r26, 0x01	; 1
    2538:	9c 93       	st	X, r25
    253a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253c:	fe 01       	movw	r30, r28
    253e:	e7 5a       	subi	r30, 0xA7	; 167
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	80 81       	ld	r24, Z
    2544:	91 81       	ldd	r25, Z+1	; 0x01
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	d1 f6       	brne	.-76     	; 0x24fe <LCD_sendCommand+0xf6>
    254a:	27 c0       	rjmp	.+78     	; 0x259a <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254c:	8e 01       	movw	r16, r28
    254e:	07 5a       	subi	r16, 0xA7	; 167
    2550:	1f 4f       	sbci	r17, 0xFF	; 255
    2552:	fe 01       	movw	r30, r28
    2554:	e5 5a       	subi	r30, 0xA5	; 165
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	60 81       	ld	r22, Z
    255a:	71 81       	ldd	r23, Z+1	; 0x01
    255c:	82 81       	ldd	r24, Z+2	; 0x02
    255e:	93 81       	ldd	r25, Z+3	; 0x03
    2560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	f8 01       	movw	r30, r16
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	80 83       	st	Z, r24
    256e:	de 01       	movw	r26, r28
    2570:	ab 5a       	subi	r26, 0xAB	; 171
    2572:	bf 4f       	sbci	r27, 0xFF	; 255
    2574:	fe 01       	movw	r30, r28
    2576:	e7 5a       	subi	r30, 0xA7	; 167
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	80 81       	ld	r24, Z
    257c:	91 81       	ldd	r25, Z+1	; 0x01
    257e:	8d 93       	st	X+, r24
    2580:	9c 93       	st	X, r25
    2582:	fe 01       	movw	r30, r28
    2584:	eb 5a       	subi	r30, 0xAB	; 171
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	80 81       	ld	r24, Z
    258a:	91 81       	ldd	r25, Z+1	; 0x01
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <LCD_sendCommand+0x184>
    2590:	fe 01       	movw	r30, r28
    2592:	eb 5a       	subi	r30, 0xAB	; 171
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	91 83       	std	Z+1, r25	; 0x01
    2598:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH); /* Enable LCD */
    259a:	82 e0       	ldi	r24, 0x02	; 2
    259c:	62 e0       	ldi	r22, 0x02	; 2
    259e:	41 e0       	ldi	r20, 0x01	; 1
    25a0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    25a4:	fe 01       	movw	r30, r28
    25a6:	ef 5a       	subi	r30, 0xAF	; 175
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	a0 e8       	ldi	r26, 0x80	; 128
    25b0:	bf e3       	ldi	r27, 0x3F	; 63
    25b2:	80 83       	st	Z, r24
    25b4:	91 83       	std	Z+1, r25	; 0x01
    25b6:	a2 83       	std	Z+2, r26	; 0x02
    25b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ba:	8e 01       	movw	r16, r28
    25bc:	03 5b       	subi	r16, 0xB3	; 179
    25be:	1f 4f       	sbci	r17, 0xFF	; 255
    25c0:	fe 01       	movw	r30, r28
    25c2:	ef 5a       	subi	r30, 0xAF	; 175
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	60 81       	ld	r22, Z
    25c8:	71 81       	ldd	r23, Z+1	; 0x01
    25ca:	82 81       	ldd	r24, Z+2	; 0x02
    25cc:	93 81       	ldd	r25, Z+3	; 0x03
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4a ef       	ldi	r20, 0xFA	; 250
    25d4:	54 e4       	ldi	r21, 0x44	; 68
    25d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	f8 01       	movw	r30, r16
    25e0:	80 83       	st	Z, r24
    25e2:	91 83       	std	Z+1, r25	; 0x01
    25e4:	a2 83       	std	Z+2, r26	; 0x02
    25e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25e8:	fe 01       	movw	r30, r28
    25ea:	e3 5b       	subi	r30, 0xB3	; 179
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	60 81       	ld	r22, Z
    25f0:	71 81       	ldd	r23, Z+1	; 0x01
    25f2:	82 81       	ldd	r24, Z+2	; 0x02
    25f4:	93 81       	ldd	r25, Z+3	; 0x03
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e8       	ldi	r20, 0x80	; 128
    25fc:	5f e3       	ldi	r21, 0x3F	; 63
    25fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2602:	88 23       	and	r24, r24
    2604:	44 f4       	brge	.+16     	; 0x2616 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2606:	fe 01       	movw	r30, r28
    2608:	e5 5b       	subi	r30, 0xB5	; 181
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	91 83       	std	Z+1, r25	; 0x01
    2612:	80 83       	st	Z, r24
    2614:	64 c0       	rjmp	.+200    	; 0x26de <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2616:	fe 01       	movw	r30, r28
    2618:	e3 5b       	subi	r30, 0xB3	; 179
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	60 81       	ld	r22, Z
    261e:	71 81       	ldd	r23, Z+1	; 0x01
    2620:	82 81       	ldd	r24, Z+2	; 0x02
    2622:	93 81       	ldd	r25, Z+3	; 0x03
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	3f ef       	ldi	r19, 0xFF	; 255
    2628:	4f e7       	ldi	r20, 0x7F	; 127
    262a:	57 e4       	ldi	r21, 0x47	; 71
    262c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2630:	18 16       	cp	r1, r24
    2632:	0c f0       	brlt	.+2      	; 0x2636 <LCD_sendCommand+0x22e>
    2634:	43 c0       	rjmp	.+134    	; 0x26bc <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2636:	fe 01       	movw	r30, r28
    2638:	ef 5a       	subi	r30, 0xAF	; 175
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	60 81       	ld	r22, Z
    263e:	71 81       	ldd	r23, Z+1	; 0x01
    2640:	82 81       	ldd	r24, Z+2	; 0x02
    2642:	93 81       	ldd	r25, Z+3	; 0x03
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e2       	ldi	r20, 0x20	; 32
    264a:	51 e4       	ldi	r21, 0x41	; 65
    264c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	8e 01       	movw	r16, r28
    2656:	05 5b       	subi	r16, 0xB5	; 181
    2658:	1f 4f       	sbci	r17, 0xFF	; 255
    265a:	bc 01       	movw	r22, r24
    265c:	cd 01       	movw	r24, r26
    265e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	f8 01       	movw	r30, r16
    2668:	91 83       	std	Z+1, r25	; 0x01
    266a:	80 83       	st	Z, r24
    266c:	1f c0       	rjmp	.+62     	; 0x26ac <LCD_sendCommand+0x2a4>
    266e:	fe 01       	movw	r30, r28
    2670:	e7 5b       	subi	r30, 0xB7	; 183
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	88 ec       	ldi	r24, 0xC8	; 200
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	91 83       	std	Z+1, r25	; 0x01
    267a:	80 83       	st	Z, r24
    267c:	fe 01       	movw	r30, r28
    267e:	e7 5b       	subi	r30, 0xB7	; 183
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	80 81       	ld	r24, Z
    2684:	91 81       	ldd	r25, Z+1	; 0x01
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <LCD_sendCommand+0x27e>
    268a:	fe 01       	movw	r30, r28
    268c:	e7 5b       	subi	r30, 0xB7	; 183
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	91 83       	std	Z+1, r25	; 0x01
    2692:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2694:	de 01       	movw	r26, r28
    2696:	a5 5b       	subi	r26, 0xB5	; 181
    2698:	bf 4f       	sbci	r27, 0xFF	; 255
    269a:	fe 01       	movw	r30, r28
    269c:	e5 5b       	subi	r30, 0xB5	; 181
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	80 81       	ld	r24, Z
    26a2:	91 81       	ldd	r25, Z+1	; 0x01
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	11 96       	adiw	r26, 0x01	; 1
    26a8:	9c 93       	st	X, r25
    26aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ac:	fe 01       	movw	r30, r28
    26ae:	e5 5b       	subi	r30, 0xB5	; 181
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 81       	ld	r24, Z
    26b4:	91 81       	ldd	r25, Z+1	; 0x01
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	d1 f6       	brne	.-76     	; 0x266e <LCD_sendCommand+0x266>
    26ba:	27 c0       	rjmp	.+78     	; 0x270a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26bc:	8e 01       	movw	r16, r28
    26be:	05 5b       	subi	r16, 0xB5	; 181
    26c0:	1f 4f       	sbci	r17, 0xFF	; 255
    26c2:	fe 01       	movw	r30, r28
    26c4:	e3 5b       	subi	r30, 0xB3	; 179
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	60 81       	ld	r22, Z
    26ca:	71 81       	ldd	r23, Z+1	; 0x01
    26cc:	82 81       	ldd	r24, Z+2	; 0x02
    26ce:	93 81       	ldd	r25, Z+3	; 0x03
    26d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	f8 01       	movw	r30, r16
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
    26de:	de 01       	movw	r26, r28
    26e0:	a9 5b       	subi	r26, 0xB9	; 185
    26e2:	bf 4f       	sbci	r27, 0xFF	; 255
    26e4:	fe 01       	movw	r30, r28
    26e6:	e5 5b       	subi	r30, 0xB5	; 181
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	80 81       	ld	r24, Z
    26ec:	91 81       	ldd	r25, Z+1	; 0x01
    26ee:	8d 93       	st	X+, r24
    26f0:	9c 93       	st	X, r25
    26f2:	fe 01       	movw	r30, r28
    26f4:	e9 5b       	subi	r30, 0xB9	; 185
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 81       	ld	r24, Z
    26fa:	91 81       	ldd	r25, Z+1	; 0x01
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <LCD_sendCommand+0x2f4>
    2700:	fe 01       	movw	r30, r28
    2702:	e9 5b       	subi	r30, 0xB9	; 185
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	91 83       	std	Z+1, r25	; 0x01
    2708:	80 83       	st	Z, r24
		GPIO_writePort(LCD_OUTPUT_PORT, command); 			/* Sending the command through the 8 pins*/
	}
#else
	{
		/* Sending the LAST four BITS */
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D4_PIN , GET_BIT(command,4));
    270a:	fe 01       	movw	r30, r28
    270c:	ed 59       	subi	r30, 0x9D	; 157
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	88 2f       	mov	r24, r24
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	80 71       	andi	r24, 0x10	; 16
    2718:	90 70       	andi	r25, 0x00	; 0
    271a:	95 95       	asr	r25
    271c:	87 95       	ror	r24
    271e:	95 95       	asr	r25
    2720:	87 95       	ror	r24
    2722:	95 95       	asr	r25
    2724:	87 95       	ror	r24
    2726:	95 95       	asr	r25
    2728:	87 95       	ror	r24
    272a:	98 2f       	mov	r25, r24
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	64 e0       	ldi	r22, 0x04	; 4
    2730:	49 2f       	mov	r20, r25
    2732:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D5_PIN , GET_BIT(command,5));
    2736:	fe 01       	movw	r30, r28
    2738:	ed 59       	subi	r30, 0x9D	; 157
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 81       	ld	r24, Z
    273e:	88 2f       	mov	r24, r24
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	80 72       	andi	r24, 0x20	; 32
    2744:	90 70       	andi	r25, 0x00	; 0
    2746:	95 95       	asr	r25
    2748:	87 95       	ror	r24
    274a:	95 95       	asr	r25
    274c:	87 95       	ror	r24
    274e:	95 95       	asr	r25
    2750:	87 95       	ror	r24
    2752:	95 95       	asr	r25
    2754:	87 95       	ror	r24
    2756:	95 95       	asr	r25
    2758:	87 95       	ror	r24
    275a:	98 2f       	mov	r25, r24
    275c:	82 e0       	ldi	r24, 0x02	; 2
    275e:	65 e0       	ldi	r22, 0x05	; 5
    2760:	49 2f       	mov	r20, r25
    2762:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D6_PIN , GET_BIT(command,6));
    2766:	fe 01       	movw	r30, r28
    2768:	ed 59       	subi	r30, 0x9D	; 157
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	80 81       	ld	r24, Z
    276e:	88 2f       	mov	r24, r24
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	80 74       	andi	r24, 0x40	; 64
    2774:	90 70       	andi	r25, 0x00	; 0
    2776:	08 2e       	mov	r0, r24
    2778:	89 2f       	mov	r24, r25
    277a:	00 0c       	add	r0, r0
    277c:	88 1f       	adc	r24, r24
    277e:	99 0b       	sbc	r25, r25
    2780:	00 0c       	add	r0, r0
    2782:	88 1f       	adc	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	98 2f       	mov	r25, r24
    2788:	82 e0       	ldi	r24, 0x02	; 2
    278a:	66 e0       	ldi	r22, 0x06	; 6
    278c:	49 2f       	mov	r20, r25
    278e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D7_PIN , GET_BIT(command,7));
    2792:	fe 01       	movw	r30, r28
    2794:	ed 59       	subi	r30, 0x9D	; 157
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	80 81       	ld	r24, Z
    279a:	98 2f       	mov	r25, r24
    279c:	99 1f       	adc	r25, r25
    279e:	99 27       	eor	r25, r25
    27a0:	99 1f       	adc	r25, r25
    27a2:	82 e0       	ldi	r24, 0x02	; 2
    27a4:	67 e0       	ldi	r22, 0x07	; 7
    27a6:	49 2f       	mov	r20, r25
    27a8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    27ac:	fe 01       	movw	r30, r28
    27ae:	ed 5b       	subi	r30, 0xBD	; 189
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	a0 e8       	ldi	r26, 0x80	; 128
    27b8:	bf e3       	ldi	r27, 0x3F	; 63
    27ba:	80 83       	st	Z, r24
    27bc:	91 83       	std	Z+1, r25	; 0x01
    27be:	a2 83       	std	Z+2, r26	; 0x02
    27c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c2:	8e 01       	movw	r16, r28
    27c4:	01 5c       	subi	r16, 0xC1	; 193
    27c6:	1f 4f       	sbci	r17, 0xFF	; 255
    27c8:	fe 01       	movw	r30, r28
    27ca:	ed 5b       	subi	r30, 0xBD	; 189
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	60 81       	ld	r22, Z
    27d0:	71 81       	ldd	r23, Z+1	; 0x01
    27d2:	82 81       	ldd	r24, Z+2	; 0x02
    27d4:	93 81       	ldd	r25, Z+3	; 0x03
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	4a ef       	ldi	r20, 0xFA	; 250
    27dc:	54 e4       	ldi	r21, 0x44	; 68
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	f8 01       	movw	r30, r16
    27e8:	80 83       	st	Z, r24
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	a2 83       	std	Z+2, r26	; 0x02
    27ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27f0:	fe 01       	movw	r30, r28
    27f2:	ff 96       	adiw	r30, 0x3f	; 63
    27f4:	60 81       	ld	r22, Z
    27f6:	71 81       	ldd	r23, Z+1	; 0x01
    27f8:	82 81       	ldd	r24, Z+2	; 0x02
    27fa:	93 81       	ldd	r25, Z+3	; 0x03
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e8       	ldi	r20, 0x80	; 128
    2802:	5f e3       	ldi	r21, 0x3F	; 63
    2804:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2808:	88 23       	and	r24, r24
    280a:	2c f4       	brge	.+10     	; 0x2816 <LCD_sendCommand+0x40e>
		__ticks = 1;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	9e af       	std	Y+62, r25	; 0x3e
    2812:	8d af       	std	Y+61, r24	; 0x3d
    2814:	46 c0       	rjmp	.+140    	; 0x28a2 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2816:	fe 01       	movw	r30, r28
    2818:	ff 96       	adiw	r30, 0x3f	; 63
    281a:	60 81       	ld	r22, Z
    281c:	71 81       	ldd	r23, Z+1	; 0x01
    281e:	82 81       	ldd	r24, Z+2	; 0x02
    2820:	93 81       	ldd	r25, Z+3	; 0x03
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	3f ef       	ldi	r19, 0xFF	; 255
    2826:	4f e7       	ldi	r20, 0x7F	; 127
    2828:	57 e4       	ldi	r21, 0x47	; 71
    282a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    282e:	18 16       	cp	r1, r24
    2830:	64 f5       	brge	.+88     	; 0x288a <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2832:	fe 01       	movw	r30, r28
    2834:	ed 5b       	subi	r30, 0xBD	; 189
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	60 81       	ld	r22, Z
    283a:	71 81       	ldd	r23, Z+1	; 0x01
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e2       	ldi	r20, 0x20	; 32
    2846:	51 e4       	ldi	r21, 0x41	; 65
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	9e af       	std	Y+62, r25	; 0x3e
    285e:	8d af       	std	Y+61, r24	; 0x3d
    2860:	0f c0       	rjmp	.+30     	; 0x2880 <LCD_sendCommand+0x478>
    2862:	88 ec       	ldi	r24, 0xC8	; 200
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	9c af       	std	Y+60, r25	; 0x3c
    2868:	8b af       	std	Y+59, r24	; 0x3b
    286a:	8b ad       	ldd	r24, Y+59	; 0x3b
    286c:	9c ad       	ldd	r25, Y+60	; 0x3c
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	f1 f7       	brne	.-4      	; 0x286e <LCD_sendCommand+0x466>
    2872:	9c af       	std	Y+60, r25	; 0x3c
    2874:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2876:	8d ad       	ldd	r24, Y+61	; 0x3d
    2878:	9e ad       	ldd	r25, Y+62	; 0x3e
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	9e af       	std	Y+62, r25	; 0x3e
    287e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2880:	8d ad       	ldd	r24, Y+61	; 0x3d
    2882:	9e ad       	ldd	r25, Y+62	; 0x3e
    2884:	00 97       	sbiw	r24, 0x00	; 0
    2886:	69 f7       	brne	.-38     	; 0x2862 <LCD_sendCommand+0x45a>
    2888:	16 c0       	rjmp	.+44     	; 0x28b6 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288a:	fe 01       	movw	r30, r28
    288c:	ff 96       	adiw	r30, 0x3f	; 63
    288e:	60 81       	ld	r22, Z
    2890:	71 81       	ldd	r23, Z+1	; 0x01
    2892:	82 81       	ldd	r24, Z+2	; 0x02
    2894:	93 81       	ldd	r25, Z+3	; 0x03
    2896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	9e af       	std	Y+62, r25	; 0x3e
    28a0:	8d af       	std	Y+61, r24	; 0x3d
    28a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    28a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    28a6:	9a af       	std	Y+58, r25	; 0x3a
    28a8:	89 af       	std	Y+57, r24	; 0x39
    28aa:	89 ad       	ldd	r24, Y+57	; 0x39
    28ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <LCD_sendCommand+0x4a6>
    28b2:	9a af       	std	Y+58, r25	; 0x3a
    28b4:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW); /* De-activating the LCD */
    28b6:	82 e0       	ldi	r24, 0x02	; 2
    28b8:	62 e0       	ldi	r22, 0x02	; 2
    28ba:	40 e0       	ldi	r20, 0x00	; 0
    28bc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	a0 e8       	ldi	r26, 0x80	; 128
    28c6:	bf e3       	ldi	r27, 0x3F	; 63
    28c8:	8d ab       	std	Y+53, r24	; 0x35
    28ca:	9e ab       	std	Y+54, r25	; 0x36
    28cc:	af ab       	std	Y+55, r26	; 0x37
    28ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d0:	6d a9       	ldd	r22, Y+53	; 0x35
    28d2:	7e a9       	ldd	r23, Y+54	; 0x36
    28d4:	8f a9       	ldd	r24, Y+55	; 0x37
    28d6:	98 ad       	ldd	r25, Y+56	; 0x38
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	4a ef       	ldi	r20, 0xFA	; 250
    28de:	54 e4       	ldi	r21, 0x44	; 68
    28e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	89 ab       	std	Y+49, r24	; 0x31
    28ea:	9a ab       	std	Y+50, r25	; 0x32
    28ec:	ab ab       	std	Y+51, r26	; 0x33
    28ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28f0:	69 a9       	ldd	r22, Y+49	; 0x31
    28f2:	7a a9       	ldd	r23, Y+50	; 0x32
    28f4:	8b a9       	ldd	r24, Y+51	; 0x33
    28f6:	9c a9       	ldd	r25, Y+52	; 0x34
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e8       	ldi	r20, 0x80	; 128
    28fe:	5f e3       	ldi	r21, 0x3F	; 63
    2900:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2904:	88 23       	and	r24, r24
    2906:	2c f4       	brge	.+10     	; 0x2912 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	98 ab       	std	Y+48, r25	; 0x30
    290e:	8f a7       	std	Y+47, r24	; 0x2f
    2910:	3f c0       	rjmp	.+126    	; 0x2990 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2912:	69 a9       	ldd	r22, Y+49	; 0x31
    2914:	7a a9       	ldd	r23, Y+50	; 0x32
    2916:	8b a9       	ldd	r24, Y+51	; 0x33
    2918:	9c a9       	ldd	r25, Y+52	; 0x34
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	3f ef       	ldi	r19, 0xFF	; 255
    291e:	4f e7       	ldi	r20, 0x7F	; 127
    2920:	57 e4       	ldi	r21, 0x47	; 71
    2922:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2926:	18 16       	cp	r1, r24
    2928:	4c f5       	brge	.+82     	; 0x297c <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292a:	6d a9       	ldd	r22, Y+53	; 0x35
    292c:	7e a9       	ldd	r23, Y+54	; 0x36
    292e:	8f a9       	ldd	r24, Y+55	; 0x37
    2930:	98 ad       	ldd	r25, Y+56	; 0x38
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e2       	ldi	r20, 0x20	; 32
    2938:	51 e4       	ldi	r21, 0x41	; 65
    293a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	bc 01       	movw	r22, r24
    2944:	cd 01       	movw	r24, r26
    2946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	98 ab       	std	Y+48, r25	; 0x30
    2950:	8f a7       	std	Y+47, r24	; 0x2f
    2952:	0f c0       	rjmp	.+30     	; 0x2972 <LCD_sendCommand+0x56a>
    2954:	88 ec       	ldi	r24, 0xC8	; 200
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9e a7       	std	Y+46, r25	; 0x2e
    295a:	8d a7       	std	Y+45, r24	; 0x2d
    295c:	8d a5       	ldd	r24, Y+45	; 0x2d
    295e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <LCD_sendCommand+0x558>
    2964:	9e a7       	std	Y+46, r25	; 0x2e
    2966:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2968:	8f a5       	ldd	r24, Y+47	; 0x2f
    296a:	98 a9       	ldd	r25, Y+48	; 0x30
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	98 ab       	std	Y+48, r25	; 0x30
    2970:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2972:	8f a5       	ldd	r24, Y+47	; 0x2f
    2974:	98 a9       	ldd	r25, Y+48	; 0x30
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	69 f7       	brne	.-38     	; 0x2954 <LCD_sendCommand+0x54c>
    297a:	14 c0       	rjmp	.+40     	; 0x29a4 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297c:	69 a9       	ldd	r22, Y+49	; 0x31
    297e:	7a a9       	ldd	r23, Y+50	; 0x32
    2980:	8b a9       	ldd	r24, Y+51	; 0x33
    2982:	9c a9       	ldd	r25, Y+52	; 0x34
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	98 ab       	std	Y+48, r25	; 0x30
    298e:	8f a7       	std	Y+47, r24	; 0x2f
    2990:	8f a5       	ldd	r24, Y+47	; 0x2f
    2992:	98 a9       	ldd	r25, Y+48	; 0x30
    2994:	9c a7       	std	Y+44, r25	; 0x2c
    2996:	8b a7       	std	Y+43, r24	; 0x2b
    2998:	8b a5       	ldd	r24, Y+43	; 0x2b
    299a:	9c a5       	ldd	r25, Y+44	; 0x2c
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <LCD_sendCommand+0x594>
    29a0:	9c a7       	std	Y+44, r25	; 0x2c
    29a2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH); /* Enable LCD */
    29a4:	82 e0       	ldi	r24, 0x02	; 2
    29a6:	62 e0       	ldi	r22, 0x02	; 2
    29a8:	41 e0       	ldi	r20, 0x01	; 1
    29aa:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	a0 e8       	ldi	r26, 0x80	; 128
    29b4:	bf e3       	ldi	r27, 0x3F	; 63
    29b6:	8f a3       	std	Y+39, r24	; 0x27
    29b8:	98 a7       	std	Y+40, r25	; 0x28
    29ba:	a9 a7       	std	Y+41, r26	; 0x29
    29bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29be:	6f a1       	ldd	r22, Y+39	; 0x27
    29c0:	78 a5       	ldd	r23, Y+40	; 0x28
    29c2:	89 a5       	ldd	r24, Y+41	; 0x29
    29c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	4a ef       	ldi	r20, 0xFA	; 250
    29cc:	54 e4       	ldi	r21, 0x44	; 68
    29ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	8b a3       	std	Y+35, r24	; 0x23
    29d8:	9c a3       	std	Y+36, r25	; 0x24
    29da:	ad a3       	std	Y+37, r26	; 0x25
    29dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29de:	6b a1       	ldd	r22, Y+35	; 0x23
    29e0:	7c a1       	ldd	r23, Y+36	; 0x24
    29e2:	8d a1       	ldd	r24, Y+37	; 0x25
    29e4:	9e a1       	ldd	r25, Y+38	; 0x26
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e8       	ldi	r20, 0x80	; 128
    29ec:	5f e3       	ldi	r21, 0x3F	; 63
    29ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29f2:	88 23       	and	r24, r24
    29f4:	2c f4       	brge	.+10     	; 0x2a00 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	9a a3       	std	Y+34, r25	; 0x22
    29fc:	89 a3       	std	Y+33, r24	; 0x21
    29fe:	3f c0       	rjmp	.+126    	; 0x2a7e <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2a00:	6b a1       	ldd	r22, Y+35	; 0x23
    2a02:	7c a1       	ldd	r23, Y+36	; 0x24
    2a04:	8d a1       	ldd	r24, Y+37	; 0x25
    2a06:	9e a1       	ldd	r25, Y+38	; 0x26
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	3f ef       	ldi	r19, 0xFF	; 255
    2a0c:	4f e7       	ldi	r20, 0x7F	; 127
    2a0e:	57 e4       	ldi	r21, 0x47	; 71
    2a10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a14:	18 16       	cp	r1, r24
    2a16:	4c f5       	brge	.+82     	; 0x2a6a <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a18:	6f a1       	ldd	r22, Y+39	; 0x27
    2a1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e2       	ldi	r20, 0x20	; 32
    2a26:	51 e4       	ldi	r21, 0x41	; 65
    2a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9a a3       	std	Y+34, r25	; 0x22
    2a3e:	89 a3       	std	Y+33, r24	; 0x21
    2a40:	0f c0       	rjmp	.+30     	; 0x2a60 <LCD_sendCommand+0x658>
    2a42:	88 ec       	ldi	r24, 0xC8	; 200
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	98 a3       	std	Y+32, r25	; 0x20
    2a48:	8f 8f       	std	Y+31, r24	; 0x1f
    2a4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a4c:	98 a1       	ldd	r25, Y+32	; 0x20
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <LCD_sendCommand+0x646>
    2a52:	98 a3       	std	Y+32, r25	; 0x20
    2a54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a56:	89 a1       	ldd	r24, Y+33	; 0x21
    2a58:	9a a1       	ldd	r25, Y+34	; 0x22
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	9a a3       	std	Y+34, r25	; 0x22
    2a5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a60:	89 a1       	ldd	r24, Y+33	; 0x21
    2a62:	9a a1       	ldd	r25, Y+34	; 0x22
    2a64:	00 97       	sbiw	r24, 0x00	; 0
    2a66:	69 f7       	brne	.-38     	; 0x2a42 <LCD_sendCommand+0x63a>
    2a68:	14 c0       	rjmp	.+40     	; 0x2a92 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a70:	9e a1       	ldd	r25, Y+38	; 0x26
    2a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	9a a3       	std	Y+34, r25	; 0x22
    2a7c:	89 a3       	std	Y+33, r24	; 0x21
    2a7e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a80:	9a a1       	ldd	r25, Y+34	; 0x22
    2a82:	9e 8f       	std	Y+30, r25	; 0x1e
    2a84:	8d 8f       	std	Y+29, r24	; 0x1d
    2a86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <LCD_sendCommand+0x682>
    2a8e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a90:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		/* Sending the FIRST four BITS */
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D4_PIN , GET_BIT(command,0));
    2a92:	fe 01       	movw	r30, r28
    2a94:	ed 59       	subi	r30, 0x9D	; 157
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 81       	ld	r24, Z
    2a9a:	98 2f       	mov	r25, r24
    2a9c:	91 70       	andi	r25, 0x01	; 1
    2a9e:	82 e0       	ldi	r24, 0x02	; 2
    2aa0:	64 e0       	ldi	r22, 0x04	; 4
    2aa2:	49 2f       	mov	r20, r25
    2aa4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D5_PIN , GET_BIT(command,1));
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	ed 59       	subi	r30, 0x9D	; 157
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	80 81       	ld	r24, Z
    2ab0:	88 2f       	mov	r24, r24
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	82 70       	andi	r24, 0x02	; 2
    2ab6:	90 70       	andi	r25, 0x00	; 0
    2ab8:	95 95       	asr	r25
    2aba:	87 95       	ror	r24
    2abc:	98 2f       	mov	r25, r24
    2abe:	82 e0       	ldi	r24, 0x02	; 2
    2ac0:	65 e0       	ldi	r22, 0x05	; 5
    2ac2:	49 2f       	mov	r20, r25
    2ac4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D6_PIN , GET_BIT(command,2));
    2ac8:	fe 01       	movw	r30, r28
    2aca:	ed 59       	subi	r30, 0x9D	; 157
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	80 81       	ld	r24, Z
    2ad0:	88 2f       	mov	r24, r24
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	84 70       	andi	r24, 0x04	; 4
    2ad6:	90 70       	andi	r25, 0x00	; 0
    2ad8:	95 95       	asr	r25
    2ada:	87 95       	ror	r24
    2adc:	95 95       	asr	r25
    2ade:	87 95       	ror	r24
    2ae0:	98 2f       	mov	r25, r24
    2ae2:	82 e0       	ldi	r24, 0x02	; 2
    2ae4:	66 e0       	ldi	r22, 0x06	; 6
    2ae6:	49 2f       	mov	r20, r25
    2ae8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D7_PIN , GET_BIT(command,3));
    2aec:	fe 01       	movw	r30, r28
    2aee:	ed 59       	subi	r30, 0x9D	; 157
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	80 81       	ld	r24, Z
    2af4:	88 2f       	mov	r24, r24
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	88 70       	andi	r24, 0x08	; 8
    2afa:	90 70       	andi	r25, 0x00	; 0
    2afc:	95 95       	asr	r25
    2afe:	87 95       	ror	r24
    2b00:	95 95       	asr	r25
    2b02:	87 95       	ror	r24
    2b04:	95 95       	asr	r25
    2b06:	87 95       	ror	r24
    2b08:	98 2f       	mov	r25, r24
    2b0a:	82 e0       	ldi	r24, 0x02	; 2
    2b0c:	67 e0       	ldi	r22, 0x07	; 7
    2b0e:	49 2f       	mov	r20, r25
    2b10:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	a0 e8       	ldi	r26, 0x80	; 128
    2b1a:	bf e3       	ldi	r27, 0x3F	; 63
    2b1c:	89 8f       	std	Y+25, r24	; 0x19
    2b1e:	9a 8f       	std	Y+26, r25	; 0x1a
    2b20:	ab 8f       	std	Y+27, r26	; 0x1b
    2b22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b24:	69 8d       	ldd	r22, Y+25	; 0x19
    2b26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	4a ef       	ldi	r20, 0xFA	; 250
    2b32:	54 e4       	ldi	r21, 0x44	; 68
    2b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	8d 8b       	std	Y+21, r24	; 0x15
    2b3e:	9e 8b       	std	Y+22, r25	; 0x16
    2b40:	af 8b       	std	Y+23, r26	; 0x17
    2b42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b44:	6d 89       	ldd	r22, Y+21	; 0x15
    2b46:	7e 89       	ldd	r23, Y+22	; 0x16
    2b48:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 e8       	ldi	r20, 0x80	; 128
    2b52:	5f e3       	ldi	r21, 0x3F	; 63
    2b54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b58:	88 23       	and	r24, r24
    2b5a:	2c f4       	brge	.+10     	; 0x2b66 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	9c 8b       	std	Y+20, r25	; 0x14
    2b62:	8b 8b       	std	Y+19, r24	; 0x13
    2b64:	3f c0       	rjmp	.+126    	; 0x2be4 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2b66:	6d 89       	ldd	r22, Y+21	; 0x15
    2b68:	7e 89       	ldd	r23, Y+22	; 0x16
    2b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	3f ef       	ldi	r19, 0xFF	; 255
    2b72:	4f e7       	ldi	r20, 0x7F	; 127
    2b74:	57 e4       	ldi	r21, 0x47	; 71
    2b76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b7a:	18 16       	cp	r1, r24
    2b7c:	4c f5       	brge	.+82     	; 0x2bd0 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	40 e2       	ldi	r20, 0x20	; 32
    2b8c:	51 e4       	ldi	r21, 0x41	; 65
    2b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	bc 01       	movw	r22, r24
    2b98:	cd 01       	movw	r24, r26
    2b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	9c 8b       	std	Y+20, r25	; 0x14
    2ba4:	8b 8b       	std	Y+19, r24	; 0x13
    2ba6:	0f c0       	rjmp	.+30     	; 0x2bc6 <LCD_sendCommand+0x7be>
    2ba8:	88 ec       	ldi	r24, 0xC8	; 200
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	9a 8b       	std	Y+18, r25	; 0x12
    2bae:	89 8b       	std	Y+17, r24	; 0x11
    2bb0:	89 89       	ldd	r24, Y+17	; 0x11
    2bb2:	9a 89       	ldd	r25, Y+18	; 0x12
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	f1 f7       	brne	.-4      	; 0x2bb4 <LCD_sendCommand+0x7ac>
    2bb8:	9a 8b       	std	Y+18, r25	; 0x12
    2bba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc0:	01 97       	sbiw	r24, 0x01	; 1
    2bc2:	9c 8b       	std	Y+20, r25	; 0x14
    2bc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bca:	00 97       	sbiw	r24, 0x00	; 0
    2bcc:	69 f7       	brne	.-38     	; 0x2ba8 <LCD_sendCommand+0x7a0>
    2bce:	14 c0       	rjmp	.+40     	; 0x2bf8 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd0:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd2:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd4:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd6:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	9c 8b       	std	Y+20, r25	; 0x14
    2be2:	8b 8b       	std	Y+19, r24	; 0x13
    2be4:	8b 89       	ldd	r24, Y+19	; 0x13
    2be6:	9c 89       	ldd	r25, Y+20	; 0x14
    2be8:	98 8b       	std	Y+16, r25	; 0x10
    2bea:	8f 87       	std	Y+15, r24	; 0x0f
    2bec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bee:	98 89       	ldd	r25, Y+16	; 0x10
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <LCD_sendCommand+0x7e8>
    2bf4:	98 8b       	std	Y+16, r25	; 0x10
    2bf6:	8f 87       	std	Y+15, r24	; 0x0f
	}
#endif

	/* Shared Part must be added at the END */
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW); /* De-activating the LCD */
    2bf8:	82 e0       	ldi	r24, 0x02	; 2
    2bfa:	62 e0       	ldi	r22, 0x02	; 2
    2bfc:	40 e0       	ldi	r20, 0x00	; 0
    2bfe:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	a0 e8       	ldi	r26, 0x80	; 128
    2c08:	bf e3       	ldi	r27, 0x3F	; 63
    2c0a:	8b 87       	std	Y+11, r24	; 0x0b
    2c0c:	9c 87       	std	Y+12, r25	; 0x0c
    2c0e:	ad 87       	std	Y+13, r26	; 0x0d
    2c10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	4a ef       	ldi	r20, 0xFA	; 250
    2c20:	54 e4       	ldi	r21, 0x44	; 68
    2c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	8f 83       	std	Y+7, r24	; 0x07
    2c2c:	98 87       	std	Y+8, r25	; 0x08
    2c2e:	a9 87       	std	Y+9, r26	; 0x09
    2c30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c32:	6f 81       	ldd	r22, Y+7	; 0x07
    2c34:	78 85       	ldd	r23, Y+8	; 0x08
    2c36:	89 85       	ldd	r24, Y+9	; 0x09
    2c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e8       	ldi	r20, 0x80	; 128
    2c40:	5f e3       	ldi	r21, 0x3F	; 63
    2c42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c46:	88 23       	and	r24, r24
    2c48:	2c f4       	brge	.+10     	; 0x2c54 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	9e 83       	std	Y+6, r25	; 0x06
    2c50:	8d 83       	std	Y+5, r24	; 0x05
    2c52:	3f c0       	rjmp	.+126    	; 0x2cd2 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2c54:	6f 81       	ldd	r22, Y+7	; 0x07
    2c56:	78 85       	ldd	r23, Y+8	; 0x08
    2c58:	89 85       	ldd	r24, Y+9	; 0x09
    2c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	3f ef       	ldi	r19, 0xFF	; 255
    2c60:	4f e7       	ldi	r20, 0x7F	; 127
    2c62:	57 e4       	ldi	r21, 0x47	; 71
    2c64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c68:	18 16       	cp	r1, r24
    2c6a:	4c f5       	brge	.+82     	; 0x2cbe <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e2       	ldi	r20, 0x20	; 32
    2c7a:	51 e4       	ldi	r21, 0x41	; 65
    2c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	9e 83       	std	Y+6, r25	; 0x06
    2c92:	8d 83       	std	Y+5, r24	; 0x05
    2c94:	0f c0       	rjmp	.+30     	; 0x2cb4 <LCD_sendCommand+0x8ac>
    2c96:	88 ec       	ldi	r24, 0xC8	; 200
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	9c 83       	std	Y+4, r25	; 0x04
    2c9c:	8b 83       	std	Y+3, r24	; 0x03
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <LCD_sendCommand+0x89a>
    2ca6:	9c 83       	std	Y+4, r25	; 0x04
    2ca8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2caa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cac:	9e 81       	ldd	r25, Y+6	; 0x06
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	9e 83       	std	Y+6, r25	; 0x06
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	69 f7       	brne	.-38     	; 0x2c96 <LCD_sendCommand+0x88e>
    2cbc:	14 c0       	rjmp	.+40     	; 0x2ce6 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc0:	78 85       	ldd	r23, Y+8	; 0x08
    2cc2:	89 85       	ldd	r24, Y+9	; 0x09
    2cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	9e 83       	std	Y+6, r25	; 0x06
    2cd0:	8d 83       	std	Y+5, r24	; 0x05
    2cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd6:	9a 83       	std	Y+2, r25	; 0x02
    2cd8:	89 83       	std	Y+1, r24	; 0x01
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	f1 f7       	brne	.-4      	; 0x2cde <LCD_sendCommand+0x8d6>
    2ce2:	9a 83       	std	Y+2, r25	; 0x02
    2ce4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2ce6:	cd 59       	subi	r28, 0x9D	; 157
    2ce8:	df 4f       	sbci	r29, 0xFF	; 255
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	1f 91       	pop	r17
    2cfa:	0f 91       	pop	r16
    2cfc:	08 95       	ret

00002cfe <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2cfe:	0f 93       	push	r16
    2d00:	1f 93       	push	r17
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	c3 56       	subi	r28, 0x63	; 99
    2d0c:	d0 40       	sbci	r29, 0x00	; 0
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	fe 01       	movw	r30, r28
    2d1a:	ed 59       	subi	r30, 0x9D	; 157
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH); /* Activating the Data Register */
    2d20:	82 e0       	ldi	r24, 0x02	; 2
    2d22:	63 e0       	ldi	r22, 0x03	; 3
    2d24:	41 e0       	ldi	r20, 0x01	; 1
    2d26:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e1 5a       	subi	r30, 0xA1	; 161
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	a0 e8       	ldi	r26, 0x80	; 128
    2d36:	bf e3       	ldi	r27, 0x3F	; 63
    2d38:	80 83       	st	Z, r24
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	a2 83       	std	Z+2, r26	; 0x02
    2d3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d40:	8e 01       	movw	r16, r28
    2d42:	05 5a       	subi	r16, 0xA5	; 165
    2d44:	1f 4f       	sbci	r17, 0xFF	; 255
    2d46:	fe 01       	movw	r30, r28
    2d48:	e1 5a       	subi	r30, 0xA1	; 161
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	60 81       	ld	r22, Z
    2d4e:	71 81       	ldd	r23, Z+1	; 0x01
    2d50:	82 81       	ldd	r24, Z+2	; 0x02
    2d52:	93 81       	ldd	r25, Z+3	; 0x03
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	4a ef       	ldi	r20, 0xFA	; 250
    2d5a:	54 e4       	ldi	r21, 0x44	; 68
    2d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	f8 01       	movw	r30, r16
    2d66:	80 83       	st	Z, r24
    2d68:	91 83       	std	Z+1, r25	; 0x01
    2d6a:	a2 83       	std	Z+2, r26	; 0x02
    2d6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d6e:	fe 01       	movw	r30, r28
    2d70:	e5 5a       	subi	r30, 0xA5	; 165
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	60 81       	ld	r22, Z
    2d76:	71 81       	ldd	r23, Z+1	; 0x01
    2d78:	82 81       	ldd	r24, Z+2	; 0x02
    2d7a:	93 81       	ldd	r25, Z+3	; 0x03
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e8       	ldi	r20, 0x80	; 128
    2d82:	5f e3       	ldi	r21, 0x3F	; 63
    2d84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d88:	88 23       	and	r24, r24
    2d8a:	44 f4       	brge	.+16     	; 0x2d9c <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e7 5a       	subi	r30, 0xA7	; 167
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	91 83       	std	Z+1, r25	; 0x01
    2d98:	80 83       	st	Z, r24
    2d9a:	64 c0       	rjmp	.+200    	; 0x2e64 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e5 5a       	subi	r30, 0xA5	; 165
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	60 81       	ld	r22, Z
    2da4:	71 81       	ldd	r23, Z+1	; 0x01
    2da6:	82 81       	ldd	r24, Z+2	; 0x02
    2da8:	93 81       	ldd	r25, Z+3	; 0x03
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	3f ef       	ldi	r19, 0xFF	; 255
    2dae:	4f e7       	ldi	r20, 0x7F	; 127
    2db0:	57 e4       	ldi	r21, 0x47	; 71
    2db2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2db6:	18 16       	cp	r1, r24
    2db8:	0c f0       	brlt	.+2      	; 0x2dbc <LCD_displayCharacter+0xbe>
    2dba:	43 c0       	rjmp	.+134    	; 0x2e42 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e1 5a       	subi	r30, 0xA1	; 161
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	60 81       	ld	r22, Z
    2dc4:	71 81       	ldd	r23, Z+1	; 0x01
    2dc6:	82 81       	ldd	r24, Z+2	; 0x02
    2dc8:	93 81       	ldd	r25, Z+3	; 0x03
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e2       	ldi	r20, 0x20	; 32
    2dd0:	51 e4       	ldi	r21, 0x41	; 65
    2dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	8e 01       	movw	r16, r28
    2ddc:	07 5a       	subi	r16, 0xA7	; 167
    2dde:	1f 4f       	sbci	r17, 0xFF	; 255
    2de0:	bc 01       	movw	r22, r24
    2de2:	cd 01       	movw	r24, r26
    2de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	f8 01       	movw	r30, r16
    2dee:	91 83       	std	Z+1, r25	; 0x01
    2df0:	80 83       	st	Z, r24
    2df2:	1f c0       	rjmp	.+62     	; 0x2e32 <LCD_displayCharacter+0x134>
    2df4:	fe 01       	movw	r30, r28
    2df6:	e9 5a       	subi	r30, 0xA9	; 169
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	88 ec       	ldi	r24, 0xC8	; 200
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	91 83       	std	Z+1, r25	; 0x01
    2e00:	80 83       	st	Z, r24
    2e02:	fe 01       	movw	r30, r28
    2e04:	e9 5a       	subi	r30, 0xA9	; 169
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	80 81       	ld	r24, Z
    2e0a:	91 81       	ldd	r25, Z+1	; 0x01
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <LCD_displayCharacter+0x10e>
    2e10:	fe 01       	movw	r30, r28
    2e12:	e9 5a       	subi	r30, 0xA9	; 169
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	91 83       	std	Z+1, r25	; 0x01
    2e18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1a:	de 01       	movw	r26, r28
    2e1c:	a7 5a       	subi	r26, 0xA7	; 167
    2e1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e20:	fe 01       	movw	r30, r28
    2e22:	e7 5a       	subi	r30, 0xA7	; 167
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	80 81       	ld	r24, Z
    2e28:	91 81       	ldd	r25, Z+1	; 0x01
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	11 96       	adiw	r26, 0x01	; 1
    2e2e:	9c 93       	st	X, r25
    2e30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e32:	fe 01       	movw	r30, r28
    2e34:	e7 5a       	subi	r30, 0xA7	; 167
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	80 81       	ld	r24, Z
    2e3a:	91 81       	ldd	r25, Z+1	; 0x01
    2e3c:	00 97       	sbiw	r24, 0x00	; 0
    2e3e:	d1 f6       	brne	.-76     	; 0x2df4 <LCD_displayCharacter+0xf6>
    2e40:	27 c0       	rjmp	.+78     	; 0x2e90 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e42:	8e 01       	movw	r16, r28
    2e44:	07 5a       	subi	r16, 0xA7	; 167
    2e46:	1f 4f       	sbci	r17, 0xFF	; 255
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e5 5a       	subi	r30, 0xA5	; 165
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	60 81       	ld	r22, Z
    2e50:	71 81       	ldd	r23, Z+1	; 0x01
    2e52:	82 81       	ldd	r24, Z+2	; 0x02
    2e54:	93 81       	ldd	r25, Z+3	; 0x03
    2e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	f8 01       	movw	r30, r16
    2e60:	91 83       	std	Z+1, r25	; 0x01
    2e62:	80 83       	st	Z, r24
    2e64:	de 01       	movw	r26, r28
    2e66:	ab 5a       	subi	r26, 0xAB	; 171
    2e68:	bf 4f       	sbci	r27, 0xFF	; 255
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	e7 5a       	subi	r30, 0xA7	; 167
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	80 81       	ld	r24, Z
    2e72:	91 81       	ldd	r25, Z+1	; 0x01
    2e74:	8d 93       	st	X+, r24
    2e76:	9c 93       	st	X, r25
    2e78:	fe 01       	movw	r30, r28
    2e7a:	eb 5a       	subi	r30, 0xAB	; 171
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	80 81       	ld	r24, Z
    2e80:	91 81       	ldd	r25, Z+1	; 0x01
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	f1 f7       	brne	.-4      	; 0x2e82 <LCD_displayCharacter+0x184>
    2e86:	fe 01       	movw	r30, r28
    2e88:	eb 5a       	subi	r30, 0xAB	; 171
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	91 83       	std	Z+1, r25	; 0x01
    2e8e:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH); /* Activating the LCD */
    2e90:	82 e0       	ldi	r24, 0x02	; 2
    2e92:	62 e0       	ldi	r22, 0x02	; 2
    2e94:	41 e0       	ldi	r20, 0x01	; 1
    2e96:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	ef 5a       	subi	r30, 0xAF	; 175
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	a0 e8       	ldi	r26, 0x80	; 128
    2ea6:	bf e3       	ldi	r27, 0x3F	; 63
    2ea8:	80 83       	st	Z, r24
    2eaa:	91 83       	std	Z+1, r25	; 0x01
    2eac:	a2 83       	std	Z+2, r26	; 0x02
    2eae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb0:	8e 01       	movw	r16, r28
    2eb2:	03 5b       	subi	r16, 0xB3	; 179
    2eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	ef 5a       	subi	r30, 0xAF	; 175
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	60 81       	ld	r22, Z
    2ebe:	71 81       	ldd	r23, Z+1	; 0x01
    2ec0:	82 81       	ldd	r24, Z+2	; 0x02
    2ec2:	93 81       	ldd	r25, Z+3	; 0x03
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	4a ef       	ldi	r20, 0xFA	; 250
    2eca:	54 e4       	ldi	r21, 0x44	; 68
    2ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	f8 01       	movw	r30, r16
    2ed6:	80 83       	st	Z, r24
    2ed8:	91 83       	std	Z+1, r25	; 0x01
    2eda:	a2 83       	std	Z+2, r26	; 0x02
    2edc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ede:	fe 01       	movw	r30, r28
    2ee0:	e3 5b       	subi	r30, 0xB3	; 179
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	60 81       	ld	r22, Z
    2ee6:	71 81       	ldd	r23, Z+1	; 0x01
    2ee8:	82 81       	ldd	r24, Z+2	; 0x02
    2eea:	93 81       	ldd	r25, Z+3	; 0x03
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e8       	ldi	r20, 0x80	; 128
    2ef2:	5f e3       	ldi	r21, 0x3F	; 63
    2ef4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ef8:	88 23       	and	r24, r24
    2efa:	44 f4       	brge	.+16     	; 0x2f0c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2efc:	fe 01       	movw	r30, r28
    2efe:	e5 5b       	subi	r30, 0xB5	; 181
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	91 83       	std	Z+1, r25	; 0x01
    2f08:	80 83       	st	Z, r24
    2f0a:	64 c0       	rjmp	.+200    	; 0x2fd4 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	e3 5b       	subi	r30, 0xB3	; 179
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	60 81       	ld	r22, Z
    2f14:	71 81       	ldd	r23, Z+1	; 0x01
    2f16:	82 81       	ldd	r24, Z+2	; 0x02
    2f18:	93 81       	ldd	r25, Z+3	; 0x03
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	3f ef       	ldi	r19, 0xFF	; 255
    2f1e:	4f e7       	ldi	r20, 0x7F	; 127
    2f20:	57 e4       	ldi	r21, 0x47	; 71
    2f22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f26:	18 16       	cp	r1, r24
    2f28:	0c f0       	brlt	.+2      	; 0x2f2c <LCD_displayCharacter+0x22e>
    2f2a:	43 c0       	rjmp	.+134    	; 0x2fb2 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	ef 5a       	subi	r30, 0xAF	; 175
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	60 81       	ld	r22, Z
    2f34:	71 81       	ldd	r23, Z+1	; 0x01
    2f36:	82 81       	ldd	r24, Z+2	; 0x02
    2f38:	93 81       	ldd	r25, Z+3	; 0x03
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	40 e2       	ldi	r20, 0x20	; 32
    2f40:	51 e4       	ldi	r21, 0x41	; 65
    2f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	8e 01       	movw	r16, r28
    2f4c:	05 5b       	subi	r16, 0xB5	; 181
    2f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f50:	bc 01       	movw	r22, r24
    2f52:	cd 01       	movw	r24, r26
    2f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	f8 01       	movw	r30, r16
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	80 83       	st	Z, r24
    2f62:	1f c0       	rjmp	.+62     	; 0x2fa2 <LCD_displayCharacter+0x2a4>
    2f64:	fe 01       	movw	r30, r28
    2f66:	e7 5b       	subi	r30, 0xB7	; 183
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	88 ec       	ldi	r24, 0xC8	; 200
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	80 83       	st	Z, r24
    2f72:	fe 01       	movw	r30, r28
    2f74:	e7 5b       	subi	r30, 0xB7	; 183
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	80 81       	ld	r24, Z
    2f7a:	91 81       	ldd	r25, Z+1	; 0x01
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <LCD_displayCharacter+0x27e>
    2f80:	fe 01       	movw	r30, r28
    2f82:	e7 5b       	subi	r30, 0xB7	; 183
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	91 83       	std	Z+1, r25	; 0x01
    2f88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8a:	de 01       	movw	r26, r28
    2f8c:	a5 5b       	subi	r26, 0xB5	; 181
    2f8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f90:	fe 01       	movw	r30, r28
    2f92:	e5 5b       	subi	r30, 0xB5	; 181
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	80 81       	ld	r24, Z
    2f98:	91 81       	ldd	r25, Z+1	; 0x01
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	11 96       	adiw	r26, 0x01	; 1
    2f9e:	9c 93       	st	X, r25
    2fa0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e5 5b       	subi	r30, 0xB5	; 181
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	80 81       	ld	r24, Z
    2faa:	91 81       	ldd	r25, Z+1	; 0x01
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	d1 f6       	brne	.-76     	; 0x2f64 <LCD_displayCharacter+0x266>
    2fb0:	27 c0       	rjmp	.+78     	; 0x3000 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb2:	8e 01       	movw	r16, r28
    2fb4:	05 5b       	subi	r16, 0xB5	; 181
    2fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb8:	fe 01       	movw	r30, r28
    2fba:	e3 5b       	subi	r30, 0xB3	; 179
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	60 81       	ld	r22, Z
    2fc0:	71 81       	ldd	r23, Z+1	; 0x01
    2fc2:	82 81       	ldd	r24, Z+2	; 0x02
    2fc4:	93 81       	ldd	r25, Z+3	; 0x03
    2fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	f8 01       	movw	r30, r16
    2fd0:	91 83       	std	Z+1, r25	; 0x01
    2fd2:	80 83       	st	Z, r24
    2fd4:	de 01       	movw	r26, r28
    2fd6:	a9 5b       	subi	r26, 0xB9	; 185
    2fd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e5 5b       	subi	r30, 0xB5	; 181
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	80 81       	ld	r24, Z
    2fe2:	91 81       	ldd	r25, Z+1	; 0x01
    2fe4:	8d 93       	st	X+, r24
    2fe6:	9c 93       	st	X, r25
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e9 5b       	subi	r30, 0xB9	; 185
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <LCD_displayCharacter+0x2f4>
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e9 5b       	subi	r30, 0xB9	; 185
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	80 83       	st	Z, r24
		_delay_ms(1);
	}
#else
	{
		/* Sending the LAST four BITS */
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D4_PIN , GET_BIT(data,4));
    3000:	fe 01       	movw	r30, r28
    3002:	ed 59       	subi	r30, 0x9D	; 157
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	80 81       	ld	r24, Z
    3008:	88 2f       	mov	r24, r24
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	80 71       	andi	r24, 0x10	; 16
    300e:	90 70       	andi	r25, 0x00	; 0
    3010:	95 95       	asr	r25
    3012:	87 95       	ror	r24
    3014:	95 95       	asr	r25
    3016:	87 95       	ror	r24
    3018:	95 95       	asr	r25
    301a:	87 95       	ror	r24
    301c:	95 95       	asr	r25
    301e:	87 95       	ror	r24
    3020:	98 2f       	mov	r25, r24
    3022:	82 e0       	ldi	r24, 0x02	; 2
    3024:	64 e0       	ldi	r22, 0x04	; 4
    3026:	49 2f       	mov	r20, r25
    3028:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D5_PIN , GET_BIT(data,5));
    302c:	fe 01       	movw	r30, r28
    302e:	ed 59       	subi	r30, 0x9D	; 157
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	80 81       	ld	r24, Z
    3034:	88 2f       	mov	r24, r24
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	80 72       	andi	r24, 0x20	; 32
    303a:	90 70       	andi	r25, 0x00	; 0
    303c:	95 95       	asr	r25
    303e:	87 95       	ror	r24
    3040:	95 95       	asr	r25
    3042:	87 95       	ror	r24
    3044:	95 95       	asr	r25
    3046:	87 95       	ror	r24
    3048:	95 95       	asr	r25
    304a:	87 95       	ror	r24
    304c:	95 95       	asr	r25
    304e:	87 95       	ror	r24
    3050:	98 2f       	mov	r25, r24
    3052:	82 e0       	ldi	r24, 0x02	; 2
    3054:	65 e0       	ldi	r22, 0x05	; 5
    3056:	49 2f       	mov	r20, r25
    3058:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D6_PIN , GET_BIT(data,6));
    305c:	fe 01       	movw	r30, r28
    305e:	ed 59       	subi	r30, 0x9D	; 157
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	80 81       	ld	r24, Z
    3064:	88 2f       	mov	r24, r24
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	80 74       	andi	r24, 0x40	; 64
    306a:	90 70       	andi	r25, 0x00	; 0
    306c:	08 2e       	mov	r0, r24
    306e:	89 2f       	mov	r24, r25
    3070:	00 0c       	add	r0, r0
    3072:	88 1f       	adc	r24, r24
    3074:	99 0b       	sbc	r25, r25
    3076:	00 0c       	add	r0, r0
    3078:	88 1f       	adc	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	98 2f       	mov	r25, r24
    307e:	82 e0       	ldi	r24, 0x02	; 2
    3080:	66 e0       	ldi	r22, 0x06	; 6
    3082:	49 2f       	mov	r20, r25
    3084:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D7_PIN , GET_BIT(data,7));
    3088:	fe 01       	movw	r30, r28
    308a:	ed 59       	subi	r30, 0x9D	; 157
    308c:	ff 4f       	sbci	r31, 0xFF	; 255
    308e:	80 81       	ld	r24, Z
    3090:	98 2f       	mov	r25, r24
    3092:	99 1f       	adc	r25, r25
    3094:	99 27       	eor	r25, r25
    3096:	99 1f       	adc	r25, r25
    3098:	82 e0       	ldi	r24, 0x02	; 2
    309a:	67 e0       	ldi	r22, 0x07	; 7
    309c:	49 2f       	mov	r20, r25
    309e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    30a2:	fe 01       	movw	r30, r28
    30a4:	ed 5b       	subi	r30, 0xBD	; 189
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	a0 e8       	ldi	r26, 0x80	; 128
    30ae:	bf e3       	ldi	r27, 0x3F	; 63
    30b0:	80 83       	st	Z, r24
    30b2:	91 83       	std	Z+1, r25	; 0x01
    30b4:	a2 83       	std	Z+2, r26	; 0x02
    30b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b8:	8e 01       	movw	r16, r28
    30ba:	01 5c       	subi	r16, 0xC1	; 193
    30bc:	1f 4f       	sbci	r17, 0xFF	; 255
    30be:	fe 01       	movw	r30, r28
    30c0:	ed 5b       	subi	r30, 0xBD	; 189
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	4a ef       	ldi	r20, 0xFA	; 250
    30d2:	54 e4       	ldi	r21, 0x44	; 68
    30d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	f8 01       	movw	r30, r16
    30de:	80 83       	st	Z, r24
    30e0:	91 83       	std	Z+1, r25	; 0x01
    30e2:	a2 83       	std	Z+2, r26	; 0x02
    30e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30e6:	fe 01       	movw	r30, r28
    30e8:	ff 96       	adiw	r30, 0x3f	; 63
    30ea:	60 81       	ld	r22, Z
    30ec:	71 81       	ldd	r23, Z+1	; 0x01
    30ee:	82 81       	ldd	r24, Z+2	; 0x02
    30f0:	93 81       	ldd	r25, Z+3	; 0x03
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	40 e8       	ldi	r20, 0x80	; 128
    30f8:	5f e3       	ldi	r21, 0x3F	; 63
    30fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30fe:	88 23       	and	r24, r24
    3100:	2c f4       	brge	.+10     	; 0x310c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	9e af       	std	Y+62, r25	; 0x3e
    3108:	8d af       	std	Y+61, r24	; 0x3d
    310a:	46 c0       	rjmp	.+140    	; 0x3198 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    310c:	fe 01       	movw	r30, r28
    310e:	ff 96       	adiw	r30, 0x3f	; 63
    3110:	60 81       	ld	r22, Z
    3112:	71 81       	ldd	r23, Z+1	; 0x01
    3114:	82 81       	ldd	r24, Z+2	; 0x02
    3116:	93 81       	ldd	r25, Z+3	; 0x03
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	3f ef       	ldi	r19, 0xFF	; 255
    311c:	4f e7       	ldi	r20, 0x7F	; 127
    311e:	57 e4       	ldi	r21, 0x47	; 71
    3120:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3124:	18 16       	cp	r1, r24
    3126:	64 f5       	brge	.+88     	; 0x3180 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3128:	fe 01       	movw	r30, r28
    312a:	ed 5b       	subi	r30, 0xBD	; 189
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	60 81       	ld	r22, Z
    3130:	71 81       	ldd	r23, Z+1	; 0x01
    3132:	82 81       	ldd	r24, Z+2	; 0x02
    3134:	93 81       	ldd	r25, Z+3	; 0x03
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e2       	ldi	r20, 0x20	; 32
    313c:	51 e4       	ldi	r21, 0x41	; 65
    313e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	bc 01       	movw	r22, r24
    3148:	cd 01       	movw	r24, r26
    314a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	9e af       	std	Y+62, r25	; 0x3e
    3154:	8d af       	std	Y+61, r24	; 0x3d
    3156:	0f c0       	rjmp	.+30     	; 0x3176 <LCD_displayCharacter+0x478>
    3158:	88 ec       	ldi	r24, 0xC8	; 200
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	9c af       	std	Y+60, r25	; 0x3c
    315e:	8b af       	std	Y+59, r24	; 0x3b
    3160:	8b ad       	ldd	r24, Y+59	; 0x3b
    3162:	9c ad       	ldd	r25, Y+60	; 0x3c
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <LCD_displayCharacter+0x466>
    3168:	9c af       	std	Y+60, r25	; 0x3c
    316a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316c:	8d ad       	ldd	r24, Y+61	; 0x3d
    316e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	9e af       	std	Y+62, r25	; 0x3e
    3174:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3176:	8d ad       	ldd	r24, Y+61	; 0x3d
    3178:	9e ad       	ldd	r25, Y+62	; 0x3e
    317a:	00 97       	sbiw	r24, 0x00	; 0
    317c:	69 f7       	brne	.-38     	; 0x3158 <LCD_displayCharacter+0x45a>
    317e:	16 c0       	rjmp	.+44     	; 0x31ac <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3180:	fe 01       	movw	r30, r28
    3182:	ff 96       	adiw	r30, 0x3f	; 63
    3184:	60 81       	ld	r22, Z
    3186:	71 81       	ldd	r23, Z+1	; 0x01
    3188:	82 81       	ldd	r24, Z+2	; 0x02
    318a:	93 81       	ldd	r25, Z+3	; 0x03
    318c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	9e af       	std	Y+62, r25	; 0x3e
    3196:	8d af       	std	Y+61, r24	; 0x3d
    3198:	8d ad       	ldd	r24, Y+61	; 0x3d
    319a:	9e ad       	ldd	r25, Y+62	; 0x3e
    319c:	9a af       	std	Y+58, r25	; 0x3a
    319e:	89 af       	std	Y+57, r24	; 0x39
    31a0:	89 ad       	ldd	r24, Y+57	; 0x39
    31a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    31a4:	01 97       	sbiw	r24, 0x01	; 1
    31a6:	f1 f7       	brne	.-4      	; 0x31a4 <LCD_displayCharacter+0x4a6>
    31a8:	9a af       	std	Y+58, r25	; 0x3a
    31aa:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW); /* De-activating the LCD */
    31ac:	82 e0       	ldi	r24, 0x02	; 2
    31ae:	62 e0       	ldi	r22, 0x02	; 2
    31b0:	40 e0       	ldi	r20, 0x00	; 0
    31b2:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	a0 e8       	ldi	r26, 0x80	; 128
    31bc:	bf e3       	ldi	r27, 0x3F	; 63
    31be:	8d ab       	std	Y+53, r24	; 0x35
    31c0:	9e ab       	std	Y+54, r25	; 0x36
    31c2:	af ab       	std	Y+55, r26	; 0x37
    31c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c6:	6d a9       	ldd	r22, Y+53	; 0x35
    31c8:	7e a9       	ldd	r23, Y+54	; 0x36
    31ca:	8f a9       	ldd	r24, Y+55	; 0x37
    31cc:	98 ad       	ldd	r25, Y+56	; 0x38
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	4a ef       	ldi	r20, 0xFA	; 250
    31d4:	54 e4       	ldi	r21, 0x44	; 68
    31d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	89 ab       	std	Y+49, r24	; 0x31
    31e0:	9a ab       	std	Y+50, r25	; 0x32
    31e2:	ab ab       	std	Y+51, r26	; 0x33
    31e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31e6:	69 a9       	ldd	r22, Y+49	; 0x31
    31e8:	7a a9       	ldd	r23, Y+50	; 0x32
    31ea:	8b a9       	ldd	r24, Y+51	; 0x33
    31ec:	9c a9       	ldd	r25, Y+52	; 0x34
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	40 e8       	ldi	r20, 0x80	; 128
    31f4:	5f e3       	ldi	r21, 0x3F	; 63
    31f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31fa:	88 23       	and	r24, r24
    31fc:	2c f4       	brge	.+10     	; 0x3208 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	98 ab       	std	Y+48, r25	; 0x30
    3204:	8f a7       	std	Y+47, r24	; 0x2f
    3206:	3f c0       	rjmp	.+126    	; 0x3286 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    3208:	69 a9       	ldd	r22, Y+49	; 0x31
    320a:	7a a9       	ldd	r23, Y+50	; 0x32
    320c:	8b a9       	ldd	r24, Y+51	; 0x33
    320e:	9c a9       	ldd	r25, Y+52	; 0x34
    3210:	20 e0       	ldi	r18, 0x00	; 0
    3212:	3f ef       	ldi	r19, 0xFF	; 255
    3214:	4f e7       	ldi	r20, 0x7F	; 127
    3216:	57 e4       	ldi	r21, 0x47	; 71
    3218:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    321c:	18 16       	cp	r1, r24
    321e:	4c f5       	brge	.+82     	; 0x3272 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3220:	6d a9       	ldd	r22, Y+53	; 0x35
    3222:	7e a9       	ldd	r23, Y+54	; 0x36
    3224:	8f a9       	ldd	r24, Y+55	; 0x37
    3226:	98 ad       	ldd	r25, Y+56	; 0x38
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	40 e2       	ldi	r20, 0x20	; 32
    322e:	51 e4       	ldi	r21, 0x41	; 65
    3230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	bc 01       	movw	r22, r24
    323a:	cd 01       	movw	r24, r26
    323c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	98 ab       	std	Y+48, r25	; 0x30
    3246:	8f a7       	std	Y+47, r24	; 0x2f
    3248:	0f c0       	rjmp	.+30     	; 0x3268 <LCD_displayCharacter+0x56a>
    324a:	88 ec       	ldi	r24, 0xC8	; 200
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	9e a7       	std	Y+46, r25	; 0x2e
    3250:	8d a7       	std	Y+45, r24	; 0x2d
    3252:	8d a5       	ldd	r24, Y+45	; 0x2d
    3254:	9e a5       	ldd	r25, Y+46	; 0x2e
    3256:	01 97       	sbiw	r24, 0x01	; 1
    3258:	f1 f7       	brne	.-4      	; 0x3256 <LCD_displayCharacter+0x558>
    325a:	9e a7       	std	Y+46, r25	; 0x2e
    325c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3260:	98 a9       	ldd	r25, Y+48	; 0x30
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	98 ab       	std	Y+48, r25	; 0x30
    3266:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3268:	8f a5       	ldd	r24, Y+47	; 0x2f
    326a:	98 a9       	ldd	r25, Y+48	; 0x30
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	69 f7       	brne	.-38     	; 0x324a <LCD_displayCharacter+0x54c>
    3270:	14 c0       	rjmp	.+40     	; 0x329a <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3272:	69 a9       	ldd	r22, Y+49	; 0x31
    3274:	7a a9       	ldd	r23, Y+50	; 0x32
    3276:	8b a9       	ldd	r24, Y+51	; 0x33
    3278:	9c a9       	ldd	r25, Y+52	; 0x34
    327a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	98 ab       	std	Y+48, r25	; 0x30
    3284:	8f a7       	std	Y+47, r24	; 0x2f
    3286:	8f a5       	ldd	r24, Y+47	; 0x2f
    3288:	98 a9       	ldd	r25, Y+48	; 0x30
    328a:	9c a7       	std	Y+44, r25	; 0x2c
    328c:	8b a7       	std	Y+43, r24	; 0x2b
    328e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3290:	9c a5       	ldd	r25, Y+44	; 0x2c
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <LCD_displayCharacter+0x594>
    3296:	9c a7       	std	Y+44, r25	; 0x2c
    3298:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH); /* Enable LCD */
    329a:	82 e0       	ldi	r24, 0x02	; 2
    329c:	62 e0       	ldi	r22, 0x02	; 2
    329e:	41 e0       	ldi	r20, 0x01	; 1
    32a0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	a0 e8       	ldi	r26, 0x80	; 128
    32aa:	bf e3       	ldi	r27, 0x3F	; 63
    32ac:	8f a3       	std	Y+39, r24	; 0x27
    32ae:	98 a7       	std	Y+40, r25	; 0x28
    32b0:	a9 a7       	std	Y+41, r26	; 0x29
    32b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b4:	6f a1       	ldd	r22, Y+39	; 0x27
    32b6:	78 a5       	ldd	r23, Y+40	; 0x28
    32b8:	89 a5       	ldd	r24, Y+41	; 0x29
    32ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	4a ef       	ldi	r20, 0xFA	; 250
    32c2:	54 e4       	ldi	r21, 0x44	; 68
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	8b a3       	std	Y+35, r24	; 0x23
    32ce:	9c a3       	std	Y+36, r25	; 0x24
    32d0:	ad a3       	std	Y+37, r26	; 0x25
    32d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32d4:	6b a1       	ldd	r22, Y+35	; 0x23
    32d6:	7c a1       	ldd	r23, Y+36	; 0x24
    32d8:	8d a1       	ldd	r24, Y+37	; 0x25
    32da:	9e a1       	ldd	r25, Y+38	; 0x26
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e8       	ldi	r20, 0x80	; 128
    32e2:	5f e3       	ldi	r21, 0x3F	; 63
    32e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32e8:	88 23       	and	r24, r24
    32ea:	2c f4       	brge	.+10     	; 0x32f6 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	9a a3       	std	Y+34, r25	; 0x22
    32f2:	89 a3       	std	Y+33, r24	; 0x21
    32f4:	3f c0       	rjmp	.+126    	; 0x3374 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    32f6:	6b a1       	ldd	r22, Y+35	; 0x23
    32f8:	7c a1       	ldd	r23, Y+36	; 0x24
    32fa:	8d a1       	ldd	r24, Y+37	; 0x25
    32fc:	9e a1       	ldd	r25, Y+38	; 0x26
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	3f ef       	ldi	r19, 0xFF	; 255
    3302:	4f e7       	ldi	r20, 0x7F	; 127
    3304:	57 e4       	ldi	r21, 0x47	; 71
    3306:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    330a:	18 16       	cp	r1, r24
    330c:	4c f5       	brge	.+82     	; 0x3360 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330e:	6f a1       	ldd	r22, Y+39	; 0x27
    3310:	78 a5       	ldd	r23, Y+40	; 0x28
    3312:	89 a5       	ldd	r24, Y+41	; 0x29
    3314:	9a a5       	ldd	r25, Y+42	; 0x2a
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	40 e2       	ldi	r20, 0x20	; 32
    331c:	51 e4       	ldi	r21, 0x41	; 65
    331e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	bc 01       	movw	r22, r24
    3328:	cd 01       	movw	r24, r26
    332a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	9a a3       	std	Y+34, r25	; 0x22
    3334:	89 a3       	std	Y+33, r24	; 0x21
    3336:	0f c0       	rjmp	.+30     	; 0x3356 <LCD_displayCharacter+0x658>
    3338:	88 ec       	ldi	r24, 0xC8	; 200
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	98 a3       	std	Y+32, r25	; 0x20
    333e:	8f 8f       	std	Y+31, r24	; 0x1f
    3340:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3342:	98 a1       	ldd	r25, Y+32	; 0x20
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <LCD_displayCharacter+0x646>
    3348:	98 a3       	std	Y+32, r25	; 0x20
    334a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    334c:	89 a1       	ldd	r24, Y+33	; 0x21
    334e:	9a a1       	ldd	r25, Y+34	; 0x22
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	9a a3       	std	Y+34, r25	; 0x22
    3354:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3356:	89 a1       	ldd	r24, Y+33	; 0x21
    3358:	9a a1       	ldd	r25, Y+34	; 0x22
    335a:	00 97       	sbiw	r24, 0x00	; 0
    335c:	69 f7       	brne	.-38     	; 0x3338 <LCD_displayCharacter+0x63a>
    335e:	14 c0       	rjmp	.+40     	; 0x3388 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3360:	6b a1       	ldd	r22, Y+35	; 0x23
    3362:	7c a1       	ldd	r23, Y+36	; 0x24
    3364:	8d a1       	ldd	r24, Y+37	; 0x25
    3366:	9e a1       	ldd	r25, Y+38	; 0x26
    3368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	9a a3       	std	Y+34, r25	; 0x22
    3372:	89 a3       	std	Y+33, r24	; 0x21
    3374:	89 a1       	ldd	r24, Y+33	; 0x21
    3376:	9a a1       	ldd	r25, Y+34	; 0x22
    3378:	9e 8f       	std	Y+30, r25	; 0x1e
    337a:	8d 8f       	std	Y+29, r24	; 0x1d
    337c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    337e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <LCD_displayCharacter+0x682>
    3384:	9e 8f       	std	Y+30, r25	; 0x1e
    3386:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		/* Sending the FIRST four BITS */
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D4_PIN , GET_BIT(data,0));
    3388:	fe 01       	movw	r30, r28
    338a:	ed 59       	subi	r30, 0x9D	; 157
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	80 81       	ld	r24, Z
    3390:	98 2f       	mov	r25, r24
    3392:	91 70       	andi	r25, 0x01	; 1
    3394:	82 e0       	ldi	r24, 0x02	; 2
    3396:	64 e0       	ldi	r22, 0x04	; 4
    3398:	49 2f       	mov	r20, r25
    339a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D5_PIN , GET_BIT(data,1));
    339e:	fe 01       	movw	r30, r28
    33a0:	ed 59       	subi	r30, 0x9D	; 157
    33a2:	ff 4f       	sbci	r31, 0xFF	; 255
    33a4:	80 81       	ld	r24, Z
    33a6:	88 2f       	mov	r24, r24
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	82 70       	andi	r24, 0x02	; 2
    33ac:	90 70       	andi	r25, 0x00	; 0
    33ae:	95 95       	asr	r25
    33b0:	87 95       	ror	r24
    33b2:	98 2f       	mov	r25, r24
    33b4:	82 e0       	ldi	r24, 0x02	; 2
    33b6:	65 e0       	ldi	r22, 0x05	; 5
    33b8:	49 2f       	mov	r20, r25
    33ba:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D6_PIN , GET_BIT(data,2));
    33be:	fe 01       	movw	r30, r28
    33c0:	ed 59       	subi	r30, 0x9D	; 157
    33c2:	ff 4f       	sbci	r31, 0xFF	; 255
    33c4:	80 81       	ld	r24, Z
    33c6:	88 2f       	mov	r24, r24
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	84 70       	andi	r24, 0x04	; 4
    33cc:	90 70       	andi	r25, 0x00	; 0
    33ce:	95 95       	asr	r25
    33d0:	87 95       	ror	r24
    33d2:	95 95       	asr	r25
    33d4:	87 95       	ror	r24
    33d6:	98 2f       	mov	r25, r24
    33d8:	82 e0       	ldi	r24, 0x02	; 2
    33da:	66 e0       	ldi	r22, 0x06	; 6
    33dc:	49 2f       	mov	r20, r25
    33de:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D7_PIN , GET_BIT(data,3));
    33e2:	fe 01       	movw	r30, r28
    33e4:	ed 59       	subi	r30, 0x9D	; 157
    33e6:	ff 4f       	sbci	r31, 0xFF	; 255
    33e8:	80 81       	ld	r24, Z
    33ea:	88 2f       	mov	r24, r24
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	88 70       	andi	r24, 0x08	; 8
    33f0:	90 70       	andi	r25, 0x00	; 0
    33f2:	95 95       	asr	r25
    33f4:	87 95       	ror	r24
    33f6:	95 95       	asr	r25
    33f8:	87 95       	ror	r24
    33fa:	95 95       	asr	r25
    33fc:	87 95       	ror	r24
    33fe:	98 2f       	mov	r25, r24
    3400:	82 e0       	ldi	r24, 0x02	; 2
    3402:	67 e0       	ldi	r22, 0x07	; 7
    3404:	49 2f       	mov	r20, r25
    3406:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    340a:	80 e0       	ldi	r24, 0x00	; 0
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	a0 e8       	ldi	r26, 0x80	; 128
    3410:	bf e3       	ldi	r27, 0x3F	; 63
    3412:	89 8f       	std	Y+25, r24	; 0x19
    3414:	9a 8f       	std	Y+26, r25	; 0x1a
    3416:	ab 8f       	std	Y+27, r26	; 0x1b
    3418:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    341a:	69 8d       	ldd	r22, Y+25	; 0x19
    341c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    341e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3420:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	4a ef       	ldi	r20, 0xFA	; 250
    3428:	54 e4       	ldi	r21, 0x44	; 68
    342a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	8d 8b       	std	Y+21, r24	; 0x15
    3434:	9e 8b       	std	Y+22, r25	; 0x16
    3436:	af 8b       	std	Y+23, r26	; 0x17
    3438:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    343a:	6d 89       	ldd	r22, Y+21	; 0x15
    343c:	7e 89       	ldd	r23, Y+22	; 0x16
    343e:	8f 89       	ldd	r24, Y+23	; 0x17
    3440:	98 8d       	ldd	r25, Y+24	; 0x18
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	40 e8       	ldi	r20, 0x80	; 128
    3448:	5f e3       	ldi	r21, 0x3F	; 63
    344a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    344e:	88 23       	and	r24, r24
    3450:	2c f4       	brge	.+10     	; 0x345c <LCD_displayCharacter+0x75e>
		__ticks = 1;
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	9c 8b       	std	Y+20, r25	; 0x14
    3458:	8b 8b       	std	Y+19, r24	; 0x13
    345a:	3f c0       	rjmp	.+126    	; 0x34da <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    345c:	6d 89       	ldd	r22, Y+21	; 0x15
    345e:	7e 89       	ldd	r23, Y+22	; 0x16
    3460:	8f 89       	ldd	r24, Y+23	; 0x17
    3462:	98 8d       	ldd	r25, Y+24	; 0x18
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	3f ef       	ldi	r19, 0xFF	; 255
    3468:	4f e7       	ldi	r20, 0x7F	; 127
    346a:	57 e4       	ldi	r21, 0x47	; 71
    346c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3470:	18 16       	cp	r1, r24
    3472:	4c f5       	brge	.+82     	; 0x34c6 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3474:	69 8d       	ldd	r22, Y+25	; 0x19
    3476:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3478:	8b 8d       	ldd	r24, Y+27	; 0x1b
    347a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	40 e2       	ldi	r20, 0x20	; 32
    3482:	51 e4       	ldi	r21, 0x41	; 65
    3484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	bc 01       	movw	r22, r24
    348e:	cd 01       	movw	r24, r26
    3490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	9c 8b       	std	Y+20, r25	; 0x14
    349a:	8b 8b       	std	Y+19, r24	; 0x13
    349c:	0f c0       	rjmp	.+30     	; 0x34bc <LCD_displayCharacter+0x7be>
    349e:	88 ec       	ldi	r24, 0xC8	; 200
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	9a 8b       	std	Y+18, r25	; 0x12
    34a4:	89 8b       	std	Y+17, r24	; 0x11
    34a6:	89 89       	ldd	r24, Y+17	; 0x11
    34a8:	9a 89       	ldd	r25, Y+18	; 0x12
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	f1 f7       	brne	.-4      	; 0x34aa <LCD_displayCharacter+0x7ac>
    34ae:	9a 8b       	std	Y+18, r25	; 0x12
    34b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b2:	8b 89       	ldd	r24, Y+19	; 0x13
    34b4:	9c 89       	ldd	r25, Y+20	; 0x14
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	9c 8b       	std	Y+20, r25	; 0x14
    34ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34bc:	8b 89       	ldd	r24, Y+19	; 0x13
    34be:	9c 89       	ldd	r25, Y+20	; 0x14
    34c0:	00 97       	sbiw	r24, 0x00	; 0
    34c2:	69 f7       	brne	.-38     	; 0x349e <LCD_displayCharacter+0x7a0>
    34c4:	14 c0       	rjmp	.+40     	; 0x34ee <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c6:	6d 89       	ldd	r22, Y+21	; 0x15
    34c8:	7e 89       	ldd	r23, Y+22	; 0x16
    34ca:	8f 89       	ldd	r24, Y+23	; 0x17
    34cc:	98 8d       	ldd	r25, Y+24	; 0x18
    34ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	9c 8b       	std	Y+20, r25	; 0x14
    34d8:	8b 8b       	std	Y+19, r24	; 0x13
    34da:	8b 89       	ldd	r24, Y+19	; 0x13
    34dc:	9c 89       	ldd	r25, Y+20	; 0x14
    34de:	98 8b       	std	Y+16, r25	; 0x10
    34e0:	8f 87       	std	Y+15, r24	; 0x0f
    34e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e4:	98 89       	ldd	r25, Y+16	; 0x10
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	f1 f7       	brne	.-4      	; 0x34e6 <LCD_displayCharacter+0x7e8>
    34ea:	98 8b       	std	Y+16, r25	; 0x10
    34ec:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
	}
#endif

	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW); /* Activating the LCD */
    34ee:	82 e0       	ldi	r24, 0x02	; 2
    34f0:	62 e0       	ldi	r22, 0x02	; 2
    34f2:	40 e0       	ldi	r20, 0x00	; 0
    34f4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	a0 e8       	ldi	r26, 0x80	; 128
    34fe:	bf e3       	ldi	r27, 0x3F	; 63
    3500:	8b 87       	std	Y+11, r24	; 0x0b
    3502:	9c 87       	std	Y+12, r25	; 0x0c
    3504:	ad 87       	std	Y+13, r26	; 0x0d
    3506:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3508:	6b 85       	ldd	r22, Y+11	; 0x0b
    350a:	7c 85       	ldd	r23, Y+12	; 0x0c
    350c:	8d 85       	ldd	r24, Y+13	; 0x0d
    350e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	4a ef       	ldi	r20, 0xFA	; 250
    3516:	54 e4       	ldi	r21, 0x44	; 68
    3518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	8f 83       	std	Y+7, r24	; 0x07
    3522:	98 87       	std	Y+8, r25	; 0x08
    3524:	a9 87       	std	Y+9, r26	; 0x09
    3526:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3528:	6f 81       	ldd	r22, Y+7	; 0x07
    352a:	78 85       	ldd	r23, Y+8	; 0x08
    352c:	89 85       	ldd	r24, Y+9	; 0x09
    352e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 e8       	ldi	r20, 0x80	; 128
    3536:	5f e3       	ldi	r21, 0x3F	; 63
    3538:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    353c:	88 23       	and	r24, r24
    353e:	2c f4       	brge	.+10     	; 0x354a <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	9e 83       	std	Y+6, r25	; 0x06
    3546:	8d 83       	std	Y+5, r24	; 0x05
    3548:	3f c0       	rjmp	.+126    	; 0x35c8 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    354a:	6f 81       	ldd	r22, Y+7	; 0x07
    354c:	78 85       	ldd	r23, Y+8	; 0x08
    354e:	89 85       	ldd	r24, Y+9	; 0x09
    3550:	9a 85       	ldd	r25, Y+10	; 0x0a
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	3f ef       	ldi	r19, 0xFF	; 255
    3556:	4f e7       	ldi	r20, 0x7F	; 127
    3558:	57 e4       	ldi	r21, 0x47	; 71
    355a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    355e:	18 16       	cp	r1, r24
    3560:	4c f5       	brge	.+82     	; 0x35b4 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3562:	6b 85       	ldd	r22, Y+11	; 0x0b
    3564:	7c 85       	ldd	r23, Y+12	; 0x0c
    3566:	8d 85       	ldd	r24, Y+13	; 0x0d
    3568:	9e 85       	ldd	r25, Y+14	; 0x0e
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	40 e2       	ldi	r20, 0x20	; 32
    3570:	51 e4       	ldi	r21, 0x41	; 65
    3572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	bc 01       	movw	r22, r24
    357c:	cd 01       	movw	r24, r26
    357e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	9e 83       	std	Y+6, r25	; 0x06
    3588:	8d 83       	std	Y+5, r24	; 0x05
    358a:	0f c0       	rjmp	.+30     	; 0x35aa <LCD_displayCharacter+0x8ac>
    358c:	88 ec       	ldi	r24, 0xC8	; 200
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	9c 83       	std	Y+4, r25	; 0x04
    3592:	8b 83       	std	Y+3, r24	; 0x03
    3594:	8b 81       	ldd	r24, Y+3	; 0x03
    3596:	9c 81       	ldd	r25, Y+4	; 0x04
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	f1 f7       	brne	.-4      	; 0x3598 <LCD_displayCharacter+0x89a>
    359c:	9c 83       	std	Y+4, r25	; 0x04
    359e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a0:	8d 81       	ldd	r24, Y+5	; 0x05
    35a2:	9e 81       	ldd	r25, Y+6	; 0x06
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	9e 83       	std	Y+6, r25	; 0x06
    35a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35aa:	8d 81       	ldd	r24, Y+5	; 0x05
    35ac:	9e 81       	ldd	r25, Y+6	; 0x06
    35ae:	00 97       	sbiw	r24, 0x00	; 0
    35b0:	69 f7       	brne	.-38     	; 0x358c <LCD_displayCharacter+0x88e>
    35b2:	14 c0       	rjmp	.+40     	; 0x35dc <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b4:	6f 81       	ldd	r22, Y+7	; 0x07
    35b6:	78 85       	ldd	r23, Y+8	; 0x08
    35b8:	89 85       	ldd	r24, Y+9	; 0x09
    35ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    35bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	9e 83       	std	Y+6, r25	; 0x06
    35c6:	8d 83       	std	Y+5, r24	; 0x05
    35c8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ca:	9e 81       	ldd	r25, Y+6	; 0x06
    35cc:	9a 83       	std	Y+2, r25	; 0x02
    35ce:	89 83       	std	Y+1, r24	; 0x01
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	9a 81       	ldd	r25, Y+2	; 0x02
    35d4:	01 97       	sbiw	r24, 0x01	; 1
    35d6:	f1 f7       	brne	.-4      	; 0x35d4 <LCD_displayCharacter+0x8d6>
    35d8:	9a 83       	std	Y+2, r25	; 0x02
    35da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    35dc:	cd 59       	subi	r28, 0x9D	; 157
    35de:	df 4f       	sbci	r29, 0xFF	; 255
    35e0:	0f b6       	in	r0, 0x3f	; 63
    35e2:	f8 94       	cli
    35e4:	de bf       	out	0x3e, r29	; 62
    35e6:	0f be       	out	0x3f, r0	; 63
    35e8:	cd bf       	out	0x3d, r28	; 61
    35ea:	cf 91       	pop	r28
    35ec:	df 91       	pop	r29
    35ee:	1f 91       	pop	r17
    35f0:	0f 91       	pop	r16
    35f2:	08 95       	ret

000035f4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    35f4:	df 93       	push	r29
    35f6:	cf 93       	push	r28
    35f8:	00 d0       	rcall	.+0      	; 0x35fa <LCD_displayString+0x6>
    35fa:	0f 92       	push	r0
    35fc:	cd b7       	in	r28, 0x3d	; 61
    35fe:	de b7       	in	r29, 0x3e	; 62
    3600:	9b 83       	std	Y+3, r25	; 0x03
    3602:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_stringCounter = 0; /* Counting the array of chars */
    3604:	19 82       	std	Y+1, r1	; 0x01
    3606:	0e c0       	rjmp	.+28     	; 0x3624 <LCD_displayString+0x30>

	while(Str[a_stringCounter] != '\0')
	{
		LCD_displayCharacter(Str[a_stringCounter]);
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	28 2f       	mov	r18, r24
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	8a 81       	ldd	r24, Y+2	; 0x02
    3610:	9b 81       	ldd	r25, Y+3	; 0x03
    3612:	fc 01       	movw	r30, r24
    3614:	e2 0f       	add	r30, r18
    3616:	f3 1f       	adc	r31, r19
    3618:	80 81       	ld	r24, Z
    361a:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <LCD_displayCharacter>
		a_stringCounter++;
    361e:	89 81       	ldd	r24, Y+1	; 0x01
    3620:	8f 5f       	subi	r24, 0xFF	; 255
    3622:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const char *Str)
{
	uint8 a_stringCounter = 0; /* Counting the array of chars */

	while(Str[a_stringCounter] != '\0')
    3624:	89 81       	ldd	r24, Y+1	; 0x01
    3626:	28 2f       	mov	r18, r24
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	8a 81       	ldd	r24, Y+2	; 0x02
    362c:	9b 81       	ldd	r25, Y+3	; 0x03
    362e:	fc 01       	movw	r30, r24
    3630:	e2 0f       	add	r30, r18
    3632:	f3 1f       	adc	r31, r19
    3634:	80 81       	ld	r24, Z
    3636:	88 23       	and	r24, r24
    3638:	39 f7       	brne	.-50     	; 0x3608 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[a_stringCounter]);
		a_stringCounter++;
	}
}
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	cf 91       	pop	r28
    3642:	df 91       	pop	r29
    3644:	08 95       	ret

00003646 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3646:	df 93       	push	r29
    3648:	cf 93       	push	r28
    364a:	00 d0       	rcall	.+0      	; 0x364c <LCD_moveCursor+0x6>
    364c:	00 d0       	rcall	.+0      	; 0x364e <LCD_moveCursor+0x8>
    364e:	0f 92       	push	r0
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
    3654:	8a 83       	std	Y+2, r24	; 0x02
    3656:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3658:	8a 81       	ldd	r24, Y+2	; 0x02
    365a:	28 2f       	mov	r18, r24
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	3d 83       	std	Y+5, r19	; 0x05
    3660:	2c 83       	std	Y+4, r18	; 0x04
    3662:	8c 81       	ldd	r24, Y+4	; 0x04
    3664:	9d 81       	ldd	r25, Y+5	; 0x05
    3666:	81 30       	cpi	r24, 0x01	; 1
    3668:	91 05       	cpc	r25, r1
    366a:	c1 f0       	breq	.+48     	; 0x369c <LCD_moveCursor+0x56>
    366c:	2c 81       	ldd	r18, Y+4	; 0x04
    366e:	3d 81       	ldd	r19, Y+5	; 0x05
    3670:	22 30       	cpi	r18, 0x02	; 2
    3672:	31 05       	cpc	r19, r1
    3674:	2c f4       	brge	.+10     	; 0x3680 <LCD_moveCursor+0x3a>
    3676:	8c 81       	ldd	r24, Y+4	; 0x04
    3678:	9d 81       	ldd	r25, Y+5	; 0x05
    367a:	00 97       	sbiw	r24, 0x00	; 0
    367c:	61 f0       	breq	.+24     	; 0x3696 <LCD_moveCursor+0x50>
    367e:	19 c0       	rjmp	.+50     	; 0x36b2 <LCD_moveCursor+0x6c>
    3680:	2c 81       	ldd	r18, Y+4	; 0x04
    3682:	3d 81       	ldd	r19, Y+5	; 0x05
    3684:	22 30       	cpi	r18, 0x02	; 2
    3686:	31 05       	cpc	r19, r1
    3688:	69 f0       	breq	.+26     	; 0x36a4 <LCD_moveCursor+0x5e>
    368a:	8c 81       	ldd	r24, Y+4	; 0x04
    368c:	9d 81       	ldd	r25, Y+5	; 0x05
    368e:	83 30       	cpi	r24, 0x03	; 3
    3690:	91 05       	cpc	r25, r1
    3692:	61 f0       	breq	.+24     	; 0x36ac <LCD_moveCursor+0x66>
    3694:	0e c0       	rjmp	.+28     	; 0x36b2 <LCD_moveCursor+0x6c>
	{
	case 0:
		a_lcd_memory_address=col;
    3696:	8b 81       	ldd	r24, Y+3	; 0x03
    3698:	89 83       	std	Y+1, r24	; 0x01
    369a:	0b c0       	rjmp	.+22     	; 0x36b2 <LCD_moveCursor+0x6c>
		break;
	case 1:
		a_lcd_memory_address=col+0x40;
    369c:	8b 81       	ldd	r24, Y+3	; 0x03
    369e:	80 5c       	subi	r24, 0xC0	; 192
    36a0:	89 83       	std	Y+1, r24	; 0x01
    36a2:	07 c0       	rjmp	.+14     	; 0x36b2 <LCD_moveCursor+0x6c>
		break;
	case 2:
		a_lcd_memory_address=col+0x10;
    36a4:	8b 81       	ldd	r24, Y+3	; 0x03
    36a6:	80 5f       	subi	r24, 0xF0	; 240
    36a8:	89 83       	std	Y+1, r24	; 0x01
    36aa:	03 c0       	rjmp	.+6      	; 0x36b2 <LCD_moveCursor+0x6c>
		break;
	case 3:
		a_lcd_memory_address=col+0x50;
    36ac:	8b 81       	ldd	r24, Y+3	; 0x03
    36ae:	80 5b       	subi	r24, 0xB0	; 176
    36b0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(a_lcd_memory_address | START_AT_FIRST_LINE);
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	80 68       	ori	r24, 0x80	; 128
    36b6:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_sendCommand>
}
    36ba:	0f 90       	pop	r0
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	08 95       	ret

000036ca <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	00 d0       	rcall	.+0      	; 0x36d0 <LCD_displayStringRowColumn+0x6>
    36d0:	00 d0       	rcall	.+0      	; 0x36d2 <LCD_displayStringRowColumn+0x8>
    36d2:	cd b7       	in	r28, 0x3d	; 61
    36d4:	de b7       	in	r29, 0x3e	; 62
    36d6:	89 83       	std	Y+1, r24	; 0x01
    36d8:	6a 83       	std	Y+2, r22	; 0x02
    36da:	5c 83       	std	Y+4, r21	; 0x04
    36dc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	6a 81       	ldd	r22, Y+2	; 0x02
    36e2:	0e 94 23 1b 	call	0x3646	; 0x3646 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    36e6:	8b 81       	ldd	r24, Y+3	; 0x03
    36e8:	9c 81       	ldd	r25, Y+4	; 0x04
    36ea:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCD_displayString>
}
    36ee:	0f 90       	pop	r0
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	cf 91       	pop	r28
    36f8:	df 91       	pop	r29
    36fa:	08 95       	ret

000036fc <LCD_displayCharRowColumn>:
/*
 * Description :
 * Display the required Char in a specified row and column index on the screen
 */
void LCD_displayCharRowColumn(uint8 row,uint8 col,uint8 data)
{
    36fc:	df 93       	push	r29
    36fe:	cf 93       	push	r28
    3700:	00 d0       	rcall	.+0      	; 0x3702 <LCD_displayCharRowColumn+0x6>
    3702:	0f 92       	push	r0
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
    3708:	89 83       	std	Y+1, r24	; 0x01
    370a:	6a 83       	std	Y+2, r22	; 0x02
    370c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	6a 81       	ldd	r22, Y+2	; 0x02
    3712:	0e 94 23 1b 	call	0x3646	; 0x3646 <LCD_moveCursor>
	LCD_displayCharacter(data); /* display the string */
    3716:	8b 81       	ldd	r24, Y+3	; 0x03
    3718:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <LCD_displayCharacter>
}
    371c:	0f 90       	pop	r0
    371e:	0f 90       	pop	r0
    3720:	0f 90       	pop	r0
    3722:	cf 91       	pop	r28
    3724:	df 91       	pop	r29
    3726:	08 95       	ret

00003728 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
    3730:	62 97       	sbiw	r28, 0x12	; 18
    3732:	0f b6       	in	r0, 0x3f	; 63
    3734:	f8 94       	cli
    3736:	de bf       	out	0x3e, r29	; 62
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	cd bf       	out	0x3d, r28	; 61
    373c:	9a 8b       	std	Y+18, r25	; 0x12
    373e:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; 				/* String to hold the ascii result */
	itoa(data,buff,10); 		/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3740:	89 89       	ldd	r24, Y+17	; 0x11
    3742:	9a 89       	ldd	r25, Y+18	; 0x12
    3744:	9e 01       	movw	r18, r28
    3746:	2f 5f       	subi	r18, 0xFF	; 255
    3748:	3f 4f       	sbci	r19, 0xFF	; 255
    374a:	b9 01       	movw	r22, r18
    374c:	4a e0       	ldi	r20, 0x0A	; 10
    374e:	50 e0       	ldi	r21, 0x00	; 0
    3750:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <itoa>
	LCD_displayString(buff); 	/* Display the string */
    3754:	ce 01       	movw	r24, r28
    3756:	01 96       	adiw	r24, 0x01	; 1
    3758:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCD_displayString>
}
    375c:	62 96       	adiw	r28, 0x12	; 18
    375e:	0f b6       	in	r0, 0x3f	; 63
    3760:	f8 94       	cli
    3762:	de bf       	out	0x3e, r29	; 62
    3764:	0f be       	out	0x3f, r0	; 63
    3766:	cd bf       	out	0x3d, r28	; 61
    3768:	cf 91       	pop	r28
    376a:	df 91       	pop	r29
    376c:	08 95       	ret

0000376e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    376e:	df 93       	push	r29
    3770:	cf 93       	push	r28
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLR_DISPLAY);
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_sendCommand>
}
    377c:	cf 91       	pop	r28
    377e:	df 91       	pop	r29
    3780:	08 95       	ret

00003782 <ServoMotor_Rotate>:
/*
 * Description:
 * Initializing SERVO Motor
 */
void ServoMotor_Rotate(uint8 angle)
{
    3782:	df 93       	push	r29
    3784:	cf 93       	push	r28
    3786:	00 d0       	rcall	.+0      	; 0x3788 <ServoMotor_Rotate+0x6>
    3788:	0f 92       	push	r0
    378a:	cd b7       	in	r28, 0x3d	; 61
    378c:	de b7       	in	r29, 0x3e	; 62
    378e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 PWM_Duration = 0;
    3790:	1a 82       	std	Y+2, r1	; 0x02
    3792:	19 82       	std	Y+1, r1	; 0x01


	if(angle >= SERVO_MIN_ANGLE && angle <= SERVO_MAX_ANGLE)
    3794:	8b 81       	ldd	r24, Y+3	; 0x03
    3796:	8b 35       	cpi	r24, 0x5B	; 91
    3798:	a8 f4       	brcc	.+42     	; 0x37c4 <ServoMotor_Rotate+0x42>
	{
		if(angle == 90)
    379a:	8b 81       	ldd	r24, Y+3	; 0x03
    379c:	8a 35       	cpi	r24, 0x5A	; 90
    379e:	49 f4       	brne	.+18     	; 0x37b2 <ServoMotor_Rotate+0x30>
		{
			PWM_Duration = PWM_MAX;
    37a0:	8e ef       	ldi	r24, 0xFE	; 254
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	9a 83       	std	Y+2, r25	; 0x02
    37a6:	89 83       	std	Y+1, r24	; 0x01
			Timer2_PWM_Activate(&PWM_Duration);
    37a8:	ce 01       	movw	r24, r28
    37aa:	01 96       	adiw	r24, 0x01	; 1
    37ac:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Timer2_PWM_Activate>
    37b0:	09 c0       	rjmp	.+18     	; 0x37c4 <ServoMotor_Rotate+0x42>
		}
		else if(angle == 0)
    37b2:	8b 81       	ldd	r24, Y+3	; 0x03
    37b4:	88 23       	and	r24, r24
    37b6:	31 f4       	brne	.+12     	; 0x37c4 <ServoMotor_Rotate+0x42>
		{
			PWM_Duration = PWM_MIN;
    37b8:	1a 82       	std	Y+2, r1	; 0x02
    37ba:	19 82       	std	Y+1, r1	; 0x01
			Timer2_PWM_Activate(&PWM_Duration);
    37bc:	ce 01       	movw	r24, r28
    37be:	01 96       	adiw	r24, 0x01	; 1
    37c0:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Timer2_PWM_Activate>
	{
		 /* Do nothing */
	}

	return;
}
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	0f 90       	pop	r0
    37ca:	cf 91       	pop	r28
    37cc:	df 91       	pop	r29
    37ce:	08 95       	ret

000037d0 <Buzzer_init>:
/*
 * Description:
 * Initializing Buzzer Pins
 */
void Buzzer_init()
{
    37d0:	df 93       	push	r29
    37d2:	cf 93       	push	r28
    37d4:	cd b7       	in	r28, 0x3d	; 61
    37d6:	de b7       	in	r29, 0x3e	; 62
	/* Setting up the Pin direction */
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    37d8:	83 e0       	ldi	r24, 0x03	; 3
    37da:	66 e0       	ldi	r22, 0x06	; 6
    37dc:	41 e0       	ldi	r20, 0x01	; 1
    37de:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>

	/* Turning Buzzer OFF at first */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    37e2:	83 e0       	ldi	r24, 0x03	; 3
    37e4:	66 e0       	ldi	r22, 0x06	; 6
    37e6:	40 e0       	ldi	r20, 0x00	; 0
    37e8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
}
    37ec:	cf 91       	pop	r28
    37ee:	df 91       	pop	r29
    37f0:	08 95       	ret

000037f2 <Buzzer_on>:
/*
 * Description:
 * Turning Buzzer ON
 */
void Buzzer_on(void)
{
    37f2:	df 93       	push	r29
    37f4:	cf 93       	push	r28
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
	/* Setting Buzzer Pin to high */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    37fa:	83 e0       	ldi	r24, 0x03	; 3
    37fc:	66 e0       	ldi	r22, 0x06	; 6
    37fe:	41 e0       	ldi	r20, 0x01	; 1
    3800:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
}
    3804:	cf 91       	pop	r28
    3806:	df 91       	pop	r29
    3808:	08 95       	ret

0000380a <Buzzer_off>:
/*
 * Description:
 * Turning Buzzer OFF
 */
void Buzzer_off(void)
{
    380a:	df 93       	push	r29
    380c:	cf 93       	push	r28
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
	/* Turning Buzzer OFF at first */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    3812:	83 e0       	ldi	r24, 0x03	; 3
    3814:	66 e0       	ldi	r22, 0x06	; 6
    3816:	40 e0       	ldi	r20, 0x00	; 0
    3818:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
}
    381c:	cf 91       	pop	r28
    381e:	df 91       	pop	r29
    3820:	08 95       	ret

00003822 <Potentiometer_getVal>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint16 Potentiometer_getVal(void)
{
    3822:	df 93       	push	r29
    3824:	cf 93       	push	r28
    3826:	00 d0       	rcall	.+0      	; 0x3828 <Potentiometer_getVal+0x6>
    3828:	cd b7       	in	r28, 0x3d	; 61
    382a:	de b7       	in	r29, 0x3e	; 62
	uint16 a_potentiometer_value = 0;
    382c:	1a 82       	std	Y+2, r1	; 0x02
    382e:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	a_potentiometer_value = ADC_readChannel(POTENTIOMETER_CHANNEL_ID);
    3830:	80 e0       	ldi	r24, 0x00	; 0
    3832:	0e 94 4d 07 	call	0xe9a	; 0xe9a <ADC_readChannel>
    3836:	9a 83       	std	Y+2, r25	; 0x02
    3838:	89 83       	std	Y+1, r24	; 0x01

	return a_potentiometer_value;
    383a:	89 81       	ldd	r24, Y+1	; 0x01
    383c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	cf 91       	pop	r28
    3844:	df 91       	pop	r29
    3846:	08 95       	ret

00003848 <Status_LEDS_Init>:
/*
 * Description:
 * Initializing LEDS
 */
void Status_LEDS_Init(void)
{
    3848:	df 93       	push	r29
    384a:	cf 93       	push	r28
    384c:	cd b7       	in	r28, 0x3d	; 61
    384e:	de b7       	in	r29, 0x3e	; 62
	/* Initializing PINS direction */
	GPIO_setupPinDirection(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, PIN_OUTPUT);
    3850:	83 e0       	ldi	r24, 0x03	; 3
    3852:	63 e0       	ldi	r22, 0x03	; 3
    3854:	41 e0       	ldi	r20, 0x01	; 1
    3856:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(YELLOW_LED_PORT_ID, YELLOW_LED_PIN_ID, PIN_OUTPUT);
    385a:	83 e0       	ldi	r24, 0x03	; 3
    385c:	64 e0       	ldi	r22, 0x04	; 4
    385e:	41 e0       	ldi	r20, 0x01	; 1
    3860:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(RED_LED_PORT_ID, RED_LED_PIN_ID, PIN_OUTPUT);
    3864:	83 e0       	ldi	r24, 0x03	; 3
    3866:	65 e0       	ldi	r22, 0x05	; 5
    3868:	41 e0       	ldi	r20, 0x01	; 1
    386a:	0e 94 81 07 	call	0xf02	; 0xf02 <GPIO_setupPinDirection>

	/* Initializing to ZERO */
	GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LOGIC_LOW);
    386e:	83 e0       	ldi	r24, 0x03	; 3
    3870:	63 e0       	ldi	r22, 0x03	; 3
    3872:	40 e0       	ldi	r20, 0x00	; 0
    3874:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
	GPIO_writePin(YELLOW_LED_PORT_ID, YELLOW_LED_PIN_ID, LOGIC_LOW);
    3878:	83 e0       	ldi	r24, 0x03	; 3
    387a:	64 e0       	ldi	r22, 0x04	; 4
    387c:	40 e0       	ldi	r20, 0x00	; 0
    387e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
	GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LOGIC_LOW);
    3882:	83 e0       	ldi	r24, 0x03	; 3
    3884:	65 e0       	ldi	r22, 0x05	; 5
    3886:	40 e0       	ldi	r20, 0x00	; 0
    3888:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
}
    388c:	cf 91       	pop	r28
    388e:	df 91       	pop	r29
    3890:	08 95       	ret

00003892 <Status_LEDS_Color>:
/*
 * Description:
 * Activating the required color
 */
void Status_LEDS_Color(Led_State COLOR)
{
    3892:	df 93       	push	r29
    3894:	cf 93       	push	r28
    3896:	0f 92       	push	r0
    3898:	cd b7       	in	r28, 0x3d	; 61
    389a:	de b7       	in	r29, 0x3e	; 62
    389c:	89 83       	std	Y+1, r24	; 0x01
	/* Activate the Required LED */
	if(Green_LED == COLOR)
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	88 23       	and	r24, r24
    38a2:	81 f4       	brne	.+32     	; 0x38c4 <Status_LEDS_Color+0x32>
	{
		GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LOGIC_HIGH);
    38a4:	83 e0       	ldi	r24, 0x03	; 3
    38a6:	63 e0       	ldi	r22, 0x03	; 3
    38a8:	41 e0       	ldi	r20, 0x01	; 1
    38aa:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(YELLOW_LED_PORT_ID, YELLOW_LED_PIN_ID, LOGIC_LOW);
    38ae:	83 e0       	ldi	r24, 0x03	; 3
    38b0:	64 e0       	ldi	r22, 0x04	; 4
    38b2:	40 e0       	ldi	r20, 0x00	; 0
    38b4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LOGIC_LOW);
    38b8:	83 e0       	ldi	r24, 0x03	; 3
    38ba:	65 e0       	ldi	r22, 0x05	; 5
    38bc:	40 e0       	ldi	r20, 0x00	; 0
    38be:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    38c2:	22 c0       	rjmp	.+68     	; 0x3908 <Status_LEDS_Color+0x76>
	}
	else if(Yellow_LED == COLOR)
    38c4:	89 81       	ldd	r24, Y+1	; 0x01
    38c6:	81 30       	cpi	r24, 0x01	; 1
    38c8:	81 f4       	brne	.+32     	; 0x38ea <Status_LEDS_Color+0x58>
	{
		GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LOGIC_LOW);
    38ca:	83 e0       	ldi	r24, 0x03	; 3
    38cc:	63 e0       	ldi	r22, 0x03	; 3
    38ce:	40 e0       	ldi	r20, 0x00	; 0
    38d0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(YELLOW_LED_PORT_ID, YELLOW_LED_PIN_ID, LOGIC_HIGH);
    38d4:	83 e0       	ldi	r24, 0x03	; 3
    38d6:	64 e0       	ldi	r22, 0x04	; 4
    38d8:	41 e0       	ldi	r20, 0x01	; 1
    38da:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LOGIC_LOW);
    38de:	83 e0       	ldi	r24, 0x03	; 3
    38e0:	65 e0       	ldi	r22, 0x05	; 5
    38e2:	40 e0       	ldi	r20, 0x00	; 0
    38e4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
    38e8:	0f c0       	rjmp	.+30     	; 0x3908 <Status_LEDS_Color+0x76>
	}
	else
	{
		GPIO_writePin(GREEN_LED_PORT_ID, GREEN_LED_PIN_ID, LOGIC_LOW);
    38ea:	83 e0       	ldi	r24, 0x03	; 3
    38ec:	63 e0       	ldi	r22, 0x03	; 3
    38ee:	40 e0       	ldi	r20, 0x00	; 0
    38f0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(YELLOW_LED_PORT_ID, YELLOW_LED_PIN_ID, LOGIC_LOW);
    38f4:	83 e0       	ldi	r24, 0x03	; 3
    38f6:	64 e0       	ldi	r22, 0x04	; 4
    38f8:	40 e0       	ldi	r20, 0x00	; 0
    38fa:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
		GPIO_writePin(RED_LED_PORT_ID, RED_LED_PIN_ID, LOGIC_HIGH);
    38fe:	83 e0       	ldi	r24, 0x03	; 3
    3900:	65 e0       	ldi	r22, 0x05	; 5
    3902:	41 e0       	ldi	r20, 0x01	; 1
    3904:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_writePin>
	}
}
    3908:	0f 90       	pop	r0
    390a:	cf 91       	pop	r28
    390c:	df 91       	pop	r29
    390e:	08 95       	ret

00003910 <Drivers_init>:


/**-------------------------Function Section------------------------**/
/* Initializing all drivers */
void Drivers_init(void)
{
    3910:	df 93       	push	r29
    3912:	cf 93       	push	r28
    3914:	cd b7       	in	r28, 0x3d	; 61
    3916:	de b7       	in	r29, 0x3e	; 62
    3918:	a7 97       	sbiw	r28, 0x27	; 39
    391a:	0f b6       	in	r0, 0x3f	; 63
    391c:	f8 94       	cli
    391e:	de bf       	out	0x3e, r29	; 62
    3920:	0f be       	out	0x3f, r0	; 63
    3922:	cd bf       	out	0x3d, r28	; 61
	/* Initializing ADC */
	/*
	 * ADC_ReferenceVoltage : AVCC
	 * ADC_Prescaler : F_CPU/128
	 */
	ADC_ConfigType ADC_Config = {AVCC, F_ADC128};
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	89 83       	std	Y+1, r24	; 0x01
    3928:	87 e0       	ldi	r24, 0x07	; 7
    392a:	8a 83       	std	Y+2, r24	; 0x02
	ADC_init(&ADC_Config);
    392c:	ce 01       	movw	r24, r28
    392e:	01 96       	adiw	r24, 0x01	; 1
    3930:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>
	/* ---------------------------------------- */

	/* Initializing LCD just for TEST*/
	LCD_init();
    3934:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_init>
	 * UART_STOP_BIT_SELECT : 1-bit
	 * UART_CLOCK_POLARITY : A-sync Rising
	 * baud_rate : 9600
	 *
	 */
	UART_ConfigType UART_Config = {DOUBLE_TR_SPEED,RECEIVE_INT_EN_OFF,TRANSMIT_INT_EN_OFF,EMPTY_INT_EN_OFF,RECEIVER_EN_ON,TRANSMITTER_EN_ON,EIGHT_BIT,UBRRH_REG,ASYNCHRONOUS,PARITY_DISABLE,ONE_BIT,A_Sync_RISING_EDGE,9600};
    3938:	ce 01       	movw	r24, r28
    393a:	03 96       	adiw	r24, 0x03	; 3
    393c:	9c a3       	std	Y+36, r25	; 0x24
    393e:	8b a3       	std	Y+35, r24	; 0x23
    3940:	ea e7       	ldi	r30, 0x7A	; 122
    3942:	f1 e0       	ldi	r31, 0x01	; 1
    3944:	fe a3       	std	Y+38, r31	; 0x26
    3946:	ed a3       	std	Y+37, r30	; 0x25
    3948:	f0 e1       	ldi	r31, 0x10	; 16
    394a:	ff a3       	std	Y+39, r31	; 0x27
    394c:	ed a1       	ldd	r30, Y+37	; 0x25
    394e:	fe a1       	ldd	r31, Y+38	; 0x26
    3950:	00 80       	ld	r0, Z
    3952:	8d a1       	ldd	r24, Y+37	; 0x25
    3954:	9e a1       	ldd	r25, Y+38	; 0x26
    3956:	01 96       	adiw	r24, 0x01	; 1
    3958:	9e a3       	std	Y+38, r25	; 0x26
    395a:	8d a3       	std	Y+37, r24	; 0x25
    395c:	eb a1       	ldd	r30, Y+35	; 0x23
    395e:	fc a1       	ldd	r31, Y+36	; 0x24
    3960:	00 82       	st	Z, r0
    3962:	8b a1       	ldd	r24, Y+35	; 0x23
    3964:	9c a1       	ldd	r25, Y+36	; 0x24
    3966:	01 96       	adiw	r24, 0x01	; 1
    3968:	9c a3       	std	Y+36, r25	; 0x24
    396a:	8b a3       	std	Y+35, r24	; 0x23
    396c:	9f a1       	ldd	r25, Y+39	; 0x27
    396e:	91 50       	subi	r25, 0x01	; 1
    3970:	9f a3       	std	Y+39, r25	; 0x27
    3972:	ef a1       	ldd	r30, Y+39	; 0x27
    3974:	ee 23       	and	r30, r30
    3976:	51 f7       	brne	.-44     	; 0x394c <Drivers_init+0x3c>
	UART_init(&UART_Config);
    3978:	ce 01       	movw	r24, r28
    397a:	03 96       	adiw	r24, 0x03	; 3
    397c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <UART_init>
	/* ---------------------------------------- */

	/* Initializing Timer0 PWM */
	Timer0_ConfigType Timer0_PWM_Config;
	Timer0_PWM_Config.Timer0_PreScaler = F0_TIMER64; /* F_CPU/64. Assuming F_PWM = 976.5 Hz */
    3980:	83 e0       	ldi	r24, 0x03	; 3
    3982:	8b 8b       	std	Y+19, r24	; 0x13
	Timer0_PWM_Init(&Timer0_PWM_Config);
    3984:	ce 01       	movw	r24, r28
    3986:	43 96       	adiw	r24, 0x13	; 19
    3988:	0e 94 a5 0c 	call	0x194a	; 0x194a <Timer0_PWM_Init>
	/* ---------------------------------------- */

	/* Initializing Timer2 PWM */
	Timer2_ConfigType Timer2_PWM_Config;
	Timer2_PWM_Config.Timer2_PreScaler = F2_TIMER64; /* F_CPU/64. Assuming F_PWM = 976.5 Hz */
    398c:	84 e0       	ldi	r24, 0x04	; 4
    398e:	8b 8f       	std	Y+27, r24	; 0x1b
	Timer2_PWM_Init(&Timer2_PWM_Config);
    3990:	ce 01       	movw	r24, r28
    3992:	4b 96       	adiw	r24, 0x1b	; 27
    3994:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <Timer2_PWM_Init>
	 *  TCNT1_Value : 0
	 *  OCR1A_Value : 7813
	 *  OCR1B_Value : ---
	 */
	/* Setting the callback function*/
	Timer1_setCallBackONE(Timer1_Handler);
    3998:	8a e0       	ldi	r24, 0x0A	; 10
    399a:	9d e1       	ldi	r25, 0x1D	; 29
    399c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Timer1_setCallBackONE>


	/* ---------------------------------------- */

	/* Initializing FAN */
	DCMotor_init();
    39a0:	0e 94 03 11 	call	0x2206	; 0x2206 <DCMotor_init>
	/* ---------------------------------------- */

	/* Initializing Buzzer */
	Buzzer_init();
    39a4:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <Buzzer_init>
	/* ---------------------------------------- */

	/* Initializing Status LEDs */
	Status_LEDS_Init();
    39a8:	0e 94 24 1c 	call	0x3848	; 0x3848 <Status_LEDS_Init>
	/* ---------------------------------------- */
	/* Activating Interrupt system */
	SREG |= (1<<7);
    39ac:	af e5       	ldi	r26, 0x5F	; 95
    39ae:	b0 e0       	ldi	r27, 0x00	; 0
    39b0:	ef e5       	ldi	r30, 0x5F	; 95
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	80 81       	ld	r24, Z
    39b6:	80 68       	ori	r24, 0x80	; 128
    39b8:	8c 93       	st	X, r24
}
    39ba:	a7 96       	adiw	r28, 0x27	; 39
    39bc:	0f b6       	in	r0, 0x3f	; 63
    39be:	f8 94       	cli
    39c0:	de bf       	out	0x3e, r29	; 62
    39c2:	0f be       	out	0x3f, r0	; 63
    39c4:	cd bf       	out	0x3d, r28	; 61
    39c6:	cf 91       	pop	r28
    39c8:	df 91       	pop	r29
    39ca:	08 95       	ret

000039cc <main>:

/* ------------------------------------------------------------------ */

int main()
{
    39cc:	df 93       	push	r29
    39ce:	cf 93       	push	r28
    39d0:	cd b7       	in	r28, 0x3d	; 61
    39d2:	de b7       	in	r29, 0x3e	; 62
	/**-----------------------Local Variables----------------------**/

	/**-----------------------Pre-start Section--------------------**/

	/* Initializing all drivers: UART, DCMotor, Timer0, LCD, Stepper Motor */
	Drivers_init();
    39d4:	0e 94 88 1c 	call	0x3910	; 0x3910 <Drivers_init>
	/**-----------------------Main Section-------------------------**/

	while(1)
	{
		/* State Control function */
		State_Control();
    39d8:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <State_Control>

		if(NORMAL_STATE == g_SystemState)
    39dc:	80 91 91 01 	lds	r24, 0x0191
    39e0:	88 23       	and	r24, r24
    39e2:	19 f4       	brne	.+6      	; 0x39ea <main+0x1e>
		{
			/* Operate the Normal instructions */
			Normal_State();
    39e4:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <Normal_State>
    39e8:	f7 cf       	rjmp	.-18     	; 0x39d8 <main+0xc>
		}
		else if(EMERGENCY_STATE == g_SystemState)
    39ea:	80 91 91 01 	lds	r24, 0x0191
    39ee:	81 30       	cpi	r24, 0x01	; 1
    39f0:	19 f4       	brne	.+6      	; 0x39f8 <main+0x2c>
		{
			/* Operate the Emergency protocol */
			Emergency_State();
    39f2:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <Emergency_State>
    39f6:	f0 cf       	rjmp	.-32     	; 0x39d8 <main+0xc>
		}
		else if(ABNORMAL_STATE == g_SystemState)
    39f8:	80 91 91 01 	lds	r24, 0x0191
    39fc:	82 30       	cpi	r24, 0x02	; 2
    39fe:	19 f4       	brne	.+6      	; 0x3a06 <main+0x3a>
		{
			/* Just call the Abnormal state function */
			Abnormal_State();
    3a00:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <Abnormal_State>
    3a04:	e9 cf       	rjmp	.-46     	; 0x39d8 <main+0xc>
		}
		else if(SHUTDOWN_STATE == g_SystemState)
    3a06:	80 91 91 01 	lds	r24, 0x0191
    3a0a:	83 30       	cpi	r24, 0x03	; 3
    3a0c:	29 f7       	brne	.-54     	; 0x39d8 <main+0xc>
		{
			ShutDown_State();
    3a0e:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <ShutDown_State>
    3a12:	e2 cf       	rjmp	.-60     	; 0x39d8 <main+0xc>

00003a14 <Timer1_Handler>:
/*
 * Description:
 * Will be called when Timer1 interrupts
 */
void Timer1_Handler(void)
{
    3a14:	df 93       	push	r29
    3a16:	cf 93       	push	r28
    3a18:	cd b7       	in	r28, 0x3d	; 61
    3a1a:	de b7       	in	r29, 0x3e	; 62
	/* Increment the counter */
	g_Counter++;
    3a1c:	80 91 90 01 	lds	r24, 0x0190
    3a20:	8f 5f       	subi	r24, 0xFF	; 255
    3a22:	80 93 90 01 	sts	0x0190, r24
}
    3a26:	cf 91       	pop	r28
    3a28:	df 91       	pop	r29
    3a2a:	08 95       	ret

00003a2c <Normal_State>:
/*
 * Description:
 * Controlling Normal state
 */
void Normal_State(void)
{
    3a2c:	df 93       	push	r29
    3a2e:	cf 93       	push	r28
    3a30:	00 d0       	rcall	.+0      	; 0x3a32 <Normal_State+0x6>
    3a32:	0f 92       	push	r0
    3a34:	cd b7       	in	r28, 0x3d	; 61
    3a36:	de b7       	in	r29, 0x3e	; 62
	/**-----------------------Local Variables----------------------**/
	uint8 a_MCU1_State = 0;
    3a38:	1b 82       	std	Y+3, r1	; 0x03
	uint16 a_PotentiometerVal = 0;
    3a3a:	1a 82       	std	Y+2, r1	; 0x02
    3a3c:	19 82       	std	Y+1, r1	; 0x01
	/**-----------------------Main Section-------------------------**/
	/* Receive state from MCU1 */
	UART_sendByte(CONTROL_READY);
    3a3e:	80 e1       	ldi	r24, 0x10	; 16
    3a40:	0e 94 71 10 	call	0x20e2	; 0x20e2 <UART_sendByte>
	a_MCU1_State = UART_receiveByte();
    3a44:	0e 94 88 10 	call	0x2110	; 0x2110 <UART_receiveByte>
    3a48:	8b 83       	std	Y+3, r24	; 0x03

	/* Reset Servo and Buzzer */
	/* Disable the buzzer */
	Buzzer_off();
    3a4a:	0e 94 05 1c 	call	0x380a	; 0x380a <Buzzer_off>

	/* Servo Motor returns to zero */
	ServoMotor_Rotate(0);
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
    3a50:	0e 94 c1 1b 	call	0x3782	; 0x3782 <ServoMotor_Rotate>

	/* Check on the received byte */
	if('G' == a_MCU1_State || 'Y' == a_MCU1_State || 'R' == a_MCU1_State)
    3a54:	8b 81       	ldd	r24, Y+3	; 0x03
    3a56:	87 34       	cpi	r24, 0x47	; 71
    3a58:	39 f0       	breq	.+14     	; 0x3a68 <Normal_State+0x3c>
    3a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5c:	89 35       	cpi	r24, 0x59	; 89
    3a5e:	21 f0       	breq	.+8      	; 0x3a68 <Normal_State+0x3c>
    3a60:	8b 81       	ldd	r24, Y+3	; 0x03
    3a62:	82 35       	cpi	r24, 0x52	; 82
    3a64:	09 f0       	breq	.+2      	; 0x3a68 <Normal_State+0x3c>
    3a66:	49 c0       	rjmp	.+146    	; 0x3afa <Normal_State+0xce>
	{
		/* Check on the LED color */
		if('G' == a_MCU1_State)
    3a68:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6a:	87 34       	cpi	r24, 0x47	; 71
    3a6c:	39 f4       	brne	.+14     	; 0x3a7c <Normal_State+0x50>
		{
			Status_LEDS_Color(Green_LED);
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	0e 94 49 1c 	call	0x3892	; 0x3892 <Status_LEDS_Color>

			/* Enable Machine */
			g_MachineEn = 1;
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	80 93 68 01 	sts	0x0168, r24
    3a7a:	0d c0       	rjmp	.+26     	; 0x3a96 <Normal_State+0x6a>
		}
		else if('Y' == a_MCU1_State)
    3a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7e:	89 35       	cpi	r24, 0x59	; 89
    3a80:	39 f4       	brne	.+14     	; 0x3a90 <Normal_State+0x64>
		{
			Status_LEDS_Color(Yellow_LED);
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	0e 94 49 1c 	call	0x3892	; 0x3892 <Status_LEDS_Color>

			/* Enable Machine */
			g_MachineEn = 1;
    3a88:	81 e0       	ldi	r24, 0x01	; 1
    3a8a:	80 93 68 01 	sts	0x0168, r24
    3a8e:	03 c0       	rjmp	.+6      	; 0x3a96 <Normal_State+0x6a>
		}
		else
		{
			Status_LEDS_Color(Red_LED);
    3a90:	82 e0       	ldi	r24, 0x02	; 2
    3a92:	0e 94 49 1c 	call	0x3892	; 0x3892 <Status_LEDS_Color>
		}

		if(g_MachineEn)
    3a96:	80 91 68 01 	lds	r24, 0x0168
    3a9a:	88 23       	and	r24, r24
    3a9c:	71 f1       	breq	.+92     	; 0x3afa <Normal_State+0xce>
		{
			/* Read the Potentiometer value */
			a_PotentiometerVal = Potentiometer_getVal();
    3a9e:	0e 94 11 1c 	call	0x3822	; 0x3822 <Potentiometer_getVal>
    3aa2:	9a 83       	std	Y+2, r25	; 0x02
    3aa4:	89 83       	std	Y+1, r24	; 0x01

			/* Enable the Machine */
			DcMotor_Rotate(ClockWise, 255*(a_PotentiometerVal/1023.0));
    3aa6:	89 81       	ldd	r24, Y+1	; 0x01
    3aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aaa:	cc 01       	movw	r24, r24
    3aac:	a0 e0       	ldi	r26, 0x00	; 0
    3aae:	b0 e0       	ldi	r27, 0x00	; 0
    3ab0:	bc 01       	movw	r22, r24
    3ab2:	cd 01       	movw	r24, r26
    3ab4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	bc 01       	movw	r22, r24
    3abe:	cd 01       	movw	r24, r26
    3ac0:	20 e0       	ldi	r18, 0x00	; 0
    3ac2:	30 ec       	ldi	r19, 0xC0	; 192
    3ac4:	4f e7       	ldi	r20, 0x7F	; 127
    3ac6:	54 e4       	ldi	r21, 0x44	; 68
    3ac8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3acc:	dc 01       	movw	r26, r24
    3ace:	cb 01       	movw	r24, r22
    3ad0:	bc 01       	movw	r22, r24
    3ad2:	cd 01       	movw	r24, r26
    3ad4:	20 e0       	ldi	r18, 0x00	; 0
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	4f e7       	ldi	r20, 0x7F	; 127
    3ada:	53 e4       	ldi	r21, 0x43	; 67
    3adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae0:	dc 01       	movw	r26, r24
    3ae2:	cb 01       	movw	r24, r22
    3ae4:	bc 01       	movw	r22, r24
    3ae6:	cd 01       	movw	r24, r26
    3ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aec:	dc 01       	movw	r26, r24
    3aee:	cb 01       	movw	r24, r22
    3af0:	98 2f       	mov	r25, r24
    3af2:	80 e0       	ldi	r24, 0x00	; 0
    3af4:	69 2f       	mov	r22, r25
    3af6:	0e 94 19 11 	call	0x2232	; 0x2232 <DcMotor_Rotate>
	else
	{
		/* Do nothing */
	}

}
    3afa:	0f 90       	pop	r0
    3afc:	0f 90       	pop	r0
    3afe:	0f 90       	pop	r0
    3b00:	cf 91       	pop	r28
    3b02:	df 91       	pop	r29
    3b04:	08 95       	ret

00003b06 <Emergency_State>:
/*
 * Description:
 * Controlling Emergency state
 */
void Emergency_State(void)
{
    3b06:	df 93       	push	r29
    3b08:	cf 93       	push	r28
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
	/* Enable RED LED */
	Status_LEDS_Color(Red_LED);
    3b0e:	82 e0       	ldi	r24, 0x02	; 2
    3b10:	0e 94 49 1c 	call	0x3892	; 0x3892 <Status_LEDS_Color>

	/* Enable the buzzer */
	Buzzer_on();
    3b14:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <Buzzer_on>

	/* Servo Motor returns to zero */
	ServoMotor_Rotate(0);
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	0e 94 c1 1b 	call	0x3782	; 0x3782 <ServoMotor_Rotate>
}
    3b1e:	cf 91       	pop	r28
    3b20:	df 91       	pop	r29
    3b22:	08 95       	ret

00003b24 <Abnormal_State>:
/*
 * Description:
 * Controlling Abnormal state
 */
void Abnormal_State(void)
{
    3b24:	df 93       	push	r29
    3b26:	cf 93       	push	r28
    3b28:	cd b7       	in	r28, 0x3d	; 61
    3b2a:	de b7       	in	r29, 0x3e	; 62
	/* Enable RED LED */
	Status_LEDS_Color(Red_LED);
    3b2c:	82 e0       	ldi	r24, 0x02	; 2
    3b2e:	0e 94 49 1c 	call	0x3892	; 0x3892 <Status_LEDS_Color>

	/* Enable the buzzer */
	Buzzer_on();
    3b32:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <Buzzer_on>

	/* Stop the machine */
	DCMotor_stop();
    3b36:	0e 94 44 11 	call	0x2288	; 0x2288 <DCMotor_stop>

	/* Servo 90 degrees */
	ServoMotor_Rotate(90);
    3b3a:	8a e5       	ldi	r24, 0x5A	; 90
    3b3c:	0e 94 c1 1b 	call	0x3782	; 0x3782 <ServoMotor_Rotate>

	/* Activate Timer1 for 5 seconds */
	Timer1_Init(&TIMER1_Config);
    3b40:	89 e6       	ldi	r24, 0x69	; 105
    3b42:	91 e0       	ldi	r25, 0x01	; 1
    3b44:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <Timer1_Init>
	while(g_Counter != 5); /* Wait 5 seconds */
    3b48:	80 91 90 01 	lds	r24, 0x0190
    3b4c:	85 30       	cpi	r24, 0x05	; 5
    3b4e:	e1 f7       	brne	.-8      	; 0x3b48 <Abnormal_State+0x24>
	Timer1_deInit();
    3b50:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <Timer1_deInit>

	/* Clear Counter */
	g_Counter = 0;
    3b54:	10 92 90 01 	sts	0x0190, r1

}
    3b58:	cf 91       	pop	r28
    3b5a:	df 91       	pop	r29
    3b5c:	08 95       	ret

00003b5e <ShutDown_State>:
/*
 * Description:
 * Controlling Shutdown state if push button was pushed
 */
void ShutDown_State(void)
{
    3b5e:	df 93       	push	r29
    3b60:	cf 93       	push	r28
    3b62:	cd b7       	in	r28, 0x3d	; 61
    3b64:	de b7       	in	r29, 0x3e	; 62
	/* Stop the MACHINE */
	DCMotor_stop();
    3b66:	0e 94 44 11 	call	0x2288	; 0x2288 <DCMotor_stop>

	/* Enable RED lED */
	Status_LEDS_Color(Red_LED);
    3b6a:	82 e0       	ldi	r24, 0x02	; 2
    3b6c:	0e 94 49 1c 	call	0x3892	; 0x3892 <Status_LEDS_Color>

	/*Disable Machine*/
	g_MachineEn = 0;
    3b70:	10 92 68 01 	sts	0x0168, r1
}
    3b74:	cf 91       	pop	r28
    3b76:	df 91       	pop	r29
    3b78:	08 95       	ret

00003b7a <State_Control>:
/*
 * Description:
 * Controlling states
 */
void State_Control(void)
{
    3b7a:	df 93       	push	r29
    3b7c:	cf 93       	push	r28
    3b7e:	0f 92       	push	r0
    3b80:	cd b7       	in	r28, 0x3d	; 61
    3b82:	de b7       	in	r29, 0x3e	; 62
	/**-----------------------Local Variables----------------------**/
	uint8 a_MCU1_State = 0;
    3b84:	19 82       	std	Y+1, r1	; 0x01
	/**-----------------------Main Section-------------------------**/
	/* Receive state from MCU1 */
	UART_sendByte(CONTROL_READY);
    3b86:	80 e1       	ldi	r24, 0x10	; 16
    3b88:	0e 94 71 10 	call	0x20e2	; 0x20e2 <UART_sendByte>
	a_MCU1_State = UART_receiveByte(); /* Receiving only a byte which indicates which state we are */
    3b8c:	0e 94 88 10 	call	0x2110	; 0x2110 <UART_receiveByte>
    3b90:	89 83       	std	Y+1, r24	; 0x01

	/* Check on the state */
	if('A' == a_MCU1_State)
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	81 34       	cpi	r24, 0x41	; 65
    3b96:	21 f4       	brne	.+8      	; 0x3ba0 <State_Control+0x26>
	{
		g_SystemState = ABNORMAL_STATE;
    3b98:	82 e0       	ldi	r24, 0x02	; 2
    3b9a:	80 93 91 01 	sts	0x0191, r24
    3b9e:	10 c0       	rjmp	.+32     	; 0x3bc0 <State_Control+0x46>
	}
	else if('E' == a_MCU1_State)
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	85 34       	cpi	r24, 0x45	; 69
    3ba4:	21 f4       	brne	.+8      	; 0x3bae <State_Control+0x34>
	{
		g_SystemState = EMERGENCY_STATE;
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	80 93 91 01 	sts	0x0191, r24
    3bac:	09 c0       	rjmp	.+18     	; 0x3bc0 <State_Control+0x46>
	}
	else if('S' == a_MCU1_State)
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
    3bb0:	83 35       	cpi	r24, 0x53	; 83
    3bb2:	21 f4       	brne	.+8      	; 0x3bbc <State_Control+0x42>
	{
		g_SystemState = SHUTDOWN_STATE;
    3bb4:	83 e0       	ldi	r24, 0x03	; 3
    3bb6:	80 93 91 01 	sts	0x0191, r24
    3bba:	02 c0       	rjmp	.+4      	; 0x3bc0 <State_Control+0x46>
	}
	else
	{
		g_SystemState = NORMAL_STATE;
    3bbc:	10 92 91 01 	sts	0x0191, r1
	}

	return;
}
    3bc0:	0f 90       	pop	r0
    3bc2:	cf 91       	pop	r28
    3bc4:	df 91       	pop	r29
    3bc6:	08 95       	ret

00003bc8 <__mulsi3>:
    3bc8:	62 9f       	mul	r22, r18
    3bca:	d0 01       	movw	r26, r0
    3bcc:	73 9f       	mul	r23, r19
    3bce:	f0 01       	movw	r30, r0
    3bd0:	82 9f       	mul	r24, r18
    3bd2:	e0 0d       	add	r30, r0
    3bd4:	f1 1d       	adc	r31, r1
    3bd6:	64 9f       	mul	r22, r20
    3bd8:	e0 0d       	add	r30, r0
    3bda:	f1 1d       	adc	r31, r1
    3bdc:	92 9f       	mul	r25, r18
    3bde:	f0 0d       	add	r31, r0
    3be0:	83 9f       	mul	r24, r19
    3be2:	f0 0d       	add	r31, r0
    3be4:	74 9f       	mul	r23, r20
    3be6:	f0 0d       	add	r31, r0
    3be8:	65 9f       	mul	r22, r21
    3bea:	f0 0d       	add	r31, r0
    3bec:	99 27       	eor	r25, r25
    3bee:	72 9f       	mul	r23, r18
    3bf0:	b0 0d       	add	r27, r0
    3bf2:	e1 1d       	adc	r30, r1
    3bf4:	f9 1f       	adc	r31, r25
    3bf6:	63 9f       	mul	r22, r19
    3bf8:	b0 0d       	add	r27, r0
    3bfa:	e1 1d       	adc	r30, r1
    3bfc:	f9 1f       	adc	r31, r25
    3bfe:	bd 01       	movw	r22, r26
    3c00:	cf 01       	movw	r24, r30
    3c02:	11 24       	eor	r1, r1
    3c04:	08 95       	ret

00003c06 <__udivmodsi4>:
    3c06:	a1 e2       	ldi	r26, 0x21	; 33
    3c08:	1a 2e       	mov	r1, r26
    3c0a:	aa 1b       	sub	r26, r26
    3c0c:	bb 1b       	sub	r27, r27
    3c0e:	fd 01       	movw	r30, r26
    3c10:	0d c0       	rjmp	.+26     	; 0x3c2c <__udivmodsi4_ep>

00003c12 <__udivmodsi4_loop>:
    3c12:	aa 1f       	adc	r26, r26
    3c14:	bb 1f       	adc	r27, r27
    3c16:	ee 1f       	adc	r30, r30
    3c18:	ff 1f       	adc	r31, r31
    3c1a:	a2 17       	cp	r26, r18
    3c1c:	b3 07       	cpc	r27, r19
    3c1e:	e4 07       	cpc	r30, r20
    3c20:	f5 07       	cpc	r31, r21
    3c22:	20 f0       	brcs	.+8      	; 0x3c2c <__udivmodsi4_ep>
    3c24:	a2 1b       	sub	r26, r18
    3c26:	b3 0b       	sbc	r27, r19
    3c28:	e4 0b       	sbc	r30, r20
    3c2a:	f5 0b       	sbc	r31, r21

00003c2c <__udivmodsi4_ep>:
    3c2c:	66 1f       	adc	r22, r22
    3c2e:	77 1f       	adc	r23, r23
    3c30:	88 1f       	adc	r24, r24
    3c32:	99 1f       	adc	r25, r25
    3c34:	1a 94       	dec	r1
    3c36:	69 f7       	brne	.-38     	; 0x3c12 <__udivmodsi4_loop>
    3c38:	60 95       	com	r22
    3c3a:	70 95       	com	r23
    3c3c:	80 95       	com	r24
    3c3e:	90 95       	com	r25
    3c40:	9b 01       	movw	r18, r22
    3c42:	ac 01       	movw	r20, r24
    3c44:	bd 01       	movw	r22, r26
    3c46:	cf 01       	movw	r24, r30
    3c48:	08 95       	ret

00003c4a <__prologue_saves__>:
    3c4a:	2f 92       	push	r2
    3c4c:	3f 92       	push	r3
    3c4e:	4f 92       	push	r4
    3c50:	5f 92       	push	r5
    3c52:	6f 92       	push	r6
    3c54:	7f 92       	push	r7
    3c56:	8f 92       	push	r8
    3c58:	9f 92       	push	r9
    3c5a:	af 92       	push	r10
    3c5c:	bf 92       	push	r11
    3c5e:	cf 92       	push	r12
    3c60:	df 92       	push	r13
    3c62:	ef 92       	push	r14
    3c64:	ff 92       	push	r15
    3c66:	0f 93       	push	r16
    3c68:	1f 93       	push	r17
    3c6a:	cf 93       	push	r28
    3c6c:	df 93       	push	r29
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
    3c72:	ca 1b       	sub	r28, r26
    3c74:	db 0b       	sbc	r29, r27
    3c76:	0f b6       	in	r0, 0x3f	; 63
    3c78:	f8 94       	cli
    3c7a:	de bf       	out	0x3e, r29	; 62
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	cd bf       	out	0x3d, r28	; 61
    3c80:	09 94       	ijmp

00003c82 <__epilogue_restores__>:
    3c82:	2a 88       	ldd	r2, Y+18	; 0x12
    3c84:	39 88       	ldd	r3, Y+17	; 0x11
    3c86:	48 88       	ldd	r4, Y+16	; 0x10
    3c88:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c90:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c92:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c94:	b9 84       	ldd	r11, Y+9	; 0x09
    3c96:	c8 84       	ldd	r12, Y+8	; 0x08
    3c98:	df 80       	ldd	r13, Y+7	; 0x07
    3c9a:	ee 80       	ldd	r14, Y+6	; 0x06
    3c9c:	fd 80       	ldd	r15, Y+5	; 0x05
    3c9e:	0c 81       	ldd	r16, Y+4	; 0x04
    3ca0:	1b 81       	ldd	r17, Y+3	; 0x03
    3ca2:	aa 81       	ldd	r26, Y+2	; 0x02
    3ca4:	b9 81       	ldd	r27, Y+1	; 0x01
    3ca6:	ce 0f       	add	r28, r30
    3ca8:	d1 1d       	adc	r29, r1
    3caa:	0f b6       	in	r0, 0x3f	; 63
    3cac:	f8 94       	cli
    3cae:	de bf       	out	0x3e, r29	; 62
    3cb0:	0f be       	out	0x3f, r0	; 63
    3cb2:	cd bf       	out	0x3d, r28	; 61
    3cb4:	ed 01       	movw	r28, r26
    3cb6:	08 95       	ret

00003cb8 <itoa>:
    3cb8:	fb 01       	movw	r30, r22
    3cba:	9f 01       	movw	r18, r30
    3cbc:	e8 94       	clt
    3cbe:	42 30       	cpi	r20, 0x02	; 2
    3cc0:	c4 f0       	brlt	.+48     	; 0x3cf2 <itoa+0x3a>
    3cc2:	45 32       	cpi	r20, 0x25	; 37
    3cc4:	b4 f4       	brge	.+44     	; 0x3cf2 <itoa+0x3a>
    3cc6:	4a 30       	cpi	r20, 0x0A	; 10
    3cc8:	29 f4       	brne	.+10     	; 0x3cd4 <itoa+0x1c>
    3cca:	97 fb       	bst	r25, 7
    3ccc:	1e f4       	brtc	.+6      	; 0x3cd4 <itoa+0x1c>
    3cce:	90 95       	com	r25
    3cd0:	81 95       	neg	r24
    3cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd4:	64 2f       	mov	r22, r20
    3cd6:	77 27       	eor	r23, r23
    3cd8:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__udivmodhi4>
    3cdc:	80 5d       	subi	r24, 0xD0	; 208
    3cde:	8a 33       	cpi	r24, 0x3A	; 58
    3ce0:	0c f0       	brlt	.+2      	; 0x3ce4 <itoa+0x2c>
    3ce2:	89 5d       	subi	r24, 0xD9	; 217
    3ce4:	81 93       	st	Z+, r24
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	00 97       	sbiw	r24, 0x00	; 0
    3cea:	a1 f7       	brne	.-24     	; 0x3cd4 <itoa+0x1c>
    3cec:	16 f4       	brtc	.+4      	; 0x3cf2 <itoa+0x3a>
    3cee:	5d e2       	ldi	r21, 0x2D	; 45
    3cf0:	51 93       	st	Z+, r21
    3cf2:	10 82       	st	Z, r1
    3cf4:	c9 01       	movw	r24, r18
    3cf6:	0c 94 7d 1e 	jmp	0x3cfa	; 0x3cfa <strrev>

00003cfa <strrev>:
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	fc 01       	movw	r30, r24
    3cfe:	67 2f       	mov	r22, r23
    3d00:	71 91       	ld	r23, Z+
    3d02:	77 23       	and	r23, r23
    3d04:	e1 f7       	brne	.-8      	; 0x3cfe <strrev+0x4>
    3d06:	32 97       	sbiw	r30, 0x02	; 2
    3d08:	04 c0       	rjmp	.+8      	; 0x3d12 <strrev+0x18>
    3d0a:	7c 91       	ld	r23, X
    3d0c:	6d 93       	st	X+, r22
    3d0e:	70 83       	st	Z, r23
    3d10:	62 91       	ld	r22, -Z
    3d12:	ae 17       	cp	r26, r30
    3d14:	bf 07       	cpc	r27, r31
    3d16:	c8 f3       	brcs	.-14     	; 0x3d0a <strrev+0x10>
    3d18:	08 95       	ret

00003d1a <__udivmodhi4>:
    3d1a:	aa 1b       	sub	r26, r26
    3d1c:	bb 1b       	sub	r27, r27
    3d1e:	51 e1       	ldi	r21, 0x11	; 17
    3d20:	07 c0       	rjmp	.+14     	; 0x3d30 <__udivmodhi4_ep>

00003d22 <__udivmodhi4_loop>:
    3d22:	aa 1f       	adc	r26, r26
    3d24:	bb 1f       	adc	r27, r27
    3d26:	a6 17       	cp	r26, r22
    3d28:	b7 07       	cpc	r27, r23
    3d2a:	10 f0       	brcs	.+4      	; 0x3d30 <__udivmodhi4_ep>
    3d2c:	a6 1b       	sub	r26, r22
    3d2e:	b7 0b       	sbc	r27, r23

00003d30 <__udivmodhi4_ep>:
    3d30:	88 1f       	adc	r24, r24
    3d32:	99 1f       	adc	r25, r25
    3d34:	5a 95       	dec	r21
    3d36:	a9 f7       	brne	.-22     	; 0x3d22 <__udivmodhi4_loop>
    3d38:	80 95       	com	r24
    3d3a:	90 95       	com	r25
    3d3c:	bc 01       	movw	r22, r24
    3d3e:	cd 01       	movw	r24, r26
    3d40:	08 95       	ret

00003d42 <_exit>:
    3d42:	f8 94       	cli

00003d44 <__stop_program>:
    3d44:	ff cf       	rjmp	.-2      	; 0x3d44 <__stop_program>
